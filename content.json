{"pages":[{"title":"about","text":"关于我这里Gekoo,是弱省的一个蒟蒻WAer…目前正在文化课倒数与OI间苦苦挣扎喜欢的话就坚持8 友链本Blog首席合作伙伴:中华人民共和国政府 https://www.gov.cn 同届生:AKUOI DKY https://baka.online素质电竞 HHY https://oierhhy.top阳光男孩 TKJ https://oiertkj.top压行鬼才 宇興 https://www.cnblogs.com/yu-xing勤奋巨神 Chloris https://www.cnblogs.com/chloris物理很菜 AQSfer https://www.cnblogs.com/qxyzili--24不知写啥 OIerGLH https://www.cnblogs.com/oierglh儒雅随和 SIN_XIII https://www.cnblogs.com/SINXIII 学长/姐:邦邦人 Labelray http://labelray.top恶心肥宅 ErkkiErkko https://www.cnblogs.com/ErkkiErkko游戏开发者 Floatiy https://www.cnblogs.com/floatiy 校外朋友:ACCPET https://zhehao.topYorkWu http://yueyangwu.cn","link":"/about/index.html"}],"posts":[{"title":" Luogu P1073 最优贸易","text":"虚假的Dijkstra Luogu P1073 最优贸易题面：题目描述C 国有 n 个大城市和 m 条道路，每条道路连接这 n 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 m 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 1 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 n 个城市的标号从 1~ n，阿龙决定从 1 号城市出发，并最终在 n 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 n 个城市。阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品――水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 现在给出 n 个城市的水晶球价格，m 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式：第一行包含 2 个正整n 和 m ，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 n 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 n 个城市的商品价格。 接下来 m 行，每行有 3 个正整数 x, y, z，每两个整数之间用一个空格隔开。如果 = 1，表示这条道路是城市 x 到城市 y 之间的单向道路；如果 z = 2，表示这条道路为城市 x 和城市 y 之间的双向道路。 输出格式：一个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 0。 数据范围：输入数据保证 1 号城市可以到达 n 号城市。 对于 10% 的数据，1 ≤ n ≤ 6。 对于 30% 的数据，1 ≤ n ≤ 100。 对于 50% 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市。 对于 100% 的数据，1 ≤ n ≤ 100000，1 ≤ m ≤ 500000，1 ≤ x, y ≤ n，1 ≤ z ≤ 2，1 ≤ 各城市 水晶球价格 ≤ 100. 思路:问题转化为求1-n的一条路径使得途径点的最大点权与最小点权的差最大. 建原图和反图，先在正图上跑“Dijkstra”得到1到各点最小值，再在反图上跑“Dijkstra”得到n到各点最大值。 枚举1 - n，维护$ans=max(ans,E[i]-G[i])$. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], g[N &lt;&lt; 1]; int ecnt, gcnt, ehead[N], ghead[N], n, m, p[N], E[N], G[N], ans; bool vis[N]; inline void AddE(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = ehead[f], ehead[f] = ecnt;} inline void AddG(int f, int to) {g[++gcnt].to = to, g[gcnt].nxt = ghead[f], ghead[f] = gcnt;} signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;p[i]); for (int i = 1; i &lt;= m; i++) { int x , y , z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); AddE(x, y); AddG(y, x); if (z == 2) { AddE(y, x); AddG(x, y); } } //Dijkstra memset(vis, 0, sizeof(vis)); memset(E, 0x3f, sizeof(E)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; q; q.push(std::make_pair(-p[1], 1)); E[1] = p[1]; while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = ehead[u]; i; i = e[i].nxt) { int v = e[i].to; E[v] = std::min(E[u], p[v]); q.push(std::make_pair(-E[v], v)); } } memset(G, -0x3f, sizeof(G)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; Q; Q.push(std::make_pair(p[n], n)); G[n] = p[n]; while (!Q.empty()) { int u = Q.top().second; Q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = ghead[u]; i; i = g[i].nxt) { int v = g[i].to; G[v] = std::max(G[u], p[v]); Q.push(std::make_pair(G[v], v)); } } //枚举节点 for (int i = 1; i &lt;= n; i++) ans = std::max(ans, G[i] - E[i]); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/01/luogu-p1073/"},{"title":" Luogu P1108 低价购买\t\t","text":"变种LIS Luogu P1108 低价购买题面：题目描述“低价购买”这条建议是在奶牛股票市场取得成功的一半规则。要想被认为是伟大的投资者，你必须遵循以下的问题建议:“低价购买；再低价购买”。每次你购买一支股票,你必须用低于你上次购买它的价格购买它。买的次数越多越好!你的目标是在遵循以上建议的前提下，求你最多能购买股票的次数。你将被给出一段时间内一支股票每天的出售价($2^{16} $范围内的正整数)，你可以选择在哪些天购买这支股票。每次购买都必须遵循“低价购买；再低价购买”的原则。写一个程序计算最大购买次数。 这里是某支股票的价格清单： 日期 $ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8, 9 ,10 ,11, 12$ 价格 $68 ,69 ,54, 64,68 ,64 ,70 ,67 ,78 ,62, 98, 87 $ 最优秀的投资者可以购买最多4次股票，可行方案中的一种是： 日期 $2 , 5 , 6 ,10 $ 价格 $69, 68 ,64 ,62 $ 输入格式：第1行: $ N(1 \\le N \\le 5000) $，股票发行天数 第2行: $ N$个数，是每天的股票价格。 输出格式：两个数: 最大购买次数和拥有最大购买次数的方案数($ \\le 2^{31} $)当二种方案“看起来一样”时（就是说它们构成的价格队列一样的时候）,这2种方案被认为是相同的。 思路:第一问ez,由下次购买价格低于上次,求最大购买次数可转化为LIS. 思考点主要在第二问,求出最大购买次数方案数. 事实上可以显然地求出最大购买次数方案数的状态转移方程: $$ c[i]_{j:1\\rightarrow i}= \\left{ \\begin{aligned} 1,if(f[i]=1)\\ c[i]+c[j],if(f[i]=f[j]+1,a[i]&lt;a[j])\\ 0,if(a[i]=a[j],f[i]=f[j]) \\end{aligned} \\right.\\ $$ 解释一下: 当f[i]=1时,说明这是一种新的方案,c[i]=1. 然后$j:1\\rightarrow i$扫一遍,如果f[i]=f[j]+1&amp;&amp;a[i]&lt;a[j],说明他们属于当前方案,将他们的方案数加上. 如果f[i]=f[j]&amp;&amp;a[i]=a[j],说明这两种股票一模一样,当前c[i]直接为0,此步是去重. 最后最重要的:不开long long见祖宗!!!!!!!!!!! 代码:12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;bits/stdc++.h&gt;using namespace std;#define N 5005#define ll long longnamespace Gekoo { ll n, f[N], a[N], c[N], ans = -(1 &lt;&lt; 30), cans; void QAQ() { scanf(\"%lld\", &amp;n); for (ll i = 1; i &lt;= n; i++) { scanf(\"%lld\", &amp;a[i]); } for (ll i = 1; i &lt;= n; i++) { for (ll j = 0; j &lt; i; j++) { f[i] = (a[i] &lt; a[j])? max(f[i], f[j]) : f[i]; } f[i]++; if (f[i] == 1) c[i] = 1; for (ll j = 0; j &lt; i; j++) { if (a[i] &lt; a[j] &amp;&amp; f[i] == f[j] + 1) c[i] = (c[i] + c[j]); else if (a[i] == a[j] &amp;&amp; f[i] == f[j]) c[i] = 0; } ans = max(ans, f[i]); } for (ll i = 1; i &lt;= n; i++) { if(f[i] == ans) cans += c[i]; } printf(\"%lld %lld\\n\", ans, cans); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p1108/"},{"title":"(Uncompleted)(5.9更新)纸糊窜学习笔记","text":"图巨Orz 纸糊窜学习笔记图巨使用自动机为我们讲解了一系列纸糊窜算法. 定义与符号 $\\Sigma$是字母表，字母表是一个非空的有限集合，字符串$S$是元素在字母表中的有限长的数组 所有字符串的集合$\\Sigma^$，空串$\\epsilon \\in \\Sigma^$ 对于字符串 $S \\in \\Sigma *$，$S_i$或$S[i]$是字符串第$i$个位置的字符，从$1$开始编号 定义$|S|$为字符串$S$的长度 $S[i,j]$为字符串$S_iS_{i+1}…S_j$,i省略代表1,j省略代表$|S|$ $A^R$是字符串的反转 $AB$是字符串$A,B$的拼接. 拼接和反转满足穿脱原则,即:$(AB)^R=B^RA^R$ $S^k$表示字符串重复k次构成的字符串 $S^*$表示字符串集合${S^k|k \\in \\N}$ 确定性有限状态自动机(DFA)1.定义有限状态自动机是一张边上带有字母的有向图，它有唯一的初始节点和一些接受节点。 DFA满足对于图上任意一个节点$u$和一个字母$w \\in \\Sigma$,至多只有一条从$u$出发标有$w$的边.设这条边到达$v$,用$\\delta(u, w) = v$来表示这条边. 我们可以把DFA理解成一个五元组$M=(\\Sigma,Q,F,\\delta,q_0)$. DFA的重要作用是作为识别字符串的工具，从另一个角度讲，DFA是一个（可能是无限的）字符串集合的有限表示.我们有时将字符串的集合称为语言。自动机$M$能识别的串代表的语言记作$L(M)$. 如果自动机$M$给定,判断字符串$S$能否被$M$接受只需要$O(|S|+|M|)$的时间. 2.构造自动机对于一个串T，包含这个串的字符串构成的语言记作$L(T)$。那么如果我们能构造出$L(T)$所对应的DFA，那么就可以在线性时间内判定任何串S是否属于$L(T)$，即是否包含这个串作为子串. 构造自动机的第一步是为每个状态赋予一定的实际含义.不妨设$|S| = m,|T| = n$.首先，由于我们的识别算法是在线的，我们可以稍稍收紧自动机的接受条件，只接受那些满足长度为$n$的后缀是$T$的字符串.如果读入的串$S$的最长后缀满足其也是$T$的一个长度为$i$的前缀，我们让它落在状态$q_i$上。那么根据定义，$q_0$是起始状态，$q_n$是接受状态. 接下来我们考虑$\\delta (q_i, x)$应当转移到哪一个状态.即如果一个字符串$S$的最后$i$位是$T[,i]$，那么再读入一个字符$x$，最长能匹配的前缀有多长.我们分两种状态来讨论这一点. 若$T_{i + 1} = x$, 则匹配成功. $\\delta (q_i, x) = q_{i + 1}$ 若$T_{i + 1} \\not ={x}$, 则匹配失败. $\\delta (q_i, x) = q_{j + 1}$,其中$j$是最大的满足$T[,j] = T[i - j + 1, i]$和$T_{j + 1} = x$的数. 3.Border显然,高效转移需要关注$T[,j] = T[i - j + 1, i]$的性质.因此我们引入概念border.若字符串$T$满足$T$既是字符串$S$的一个前缀也是字符串$S$的一个后缀,则$T$是$S$的一个border.","link":"/2019/05/09/AM/"},{"title":" Luogu P1262 间谍网络\t\t","text":"ning干 Luogu P1262 间谍网络题面：题目描述由于外国间谍的大量渗入，国家安全正处于高度的危机之中。如果A间谍手中掌握着关于B间谍的犯罪证据，则称A可以揭发B。有些间谍收受贿赂，只要给他们一定数量的美元，他们就愿意交出手中掌握的全部情报。所以，如果我们能够收买一些间谍的话，我们就可能控制间谍网中的每一分子。因为一旦我们逮捕了一个间谍，他手中掌握的情报都将归我们所有，这样就有可能逮捕新的间谍，掌握新的情报。 我们的反间谍机关提供了一份资料，包括所有已知的受贿的间谍，以及他们愿意收受的具体数额。同时我们还知道哪些间谍手中具体掌握了哪些间谍的资料。假设总共有n个间谍(n不超过3000)，每个间谍分别用1到3000的整数来标识。 请根据这份资料，判断我们是否有可能控制全部的间谍，如果可以，求出我们所需要支付的最少资金。否则，输出不能被控制的一个间谍。 输入格式：第一行只有一个整数n。 第二行是整数p。表示愿意被收买的人数，1≤p≤n。 接下来的p行，每行有两个整数，第一个数是一个愿意被收买的间谍的编号，第二个数表示他将会被收买的数额。这个数额不超过20000。 紧跟着一行只有一个整数r，1≤r≤8000。然后r行，每行两个正整数，表示数对(A, B)，A间谍掌握B间谍的证据。 输出格式：如果可以控制所有间谍，第一行输出YES，并在第二行输出所需要支付的贿金最小值。否则输出NO，并在第二行输出不能控制的间谍中，编号最小的间谍编号。 思路:显然,同一个SCC里的间谍会互相出卖.因此,先缩点,记录每个SCC里的最小特工编号和贿赂费用. 思考后可以发现,只要我们控制了所有入度为0的特工,整个图就都可以被控制. 直接寻找一下所有入度为0的点,如果该点不能被贿赂,就无法控制所有间谍,此时记录编号最小的间谍,反之将贿金加给ans. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; int ecnt, ccnt, head[N], hc[N], p, n, m, MO, num, cnt, ans = 0, cant = 0x3f3f3f3f; int stack[N], dfn[N], low[N], id[N], ind[N], val[N]; int mn[N], cost[N]; bool ins[N], flg; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, ins[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], ins[y] = 0; id[y] = cnt; if (cost[y] &gt; 0) val[cnt] = std::min(val[cnt], cost[y]); mn[cnt] = std::min(mn[cnt], y); } while (x != y); } } signed QAQ() { memset(val, 0x3f, sizeof(val)); memset(mn, 0x3f, sizeof(mn)); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); cost[a] = b; } int r; scanf(\"%d\", &amp;r); for (int i = 1; i &lt;= r; i++) { int a, b; scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (id[u] != id[v]) AddC(id[u], id[v]), ind[id[v]]++; } } for (int i = 1; i &lt;= cnt; i++) { if (!ind[i]) { if (val[i] == 0x3f3f3f3f) { flg = 1; cant = std::min(cant, mn[i]); } else { ans += val[i]; } } } if (!flg) return !printf(\"YES\\n%d\\n\", ans); else return !printf(\"NO\\n%d\\n\", cant); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p1262/"},{"title":" Luogu P1306 斐波那契公约数\t\t","text":"矩阵乘法板子题 Luogu P1306 斐波那契公约数题面：题目描述对于Fibonacci数列:1,1,2,3,5,8,13……大家应该很熟悉吧~~~但是现在有一个很“简单”问题:第n项和第m项的最大公约数是多少？ 输入格式：两个正整数n和m.($n,m\\le 10^9$). 注意:数据很大. 输出格式：Fn和Fm的最大公约数. 由于看了大数字就头晕,所以只要输出最后的8位数字就可以了. 思路:通过打表可以得到一条显然的结论:$gcd(f(n),f(m))=f(gcd(n,m))$. 那么求就vans了.不过数据很大,那么就必须使用矩阵优化了. 所以这是矩阵乘法板子题 求一哈中间矩阵: $\\begin {bmatrix} f(i-1), f(i)\\\\end{bmatrix}=\\begin {bmatrix} f(i-2),f(i-1)\\end{bmatrix}\\times\\begin{bmatrix}0,1\\1,1\\end{bmatrix}$ 最后:不开long long见祖宗! 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;bits/stdc++.h&gt;using namespace std;#define MO 100000000#define ll long longnamespace Gekoo { ll t, p; struct Mat { ll x[3][3]; Mat() { memset(x, 0, sizeof(x)); } inline void build_x () { memset(x, 0, sizeof(x)); for (int i = 1; i &lt;= 2; i++) x[i][i] = 1; } inline void build_A () { memset(x, 0, sizeof(x)); x[1][2] = x[2][1] = x[2][2] = 1; } }x, A; Mat operator * (const Mat &amp;a, const Mat &amp;b) { Mat z; memset(z.x, 0, sizeof(z)); for (int k = 1; k &lt;= 2; k++) for (int i = 1; i &lt;= 2; i++) for (int j = 1; j &lt;= 2; j++) z.x[i][j] += (a.x[i][k] % MO) * (b.x[k][j] % MO), z.x[i][j] %= MO; return z; } Mat qpow (Mat a, ll b) { Mat ans = x; for (; b; b &gt;&gt;= 1) { if (b &amp; 1) ans = ans * A; A = A * A; } return ans; } ll gcd(ll a, ll b) { return (b == 0) ? a : gcd(b, a % b); } void main () { A.build_A(); x.build_x(); scanf(\"%d%d\", &amp;t, &amp;p); Mat ans = qpow(x, gcd(t, p) - 1); printf(\"%d\\n\", (ans.x[1][1] + ans.x[1][2]) % MO); }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p1306/"},{"title":" Luogu P1726 上白泽慧音\t\t","text":"车 万 厨 大 欢 喜 Luogu P1726 上白泽慧音题面：题目描述在幻想乡，上白泽慧音是以知识渊博闻名的老师。春雪异变导致人间之里的很多道路都被大雪堵塞，使有的学生不能顺利地到达慧音所在的村庄。因此慧音决定换一个能够聚集最多人数的村庄作为新的教学地点。人间之里由N个村庄（编号为1..N）和M条道路组成，道路分为两种一种为单向通行的，一种为双向通行的，分别用1和2来标记。如果存在由村庄A到达村庄B的通路，那么我们认为可以从村庄A到达村庄B，记为(A,B)。当(A,B)和(B,A)同时满足时，我们认为A,B是绝对连通的，记为&lt;A,B&gt;。绝对连通区域是指一个村庄的集合，在这个集合中任意两个村庄X,Y都满足&lt;X,Y&gt;。现在你的任务是，找出最大的绝对连通区域，并将这个绝对连通区域的村庄按编号依次输出。若存在两个最大的，输出字典序最小的，比如当存在1,3,4和2,5,6这两个最大连通区域时，输出的是1,3,4。 输入格式：第1行：两个正整数N,M 第2..M+1行：每行三个正整数a,b,t, t = 1表示存在从村庄a到b的单向道路，t = 2表示村庄a,b之间存在双向通行的道路。保证每条道路只出现一次。 输出格式：第1行： 1个整数，表示最大的绝对连通区域包含的村庄个数。 第2行：若干个整数，依次输出最大的绝对连通区域所包含的村庄编号。 数据范围：对于60%的数据：N &lt;= 200且M &lt;= 10,000 对于100%的数据：N &lt;= 5,000且M &lt;= 50,000 思路:求图中最大SCC. 基本就是板子(((( 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;bits/stdc++.h&gt;#define N 50005namespace Gekoo { struct Edge { int to, nxt; } e[N &lt;&lt; 1]; int head[N], dfn[N], low[N], c[N], s[N &lt;&lt; 1], ecnt, n, m, num, p, cnt, ans = 1; bool vis[N]; std::vector &lt;int&gt; scc[N]; void Add(int f, int to) { e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt; } void Tarjan(int x) { dfn[x] = low[x] = ++num; s[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int v = e[i].to; if (!dfn[v]) { Tarjan(v); low[x] = std::min(low[x], low[v]); } else if (vis[v]) { low[x] = std::min(low[x], dfn[v]); } } if (dfn[x] == low[x]) { cnt++; int y; do { y = s[p--], vis[y] = 0; c[y] = cnt; scc[cnt].push_back(y); } while (x != y); } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, t; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;t); Add(a, b); if (t == 2) Add(b, a); } for (int i = 1; i &lt;= n; i++) { if (!dfn[i]) Tarjan(i); } for (int i = 1; i &lt;= cnt; i++) { if (scc[i].size() &gt; scc[ans].size()) ans = i; } printf(\"%d\\n\", (int) scc[ans].size()); std::sort(scc[ans].begin(), scc[ans].end()); for (std::vector&lt;int&gt;::iterator it = scc[ans].begin(); it != scc[ans].end(); ++it) { printf(\"%d \", *it); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/05/luogu-p1726/"},{"title":" Luogu P1313 计算系数\t\t","text":"NOIP最简单的数论题 Luogu P1313 计算系数题面：题目描述给定一个多项式 $ (by+ax)^k $ ,请求出多项式展开后 $x^n \\times y^m $项的系数. 输入格式：共一行,包含5个整数,分别为a,b,k,n,m,每两个整数之间用一个空格隔开. 输出格式：共1行,包含一个整数,表示所求的系数,这个系数可能很大,输出对10007取模后的结果. 数据范围：对于30% 的数据,有0 ≤ k ≤10 ； 对于50%的数据,有a = 1,b = 1； 对于100%的数据,有0 ≤ k ≤ 1,000, 0 ≤ n , m ≤ k,且 n + m = k , 0 ≤ a , b ≤1,000,000. 来自NOIP 2011 TG D2T1. 思路:刺激数论! 根据二项式定理:$ (by + ax)^k =\\Sigma_{r=0}^{k}C^r_n(by)^{k-r}(ax)^r=\\Sigma_{r=0}^{k}C^r_k(a^rb^{k-r})(x^ry^{k-r})$. $ n + m = k$.所以第n项: $(C^n_ka^nb^{m})(x^ny^{m})$. 由组合数的性质:$C^n_ka^nb^{m}=C_k^pa^pb^{k-p},p=min(n,m)$. 最后将问题转化为求$C^p_k\\times a^pb^{k-p}$. $ a^pb^{k-p}$通过快速幂求解. $C^n_k$通过组合数递推公式:$C^m_n=C^m_{n-1}+C^{m-1}_{n-1}$求解. 代码:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;using namespace std;#define MO 10007namespace Gekoo { int a, b, k, n, m, C[1005][1005], p; long long ans; int qpow(int a, int b) { int ans = 1 % MO; for (; b; b &gt;&gt;= 1) { if (b &amp; 1) ans = (ans * a) % MO; a = (a * a) % MO; } return ans; } void QAQ() { scanf(\"%d%d%d%d%d\", &amp;a, &amp;b, &amp;k, &amp;n, &amp;m); p = min(n, m), a %= MO, b %= MO; ans = (qpow(a, n) * qpow(b, m)) % MO; for (int i = 0; i &lt;= k; i++) C[i][0] = C[i][i] = 1; for (int i = 2; i &lt;= k; i++) { for (int j = 1; j &lt;= p; j++) { C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MO; } } ans = (ans * C[k][p]) % MO; printf(\"%lld\\n\",ans); }}int main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p1313/"},{"title":" Luogu P1731 生日蛋糕\t\t","text":"搜索 and 超神剪枝 Luogu P1731 生日蛋糕题面：题目描述7月17日是Mr.W的生日，ACM-THU为此要制作一个体积为Nπ的M层 生日蛋糕，每层都是一个圆柱体。 设从下往上数第i(1&lt;=i&lt;=M)层蛋糕是半径为Ri, 高度为Hi的圆柱。当i&lt;M时，要求$R_i&gt;R_{i+1}$ 且$ H_i&gt;H_{i+1} $. 由于要在蛋糕上抹奶油，为尽可能节约经费，我们希望蛋糕外表面（最下一层的下底面除外）的面积Q最小。 令Q= Sπ 请编程对给出的N和M，找出蛋糕的制作方案（适当的Ri和Hi的值），使S最小。 （除Q外，以上所有数据皆为正整数） 输入格式：有两行，第一行为N（N&lt;=20000），表示待制作的蛋糕的体积为Nπ；第二行为M(M&lt;=15)，表示蛋糕的层数为M。 输出格式：仅一行，是一个正整数S（若无解则S=0）。 思路:主体是暴力DFS.主要加了3个剪枝. 体积超过限制后剪枝 表面积超过最优解剪枝 玄(数)学剪枝 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;#define N 25namespace Gekoo { int n, m, r[N], h[N], ans = (1 &lt;&lt; 30); void dfs(int s, int v, int lv) { if (lv == m + 1) { if (v == n) ans = std::min(ans, s + r[1] * r[1]); return ; } if (v &gt; n || s + r[1] * r[1] &gt;= ans) { //体积超出限制 || 表面积超出最优解 return ; } //此题最坑的玄(数)学剪枝 if (2 * (n - v) / r[lv - 1] + s &gt; ans) return ; for (int i = r[lv - 1] - 1; i &gt;= m - lv + 1; i--) { //枚举r for (int j = h[lv - 1] - 1; j &gt;= m - lv + 1; j--) { //枚举h r[lv] = i; h[lv] = j; dfs(s + 2 * i * j, v + i * i * j, lv + 1); r[lv] = 0; h[lv] = 0; } } } void QAQ(){ scanf(\"%d%d\", &amp;n, &amp;m); r[0] = (int) sqrt(n); h[0] = (int) sqrt(n); dfs(0, 0, 1); ans = (ans == (1 &lt;&lt; 30)) ? 0 : ans; printf(\"%d\\n\", ans); }}using namespace Gekoo;signed main() { QAQ(); return 0;}","link":"/2019/02/28/luogu-p1731/"},{"title":" Luogu P2024 [NOI2001]食物链\t\t","text":"并查集 Luogu P2024 [NOI2001]食物链题面：题目描述动物王国中有三类动物 A , B , C , 这三类动物的食物链构成了有趣的环形. A 吃 B , B 吃 C , C 吃 A. 现有 N 个动物,以 1 － N 编号.每个动物都是 A , B , C 中的一种,但是我们并不知道 它到底是哪一种. 有人用两种说法对这 N 个动物所构成的食物链关系进行描述: 第一种说法是“1 X Y”，表示 X 和 Y 是同类. 第二种说法是“2 X Y”，表示 X 吃 Y . 此人对 N 个动物,用上述两种说法,一句接一句地说出 K 句话,这 K 句话有的是真 的,有的是假的.当一句话满足下列三条之一时,这句话就是假话,否则就是真话. 当前的话与前面的某些真的话冲突,就是假话 当前的话中 X 或 Y 比 N 大,就是假话 当前的话表示 X 吃 X,就是假话 你的任务是根据给定的 N 和 K 句话,输出假话的总数. 输入格式：第一行两个整数 , N , K , 表示有 N 个动物, K 句话. 第二行开始每行一句话. 输出格式：一行,一个整数,表示假话的总数. 数据范围：1 ≤ N ≤ 5 ∗ 10^4 1 ≤ K ≤ 10^5 思路:事拓展域并查集.将每个动物分成同类食物和敌人三个域. 设每句话第一个数为a, 矛盾的几种情况: $x &gt; n || y &gt; n$ $a = 1,x_{self} = y_{eat}$ $a = 1, x_{eat} = y_{self}$ $a = 2, x_{self} = y_{self}$ $a = 2, x_{self} = y_{eat}$ $a = 2, x = y$ 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;bits/stdc++.h&gt;using namespace std;namespace Gekoo { const int N = 50005; int n, k, fa[N*3], ans;//1~n事同类,n~2n事食物,2n~3n事敌人. int get(int x) { if (x == fa[x]) return x; return fa[x] = get(fa[x]); } void main() { printf(\"%d%d\", &amp;n, &amp;k); for(int i = 1; i &lt;= n * 3; i++) { fa[i] = i; } for(int i = 1; i &lt;= k; i++) { int a, x, y; scanf(\"%d%d%d\", &amp;a, &amp;x, &amp;y); if (x &gt; n || y &gt; n) { ++ans; continue; } int x_self = x, x_eat = x + n, x_enemy = x + 2 * n; int y_self = y, y_eat = y + n, y_enemy = y + 2 * n; if (a == 1) { if (get(x_self) == get(y_eat) || get(x_eat) == get(y_self)) { ++ans; continue; } else { fa[get(x_self)] = get(y_self); fa[get(x_eat)] = get(y_eat); fa[get(x_enemy)] = get(y_enemy); } } else { if (get(x_self) == get(y_self) || get(x_self) == get(y_eat) || x == y) { ++ans; continue; } else { fa[get(x_self)] = get(y_enemy); fa[get(x_eat)] = get(y_self); fa[get(x_enemy)] = get(y_eat); } } } printf(\"%d\\n\", ans); }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p2024/"},{"title":" Luogu P1841 [JSOI2007] 重要的城市\t\t","text":"Floyd变种，水题赛T3 Luogu P1841 [JSOI2007] 重要的城市题面：题目描述参加 JSOI 冬令营的同学最近发现，由于南航校内修路截断了原来通向计算中心的路，导致去的路程比原先增加了近一公里。而食堂门前施工虽然也截断了原来通向计算中心的路，却没有使路程增加，因为可以找到同样长度的路作替代。其实，问题的关键在于，路截断的地方是交通要点。 同样的情况也出现在城市间的交通中。某些城市如果出了问题，可能会引起其他很多城市的交通不便。另一些城市则影响不到别的城市的交通。jsoi冬令营的同学发现这是一个有趣的问题，于是决定研究这个问题。 他们认为这样的城市是重要的：如果一个城市c被破坏后，存在两个不同的城市a和b（a, b均不等于c），a到b的最短距离增长了（或不通），则城市c是重要的。 JSOI冬令营的同学面对着一张教练组交给他们的城市间交通图，他们希望能找出所有重要的城市。现在就请你来解决这个问题。 输入格式：第一行两个整数N,M,N为城市数，M为道路数 接下来M行，每行三个整数，表示两个城市之间的无向边，以及之间的路的长度 输出格式：一行，按递增次序输出若干的数，表示重要的城市。 数据范围：30%的数据：N ≤ 20； 60%的数据：N ≤ 100； 100%的数据：N ≤ 200,M ≤ N × (N − 1) / 2, 0 &lt; c ≤ 10000。c即路的长度。 保证不出现重边和自环 如果没有点的话需要输出一行 “No important cities.” 去掉引号 思路:日常翻译： 若u，v最短路上一点去掉后最短路长度改变，则该点为重要点，输出重要点。 N ≤ 200，无脑Floyd（逃 显然在Floyd过程中若进行了一次松弛,则k为f[i][j]对应的一个关键点.若出现f[i][j]=f[i][k]+f[k][j],说明该关键点无效,删去. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;utility&gt;#include &lt;cstdlib&gt;#include &lt;cctype&gt;#include &lt;queue&gt;#define N 205namespace Gekoo { int f[N][N], n, m, imp[N][N]; bool used[N], flg; signed QAQ() { freopen(\"city.in\", \"r\", stdin); freopen(\"city.out\", \"w\", stdout); memset(f, 0x3f, sizeof(f)); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, c; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c); f[a][b] = f[b][a] = std::min(f[a][b], c); } for (int k = 1; k &lt;= n; k++) { for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (i == k || j == i || j == k) continue; if (f[i][j] &gt; f[i][k] + f[k][j]) { f[i][j] = f[i][k] + f[k][j]; imp[i][j] = k; } else if (f[i][j] == f[i][k] + f[k][j]) { imp[i][j] = 0; } } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (imp[i][j]) { flg = 1; used[imp[i][j]] = 1; } } } if (!flg) { puts(\"No important cities.\"); return 0; } for (int i = 1; i &lt;= n; i++) { if (used[i]) printf(\"%d \", i); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/04/luogu-p1841/"},{"title":" Luogu P2051 [AHOI2009] 中国象棋\t\t","text":"DP Luogu P2051 [AHOI2009] 中国象棋题面：题目描述这次小可可想解决的难题和中国象棋有关，在一个N行M列的棋盘上，让你放若干个炮（可以是0个），使得没有一个炮可以攻击到另一个炮，请问有多少种放置方法。大家肯定很清楚，在中国象棋中炮的行走方式是：一个炮攻击到另一个炮，当且仅当它们在同一行或同一列中，且它们之间恰好 有一个棋子。你也来和小可可一起锻炼一下思维吧！ 输入格式：一行包含两个整数N，M，之间由一个空格隔开。 输出格式：总共的方案数，由于该值可能很大，只需给出方案数模9999973的结果。 数据范围：100%的数据中N和M均不超过100 50%的数据中N和M至少有一个数不超过8 30%的数据中N和M均不超过6 思路:把题面翻译成人话:n*n的棋盘，每行每列最多放两枚棋子,求方案数. 可以用$f[i][j][k]$来描述在前i行j列有1个棋子,k列有2个棋子. 接下来对放棋进行分类讨论. Ⅰ.不放棋.直接继承上一次的方案数.显然可得:$f[i][j][k]+=f[i-1][j][k]$. Ⅱ.放一枚棋.①.放在有一枚棋子的一列.放置棋子后会使j减少1,k增加1,这种方案共有$ j-1$种,因此可以得到: $f[i][j][k]+=f[i-1][j+1][k-1]\\times (j+1)$. ②.放在没有棋子的一列.放置棋子后会使j增加1,k不变,这种方案共有$(m-(j-1)-k)$种.因此可以得到: $f[i][j][k] += f[i - 1][j - 1][k] \\times (m - j - k + 1)$. Ⅲ.放两枚棋.①.都放在有一枚棋子的两列.放置棋子后会使j减少2,k增加2. 而显然,这种方案数为$C^2_{j+2}$.化简该式,$C^2_{j+2}=\\frac{(j+2)!}{2!\\times j!}=\\frac{j!\\times (j+1)\\times (j +2)}{2!\\times j!}=\\frac{(j+1)(j+2)}{2}$. 可得:$ f[i][j][k] += f[i - 1][j + 2][k - 2] \\times (j + 2) \\times (j + 1) / 2$ ②.都放在没有棋子的两列.放置后会使j增加2,k不变.而这种方案数也是很显然的,为$C^2_{m-(j-2)-k}$. 化简该式:$C^2_{m-(j-2)-k}=\\frac{(m-j-k+2)!}{2!\\times (m-j-k)!}=\\frac{(m-j-k)!\\times (m-j-k+1)\\times (m-j-k+2)}{2!\\times(m-j-k)!}=\\frac{(m-j-k+1)\\times (m-j-k+2)}{2}$. 可得:$ f[i][j][k] += f[i - 1][j - 2][k] \\times (m - j - k + 1) \\times (m - j - k + 2) / 2$ ③.分别放在有一枚棋子和没有棋子两列.放置棋子在有棋子列后会使j减少1,k增加1,放置棋子在无棋子列后会使j增加1,k不变.最终其实j没有改变,只是k增加了1. 根据乘法原理,方案数显然,为$[m-j-(k-1)]\\times j$种. 可得:$ f[i][j][k] += f[i - 1][j][k - 1] \\times (m - j - k + 1) \\times j $. 最后统计答案,这道题就结束了. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;#define N 105#define MO 9999973#define ll long longnamespace Gekoo { int n, m; ll f[N][N][N], ans;//f[行][有几列放了1个棋子][有几列放了两个棋子] void QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); f[0][0][0] = 1; for (int i = 1; i &lt;= n; i++) { for (int j = 0; j &lt;= m; j++) { for (int k = 0; k &lt;= m - j; k++) { //下棋时分三种情况. //1.放0个棋子 (f[i][j][k] += f[i - 1][j][k]) %= MO;//直接加上之前的 //2.放1个棋子 if (k &gt;= 1) (f[i][j][k] += f[i - 1][j + 1][k - 1] * (j + 1)) %= MO;//(1)放在有棋子的一列 if (j &gt;= 1) (f[i][j][k] += f[i - 1][j - 1][k] * (m - j - k + 1)) %= MO;//(2)放在没棋子的一列 //3.2个棋子 if (j &gt;= 2) (f[i][j][k] += f[i - 1][j - 2][k] * (m - j - k + 1) * (m - j - k + 2) / 2) %= MO;//(1)0 and 0 if (k &gt;= 1) (f[i][j][k] += f[i - 1][j][k - 1] * (m - j - k + 1) * j) %= MO;//(2)0 and 1 if (k &gt;= 2) (f[i][j][k] += f[i - 1][j + 2][k - 2] * (j + 2) * (j + 1) / 2) %= MO;//(3)1 and 1 } } } for (int j = 0; j &lt;= m; j++) { for (int k = 0; k &lt;= m; k++) { (ans += f[n][j][k]) %= MO; } } printf(\"%lld\\n\", (ans + MO) % MO); }}using namespace Gekoo;signed main() { QAQ(); return 0;}","link":"/2019/02/28/luogu-p2051/"},{"title":" Luogu P1967 货车运输\t\t","text":"可怕的普及组 Luogu P1967 货车运输题面：题目描述A国有n座城市,编号从1到n,城市之间有m条双向道路.每一条道路对车辆都有重量限制,简称限重.现在有q辆货车在运输货物,司机们想知道每辆车在不超过车辆限重的情况下,最多能运多重的货物. 输入格式：第一行有两个用一个空格隔开的整数n,m,表示A国有n座城市和m条道路。 接下来m行每行3个整数 x,y,z 每两个整数之间用一个空格隔开,表示从x号城市到y号城市有一条限重为z的道路.注意: x$\\ne$y,两座城市之间可能有多条道路. 接下来一行有一个整数,表示有q辆货车需要运货. 接下来q行,每行两个整数x,y,之间用一个空格隔开,表示一辆货车需要从x城市运输货物到y城市,注意:x$\\ne$y . 输出格式：共有q行,每行一个整数,表示对于每一辆货车,它的最大载重是多少.如果货车不能到达目的地,输出−1. 数据范围：对于30%的数据,0 &lt; n &lt; 1,000, 0 &lt; m &lt; 10,000, 0 &lt; q&lt; 1,000； 对于60%的数据,0 &lt; n &lt; 1,000, 0 &lt; m &lt; 50,000, 0 &lt; q&lt; 1,000； 对于100%的数据,0 &lt; n &lt; 10,000, 0 &lt; m &lt; 50,000, 0 &lt; q&lt; 30,000, 0 ≤ z ≤ 100,000. 思路:这题真难,居然是普及组…(我差点被普及组的题卡了 首先,沟通每个城市之间的道路若想边权最大,必定形成了一棵最大生成树,这个可以通过Kruskal完成.但这题还有一个坑,最后树不一定是一棵,可能是树林. 之后就不用管图了,研究树就行了.沟通两个城市之间的道路可以通过LCA实现,求最大载重就是求这几条边的最大值,通过ST表实现.ST表和LCA的初始化可以放一块进行. 当两个城市不在同一棵树上时,货车无法到达. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include &lt;bits/stdc++.h&gt;using namespace std;#define N 100005namespace Gekoo { inline int read () { int a = 1, b = 0; char c; do{c = getchar(); if (c == '-') a = -1;} while (c &lt; '0' || c &gt; '9'); do{b = b * 10 + c - '0'; c = getchar();} while (c &gt;= '0' &amp;&amp; c &lt;='9'); return a * b; } struct Edge { int from, to, nxt, val; }e[1000005]; struct Tree { int x, y, z; bool operator &lt; (const Tree &amp;x) { return z &gt; x.z; } }t[1000005]; int ecnt, head[N], n, m, fa[N], q, f[N][25], w[N][25], dep[N], tcnt, s; bool vis[N]; void Add_Edge (int f, int to, int v) { e[++ecnt].to = to; e[ecnt].val = v; e[ecnt].nxt = head[f]; head[f] = ecnt; } int Get (int x) { if (x == fa[x]) return x; return fa[x] = Get(fa[x]); } void Tree_data (int u) { vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (!dep[v]) { dep[v] = dep[u] + 1; f[v][0] = u; w[v][0] = e[i].val; Tree_data(v); } } return ; } void init () { for (int j = 1; (1 &lt;&lt; j) &lt;= tcnt; j++) { for (int i = 1; i &lt;=tcnt; i++) { f[i][j] = f[ f[i][j-1] ][j-1]; w[i][j] = min(w[i][j-1], w[ f[i][j-1] ][j-1]); } } } void LCA (int a, int b) { if (Get(a) != Get(b)) { printf(\"-1\\n\"); return ; } int ans = (1 &lt;&lt; 30); if (dep[a] &lt; dep[b]) swap(a, b); int i = 0; for (; (1 &lt;&lt; i) &lt;= dep[a]; i++); for (int j = i; j &gt;= 0; j--) { if (dep[a] - (1 &lt;&lt; j) &gt;= dep[b]){ ans = min(ans, w[a][j]); a = f[a][j]; } } if (a == b) { printf(\"%d\\n\",ans); return ; } for (int j = i; j &gt;= 0; j--) { if (f[a][j] &amp;&amp; f[a][j] != f[b][j]) { ans = min(ans, min(w[a][j], w[b][j])); a = f[a][j], b = f[b][j]; } } ans = min(ans, min(w[a][0], w[b][0])); printf(\"%d\\n\",ans); return ; } void main() { n = read(), m = read(); for (int i = 1; i &lt;=n; i++) { fa[i] = i; } for (int i = 1, x, y, z; i &lt;= m; i++) { x = read(), y = read(), z = read(); t[++tcnt].x = x, t[tcnt].y = y, t[tcnt].z = z; t[++tcnt].x = y, t[tcnt].y = x, t[tcnt].z = z; } //Kruskal sort(t + 1, t + 1 + tcnt); for (int i = 1; i &lt;= tcnt; i++) { int x = t[i].x, y = t[i].y, z = t[i].z; if (Get(x) != Get(y)) { Add_Edge(x, y, z); Add_Edge(y, x, z); fa[Get(x)] = Get(y); } } for (int i = 1; i &lt;= n; i++) { //树林!被坑过一次QAQ if (!vis[i]) { dep[i] = 1; f[1][0] = 1; Tree_data(i); w[i][0] = (1 &lt;&lt; 30); } } init(); q = read(); for (int i = 1; i &lt;= q; i++) { LCA(read(), read()); } }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p1967/"},{"title":" Luogu P2272 [ZJOI2007]最大半连通子图\t\t","text":"Tarjan总是和DAGDP紧密结合呢 Luogu P2272 [ZJOI2007]最大半连通子图题面：题目描述一个有向图G=(V,E)称为半连通的(Semi-Connected)，如果满足：?u,v∈V，满足u→v或v→u，即对于图中任意两点u，v,存在一条u到v的有向路径或者从v到u的有向路径。若G’=(V’,E’)满足V’?V，E’是E中所有跟V’有关的边，则称G’是G的一个导出子图。若G’是G的导出子图，且G’半连通，则称G’为G的半连通子图。若G’是G所有半连通子图中包含节点数最多的，则称G’是G的最大半连通子图。给定一个有向图G，请求出G的最大半连通子图拥有的节点数K，以及不同的最大半连通子图的数目C。由于C可能比较大，仅要求输出C对X的余数。 输入格式：第一行包含两个整数N，M，X。N，M分别表示图G的点数与边数，X的意义如上文所述接下来M行，每行两个正整数a, b，表示一条有向边(a, b)。图中的每个点将编号为1,2,3…N，保证输入中同一个(a,b)不会出现两次。 输出格式：应包含两行，第一行包含一个整数K。第二行包含整数C Mod X. 数据范围：对于100%的数据，$N \\le 100000, M \\le 1000000, X \\le 10^8$ 思路:简化题意:给定一个有向图，若u，v两点，只要u-v可达或者v-u可达，则称u，v半联通.求半联通子图中点数最多的个数和方案数. 显然又是DAGDP…先跑Tarjan缩点,记录一下每个连通块的大小,再拓扑跑DP. 问题主要在第二问,缩点会有重边,势必会影响方案数统计.所以要去重边. 如何去重? 开一边集数组,先记录所有缩点后的边,再按起始点sort一下.建图时检查一下,如果E[i].from == E[i - 1].from &amp;&amp; E[i].to == E[i - 1].to,说明为重边,直接continue. 其他没什么了. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;bits/stdc++.h&gt;#define M 1000005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; struct EdgeC { int from, to; bool operator &lt;(const EdgeC &amp;a) const { return (from == a.from) ? to &lt; a.to : from &lt; a.from; } }EDGE[N]; int ecnt, ccnt, head[N], hc[N], p, n, m, MO, num, scc, cnt, t, ans = -114514, ans2; int stack[N], dfn[N], low[N], id[N], ind[N], val[N], f[N], g[N]; bool ins[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, ins[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], ins[y] = 0; id[y] = cnt; val[cnt]++; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; for (int i = 1; i &lt;= cnt; i++) if (!ind[i]) q.push(i), f[i] = val[i], g[i] = 1; while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (f[v] &lt; f[u] + val[v]) { f[v] = f[u] + val[v]; g[v] = g[u]; } else if (f[v] == f[u] + val[v]) { g[v] = (g[v] + g[u]) % MO; } if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) if (f[i] &gt; ans) ans = f[i]; for (int i = 1; i &lt;= cnt; i++) if (f[i] == ans) ans2 = (ans2 + g[i]) % MO; } signed QAQ() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;MO); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt;= n; x++) { for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] != id[y]) EDGE[++t].from = id[x], EDGE[t].to = id[y]; } } std::sort(EDGE + 1, EDGE + t + 1); for (int i = 1; i &lt;= t; i++) { if (EDGE[i].from == EDGE[i - 1].from &amp;&amp; EDGE[i].to == EDGE[i - 1].to) continue; AddC(EDGE[i].from, EDGE[i].to), ++ind[EDGE[i].to]; } TopSort(); printf(\"%d\\n%d\\n\", ans, ans2); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p2272/"},{"title":"Luogu P2709 小B的询问","text":"莫队模板题 Luogu P2709 小B的询问题面：题目描述小B有一个序列，包含N个1~K之间的整数。他一共有M个询问，每个询问给定一个区间[L..R]，求$Sigma(c(i)^2)$的值,其中i的值从1到K，其中c(i)表示数字i在[L..R]中的重复次数。小B请你帮助他回答询问。 输入格式：第一行，三个整数N、M、K。 第二行，N个整数，表示小B的序列。 接下来的M行，每行两个整数L、R。 输出格式：M行，每行一个整数，其中第i行的整数表示第i个询问的答案。 数据范围：对于全部的数据，1&lt;=N、M、K&lt;=50000 思路:询问一个区间每个数字重复次数的平方和,首先大分块肯定可做,但比较麻烦… 这时我们就可以学习一种你没有学过的船新算法:莫队算法 主要思想就是将询问保存并排序,通过移动左右端点维护询问.当我们解决了一个询问后,我们就移动它的左右端点使它成为下一个询问,在移动的过程中维护答案. 合理的排序可以让我们的复杂度更加优秀.移动的越少,跑得就越像HK记者. 为了控制移动的距离,我们使用分块优化.如果左端点属于同一块就按右端点排序,否则按左端点排序.最终的莫队算法复杂度是$O(n\\sqrt n)$. 关于维护,由完全平方公式可得,只需要加减$2 \\times c(i) + 1$. 总的来说,莫队可以解决许多区间维护问题而且比分块更好写. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;#define ll long long#define N 50000 + 233struct Node {int l, r, id;} nd[N];int n, m, k, block, a[N], pos[N];ll tmp, cnt[N], ans[N];bool cmp(const Node &amp;a, const Node &amp;b) { return (pos[a.l] == pos[b.l]) ? a.r &lt; b.r : a.l &lt; b.l;}signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", a + i); for (int i = 1; i &lt;= m; i++) { scanf(\"%d%d\", &amp;nd[i].l, &amp;nd[i].r); nd[i].id = i; } block = (int) sqrt(n); for (int i = 1; i &lt;= n; i++) pos[i] = (i - 1) / block + 1; std::sort(nd + 1, nd + 1 + m, cmp); for (int i = 1, l = 1, r = 0; i &lt;= m; i++) { while (l &gt; nd[i].l) { l--; tmp += 2 * cnt[a[l]] + 1; cnt[a[l]]++; } while (r &lt; nd[i].r) { r++; tmp += 2 * cnt[a[r]] + 1; cnt[a[r]]++; } while (l &lt; nd[i].l) { tmp -= 2 * cnt[a[l]] - 1; cnt[a[l]]--; l++; } while (r &gt; nd[i].r) { tmp -= 2 * cnt[a[r]] - 1; cnt[a[r]]--; r--; } ans[nd[i].id] = tmp; } for (int i = 1; i &lt;= m; i++) printf(\"%lld\\n\", ans[i]); return 0;}","link":"/2019/05/08/luogu-p2709/"},{"title":"Luogu P2746 [USACO5.3]校园网Network of Schools\t\t","text":"缩点ning干 P2746 [USACO5.3]校园网Network of Schools题面：题目:一些学校连入一个电脑网络。那些学校已订立了协议：每个学校都会给其它的一些学校分发软件（称作“接受学校”）。注意即使 B 在 A 学校的分发列表中， A 也不一定在 B 学校的列表中。 你要写一个程序计算，根据协议，为了让网络中所有的学校都用上新软件，必须接受新软件副本的最少学校数目（子任务 A）。更进一步，我们想要确定通过给任意一个学校发送新软件，这个软件就会分发到网络中的所有学校。为了完成这个任务，我们可能必须扩展接收学校列表，使其加入新成员。计算最少需要增加几个扩展，使得不论我们给哪个学校发送新软件，它都会到达其余所有的学校（子任务 B）。一个扩展就是在一个学校的接收学校列表中引入一个新成员。 输入格式：输入文件的第一行包括一个整数 N：网络中的学校数目（2 &lt;= N &lt;= 100）。学校用前 N 个正整数标识。 接下来 N 行中每行都表示一个接收学校列表（分发列表）。第 i+1 行包括学校 i 的接收学校的标识符。每个列表用 0 结束。空列表只用一个 0 表示。 输出格式：你的程序应该在输出文件中输出两行。 第一行应该包括一个正整数：子任务 A 的解。 第二行应该包括子任务 B 的解。 数据范围：n &lt;= 100 思路:缩点ning干(逃 先缩点,记录一下入度和出度.显然,问题A的答案就是入度为0的点的个数. 问题B的答案也比较显然,是入度为0和出度为0的点的个数的较大值. 注意特判,当缩成只有一个点的时候问题B答案为0. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;bits/stdc++.h&gt;#define N 5000005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; int ecnt, ccnt, hc[N], head[N], ind[N], outd[N], n, Aans, Bans; int dfn[N], low[N], s[N], id[N], num, p, cnt; bool vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; s[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = s[p--], vis[y] = 0; id[y] = cnt; } while (x != y); } } signed QAQ() { //Input scanf(\"%d\", &amp;n); for (int u = 1, v; u &lt;= n; u++) { while (1) { scanf(\"%d\", &amp;v); if (!v) break; Add(u, v); } } //Shrink for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (id[u] == id[v]) continue; AddC(id[u], id[v]); ind[id[v]]++, outd[id[u]]++; } } //Task A for (int i = 1; i &lt;= cnt; i++) if (!ind[i]) Aans++; //Task B for (int i = 1; i &lt;= cnt; i++) if (!outd[i]) Bans++; Bans = std::max(Bans, Aans); if (cnt == 1) Bans = 0; //Output printf(\"%d\\n%d\\n\", Aans, Bans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/07/luogu-p2746/"},{"title":" Luogu P2055 [ZJOI2009]假期的宿舍\t\t","text":"二分图求最大匹配 Luogu P2055 [ZJOI2009]假期的宿舍题面：题目:学校放假了 · · · · · · 有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。 比如 A 和 B 都是学校的学生，A 要回家，而 C 来看B，C 与 A 不认识。我们假设每个人只能睡和自己直接认识的人的床。那么一个解决方案就是 B 睡 A 的床而 C 睡 B 的床。而实际情况可能非常复杂，有的人可能认识好多在校学生，在校学生之间也不一定都互相认识。 我们已知一共有 n 个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。 输入格式：第一行一个数 T 表示数据组数。接下来 T 组数据，每组数据第一行一个数n 表示涉及到的总人数。 接下来一行 n 个数，第 i 个数表示第 i 个人是否是在校学生 (0 表示不是，1 表示是)。再接下来一行 n 个数，第 i 个数表示第 i 个人是否回家 (0 表示不回家，1 表示回家，注意如果第 i 个人不是在校学生，那么这个位置上的数是一个随机的数，你应该在读入以后忽略它)。 接下来 n 行每行 n 个数，第 i 行第 j 个数表示 i 和 j 是否认识 (1 表示认识，0 表示不认识，第 i 行 i 个的值为 0，但是显然自己还是可以睡自己的床)，认识的关系是相互的。 输出格式：对于每组数据，如果存在一个方案则输出 “^_^”(不含引号) 否则输出“T_T”(不含引号)。(注意输出的都是半角字符，即三个符号的 ASCII 码分别为94,84,95) 数据范围：对于 30% 的数据满足 1 ≤ n ≤ 12。 对于 100% 的数据满足 1 ≤ n ≤ 50,1 ≤ T ≤ 20。 思路:很明显,一个学生睡一张床就是二分图匹配. 先读入学生是不是本校学生,在不在家和学生之间的关系. 如果学生是本校学生且不在家,他就可以睡自己的床,连一下自己. 如果i认识j,j是本校生,i就可以睡j的床,连一下i,j.好混乱 然后统计一下有多少人要住宿舍,跑一下匈牙利,看看最大匹配数是不是等于住宿舍人数. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define N 105namespace Gekoo { struct Edge {int to, nxt;} e[N]; int n, T, need, mth; int head[N], ecnt = 1, Home[N], School[N], match[N]; bool vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} bool dfs(int u) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (!vis[v]) { vis[v] = 1; if (!match[v] || dfs(match[v])) { match[v] = u; return 1; } } } return 0; } signed QAQ() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;School[i]); for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;Home[i]); if (!Home[i] &amp;&amp; School[i]) Add(i, i); } for (int i = 1, x; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { scanf(\"%d\", &amp;x); if (x &amp;&amp; School[j]) Add(i, j); } } for (int i = 1; i &lt;= n; i++) { if ((!Home[i] &amp;&amp; School[i]) || !School[i]) { need++; memset(vis, 0, sizeof(vis)); if (dfs(i)) mth++; } } if (mth == need) printf(\"^_^\\n\"); else printf(\"T_T\\n\"); memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); memset(School, 0, sizeof(School)); memset(Home, 0, sizeof(Home)); memset(match, 0, sizeof(match)); need = mth = ecnt = 0; } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/14/luogu-p2055/"},{"title":" Luogu P2783 有机化学之神偶尔会做作弊\t\t","text":"郭老师强力推荐 Luogu P2783 有机化学之神偶尔会做作弊题面：题目:XS中学化学竞赛组教练是一个酷爱炉石的人。 有一天他一边搓炉石一边监考，而你作为一个信息竞赛的大神也来凑热闹。 然而你的化竞基友却向你求助了。 “第1354题怎么做”&lt;–手语 他问道。 你翻到那一题：给定一个烃，只含有单键（给初中生的一个理解性解释：就是一堆碳用横线连起来，横线都是单条的）。 然后炎魔之王拉格纳罗斯用他的火焰净化了一切环（？？？）。所有的环状碳都变成了一个碳。如图所示。 然后指定多组碳，求出它们之间总共有多少碳。如图所示（和上图没有关系）。 但是因为在考试，所以你只能把这个答案用手语告诉你的基友。你决定用二进制来表示最后的答案。 输入格式：第一行两个整数n,m.表示有n个点，m根键 接下来m行每行两个整数u，v表示u号碳和v号碳有一根键 接下来一个整数tot表示询问次数 接下来tot行每行两个整数，a,b表示询问的两个碳的编号 输出格式：共tot行 每行一个二进制数 数据范围：1&lt;n&lt;=10000,1&lt;m&lt;=50000 （两个碳不成环） 思路:题意翻译:给一无向图,去掉所有的环,求两点树上距离. 去掉环很简单,跑一遍Tarjan缩掉边双即可. 很简单? 不!QAQ 踩了个巨坑:我第一次是用LYD的写法缩边双的,然后: 就WA了 就WA了 就WA了 第一版写法: 12345678910111213141516171819202122void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y, i); low[x] = std::min(low[x], low[y]); if (low[y] &gt; dfn[x]) bridge[i] = bridge[i ^ 1] = 1; } else if (i != (fa ^ 1)) low[x] = std::min(low[x], dfn[y]); }}void dfs(int x) { id[x] = cnt; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[y] || bridge[i]) continue; dfs(y); }} 更改为郭老师写法就畅快AC: 12345678910111213141516171819void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { if(y == fa) continue; Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++cnt; int y; do { y = stack[p--]; id[y] = cnt; } while (x != y); }} 原因未知….引以为戒QAQ 求树上距离是很简单的.如下图的树: 比如说我们要求12和13之间的距离,可以先跑一次树链剖分,求出12和13的深度. 显然,12与13之间的距离就等于dep[12] + dep[13] - 2 * dep[3] + 1. 任意两点x, y在树上的距离就是:dep[x] + dep[y] - 2 * dep[LCA] + 1. 二进制随便写个函数输出一下就行了 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;bits/stdc++.h&gt;#define N 50005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int n, m, s; int ecnt = 1, head[N], ccnt = 1, hc[N], cnt, ask; int dep[N], fa[N], siz[N], son[N], tp[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} int dfn[N], low[N], stack[N], id[N], root, p, num; bool bridge[N &lt;&lt; 1]; void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if(y == fa) continue; if (!dfn[y]) { Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++cnt; int y; do { y = stack[p--]; id[y] = cnt; } while (x != y); } } void dfs1(int u) { siz[u] = 1; for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (dep[v]) continue; dep[v] = dep[u] + 1, fa[v] = u; dfs1(v); siz[u] += siz[v]; if (!son[u] || siz[son[u]] &lt; siz[v]) son[u] = v; } } void dfs2(int u, int t) { tp[u] = t; if (!son[u]) return; dfs2(son[u], t); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (v == fa[u]) continue; if (v != son[u]) dfs2(v, v); } } void Write(int x) { int a[1005] = {}, pt = 0; do { a[++pt] = (x &amp; 1); x &gt;&gt;= 1; }while (x != 0); for (int i = pt; i &gt;= 1; i--) printf(\"%d\", a[i]); puts(\"\"); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); Add(x, y), Add(y, x); } scanf(\"%d\", &amp;ask); for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i, 0); for (int i = 2; i &lt;= ecnt; i++) { int x = e[i ^ 1].to, y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); } dep[1] = 1; dfs1(1), dfs2(1, 1); for (int i = 1, a, b; i &lt;= ask; i++) { scanf(\"%d%d\", &amp;a, &amp;b); a = id[a], b = id[b]; int ans = 0; ans += dep[a] + dep[b]; while (tp[a] != tp[b]) { if (dep[tp[a]] &lt; dep[tp[b]]) b = fa[tp[b]]; else a = fa[tp[a]]; } ans -= 2 * std::min(dep[a], dep[b]) - 1; Write(ans); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/12/luogu-p2783/"},{"title":" Luogu P3166 [CQOI2014]数三角形\t\t","text":"喜闻乐见的数学题 Luogu P3166 [CQOI2014]数三角形题面：题目描述给定一个$n \\times m$的网格，请计算三点都在格点上的三角形共有多少个。注意三角形的三点不能共线。 输入格式：输入一行，包含两个空格分隔的正整数m和n。 输出格式：输出一个正整数，为所求三角形数量。 数据范围：1&lt;=m,n&lt;=1000 思路:$n\\times m$的网格中共有$(n+1)(m+1)$个点,其中选3个点的方法数共有$C_{(n + 1)(m + 1)}^3$种.为构成三角形,须除去三点共线的情况.横向和纵向共线数很显然,为$mC_{n+1}^3+nC_{m+1}^3$种.而斜向就比较复杂. 首先,斜向共有两个方向,我们只研究一个就行,将结果×2. 然后仔细思考可以发现每条落在格点上的直线必然是由最短的一条线段延伸,设这条线段的端点为(0,0),(x,y),xy必然互素.而之后直线在格点上的点的横纵坐标必然为(kx,ky).稍加整理后显然可得斜向共线情况数为: $\\sum_{i=1}^m\\sum_{j=1}^n(gcd(i,j)-1)\\times(m-i+1)\\times(n-j+1)\\times 2$. 最终,$ans=C_{(n + 1)(m + 1)}^3-mC_{n+1}^3-nC_{m+1}^3-\\sum_{i=1}^m\\sum_{j=1}^n(gcd(i,j)-1)\\times(m-i+1)\\times(n-j+1)\\times 2$ 代码:12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;#define ll long longnamespace Gekoo { int m, n; ll ans; ll C(int n, int m) { ll ret = 1; for (int i = 1; i &lt;= m; i++) ret = ret * (ll) (n - m + i) / i; return ret; } inline int GCD(int a, int b) {return b == 0 ? a : GCD(b, a % b);} void QAQ() { scanf(\"%d%d\", &amp;m, &amp;n); ans = C((m + 1) * (n + 1), 3) - (n + 1) * C((m + 1), 3) - (m + 1) * C((n + 1), 3); for (int i = 1; i &lt;= m; i++) { for (int j = 1; j &lt;= n; j++) { ans -= (ll) (GCD(i, j) - 1) * (m - i + 1) * (n - j + 1) * 2; } } printf(\"%lld\\n\", ans); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p3166/"},{"title":" Luogu P2860 [USACO06JAN]冗余路径Redundant Paths\t\t","text":"Tarjan水题 Luogu P2860 [USACO06JAN]冗余路径Redundant Paths题面：题目:为了从F(1≤F≤5000)个草场中的一个走到另一个，贝茜和她的同伴们有时不得不路过一些她们讨厌的可怕的树．奶牛们已经厌倦了被迫走某一条路，所以她们想建一些新路，使每一对草场之间都会至少有两条相互分离的路径，这样她们就有多一些选择． 每对草场之间已经有至少一条路径．给出所有R(F-1≤R≤10000)条双向路的描述，每条路连接了两个不同的草场，请计算最少的新建道路的数量, 路径由若干道路首尾相连而成．两条路径相互分离，是指两条路径没有一条重合的道路．但是，两条分离的路径上可以有一些相同的草场． 对于同一对草场之间，可能已经有两条不同的道路，你也可以在它们之间再建一条道路，作为另一条不同的道路． 输入格式：第一行两个整数 f, r. 接下来r行每行两个整数u，v表示u到v有边. 输出格式：输出一个数tot,为修建道路数. 思路:显然,一个边双内必然有两条不同的道路.(可以从两边绕嘛) 于是就先缩点ning干.我们就要添加最少边使整个图变成边双. 我们可以发现把叶子节点连起来就行.所以连边数为叶子节点数/2向上取整. 另:此题有重边.因为数据范围小,我直接开了个bool数组((( 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int n, m; int head[N], ecnt = 1, hc[N], ccnt = 1, deg[N], ans; bool vis[5002][5002]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} int dfn[N], low[N], stack[N], id[N], p, num, dcc; void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (y == fa) continue; if (!dfn[y]) { Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++dcc; int y; do { y = stack[p--]; id[y] = dcc; } while(x != y); } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); if (vis[x][y]) continue; vis[x][y] = vis[y][x] = 1; Add(x, y), Add(y, x); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i, 0); for (int i = 2; i &lt;= ecnt; i += 2) { int x = e[i ^ 1].to, y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); deg[id[x]]++, deg[id[y]]++; } for (int i = 1; i &lt;= dcc; i++) if (deg[i] == 1) ans++; printf(\"%d\\n\", (ans + 1) &gt;&gt; 1); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/13/luogu-p2860/"},{"title":" Luogu P2880 Balanced Lineup\t\t","text":"ST表 Luogu P2880 Balanced Lineup题面：题目描述每天,农夫 John 的N(1 &lt;= N &lt;= 50,000)头牛总是按同一序列排队. 有一天, John 决定让一些牛们玩一场飞盘比赛. 他准备找一群在对列中为置连续的牛来进行比赛. 但是为了避免水平悬殊,牛的身高不应该相差太大. John 准备了Q (1 &lt;= Q &lt;= 180,000) 个可能的牛的选择和所有牛的身高 (1 &lt;= 身高 &lt;= 1,000,000). 他想知道每一组里面最高和最低的牛的身高差别. 输入格式：第1行：N,Q 第2到N+1行：每头牛的身高 第N+2到N+Q+1行：两个整数A和B，表示从A到B的所有牛。（1&lt;=A&lt;=B&lt;=N） 输出格式：输出每行一个数，为最大数与最小数的差 思路:开两个数组f和g，分别存最大值和最小值就行了 蓝题++这怎么是蓝题的 代码:123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;using namespace std;#define N 50005#define r(x) x=read();inline int read(){ int a=1,b=0;char c; do{c=getchar();if(c=='-') a=-1;}while(c&lt;'0'||c&gt;'9'); do{b=b*10+c-'0';c=getchar();}while(c&gt;='0'&amp;&amp;c&lt;='9'); return a*b;}int n,q,a[N],f[N][25],g[N][25];void ST_pre(){ for(int i=1;i&lt;=n;i++) f[i][0]=g[i][0]=a[i]; int t=log2(n)+1; for(int j=1;j&lt;t;j++){ for(int i=1;i&lt;=n-(1&lt;&lt;j)+1;i++){ f[i][j]=max(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]); g[i][j]=min(g[i][j-1],g[i+(1&lt;&lt;(j-1))][j-1]); } }}int ST_q(int l,int r){ int t=log2(r-l+1); return max(f[l][t],f[r-(1&lt;&lt;t)+1][t])-min(g[l][t],g[r-(1&lt;&lt;t)+1][t]);}int main(){ r(n);r(q); for(int i=1;i&lt;=n;i++){ r(a[i]); } ST_pre(); for(int i=1,a,b;i&lt;=q;i++){ r(a);r(b); printf(\"%d\\n\",ST_q(a,b)); } return 0;}","link":"/2019/02/28/luogu-p2880/"},{"title":" Luogu P3387 【模板】缩点\t\t","text":"为什么缩点模板还有DAGDP(半恼 Luogu P3387 【模板】缩点题面：题目:给定一个n个点m条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。 允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。 输入格式：第一行，n,m 第二行，n个整数，依次代表点权 第三至m+2行，每行两个整数u,v，表示u-&gt;v有一条有向边 输出格式：共一行，最大的点权之和。 数据范围：n&lt;=10^4,m&lt;=10^5,点权&lt;=1000 思路:首先先求出scc,之后缩点 (缩点板子要缩点不是显然 缩点后可以得到一个DAG,求最大点权的转移方程显然:f[v] = max(f[v], f[u] + val[v]). 但是有后效性.为了解决后效性,进行一次拓扑排序,在拓扑排序过程中DP. 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, n, m, num, scc, cnt, ans = -114514; int stack[N], dfn[N], low[N], id[N], ind[N], pv[N], val[N], f[N]; bool bridge[N], vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], vis[y] = 0; id[y] = cnt; val[cnt] += pv[y]; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; for (int i = 1; i &lt;= cnt; i++) if(!ind[i]) f[i] = val[i], q.push(i); while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; f[v] = std::max(f[v], f[u] + val[v]); if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) ans = std::max(ans, f[i]); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;pv[i]); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt;= n; x++) { for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); ind[id[y]]++; } } TopSort(); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/07/luogu-p3387/"},{"title":" Luogu P3225 [HNOI2012]矿场搭建\t\t","text":"调了好久QAQ Luogu P3225 [HNOI2012]矿场搭建题面：题目描述煤矿工地可以看成是由隧道连接挖煤点组成的无向图。为安全起见，希望在工地发生事故时所有挖煤点的工人都能有一条出路逃到救援出口处。于是矿主决定在某些挖煤点设立救援出口，使得无论哪一个挖煤点坍塌之后，其他挖煤点的工人都有一条道路通向救援出口。 请写一个程序，用来计算至少需要设置几个救援出口，以及不同最少救援出口的设置方案总数。 输入格式：输入文件有若干组数据，每组数据的第一行是一个正整数 N（N&lt;=500），表示工地的隧道数，接下来的 N 行每行是用空格隔开的两个整数 S 和 T，表示挖 S 与挖煤点 T 由隧道直接连接。输入数据以 0 结尾。 输出格式：输入文件中有多少组数据，输出文件 output.txt 中就有多少行。每行对应一组输入数据的 结果。其中第 i 行以 Case i: 开始（注意大小写，Case 与 i 之间有空格，i 与:之间无空格，: 之后有空格），其后是用空格隔开的两个正整数，第一个正整数表示对于第 i 组输入数据至少需 要设置几个救援出口，第二个正整数表示对于第 i 组输入数据不同最少救援出口的设置方案总 数。输入数据保证答案小于 2^64。输出格式参照以下输入输出样例。 思路:v-DCC删去一点后其内部必然仍互相连通,在一个v-DCC中最多只需要建一个出口.所以可以先缩点,缩成一棵树,记录每个节点的大小. 以这个比母亲还要见得多的图(雾 为例,缩点后就变成了: 仔细观察,非叶节点不用建出口,出事了往叶子节点跑就完事了.叶子节点必须建出口,不然割点炸了就完了. 所以需要建的出口个数就是叶子节点的个数,而出口方案数,通过乘法原理,将叶子节点的大小乘起来即即可. 然而如果缩完点后就剩一个点了就不用这么多事了.显然只需要建两个点(如果一个被炸了另一个还能跑),方案数为$C_{size}^2$. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include &lt;bits/stdc++.h&gt;#define N 300005#define ll long longnamespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, m, num, cnt, cas, root, n, ans1; int stack[N], dfn[N], low[N], id[N], new_id[N], size[N]; bool cut[N], vis[N]; ll ans2 = 1; std::vector&lt;int&gt; dcc[N], leaf; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x; if (x == root &amp;&amp; !head[x]) { dcc[++cnt].push_back(x); return ; } int flg = 0; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); if (low[y] &gt;= dfn[x]) { if (++flg &gt; 1 || x != root) cut[x] = 1; int z; cnt++; do { z = stack[p--]; dcc[cnt].push_back(z); size[cnt]++; } while (y != z); dcc[cnt].push_back(x); } } else low[x] = std::min(low[x], dfn[y]); } } void DFS(int u) { int flg = 0; for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (!vis[v]) { vis[v] = 1; flg++; DFS(v); } } if (!flg) leaf.push_back(u); } void init() { memset(e, 0, sizeof(e)); memset(c, 0, sizeof(c)); memset(head, 0, sizeof(head)); memset(hc, 0, sizeof(hc)); memset(stack, 0, sizeof(stack)); memset(dfn, 0, sizeof(dfn)); memset(low, 0, sizeof(low)); memset(id, 0, sizeof(id)); memset(new_id, 0, sizeof(new_id)); memset(size, 0, sizeof(size)); memset(cut, 0, sizeof(cut)); memset(vis, 0, sizeof(vis)); for (int i = 1; i &lt;= cnt; i++) dcc[i].clear(); leaf.clear(); ecnt = ccnt = p = n = num = cnt = root = 0; ans2 = 1; } signed QAQ() { while (1) { cas++; scanf(\"%d\", &amp;m); if (!m) return 0; for (int i = 1, s, t; i &lt;= m; i++) { scanf(\"%d%d\", &amp;s, &amp;t); Add(s, t), Add(t, s); n = std::max(n, std::max(s, t)); } for (int i = 1; i &lt;= n; i++) { if (!dfn[i]) root = i, Tarjan(i); } int t = cnt; for (int i = 1; i &lt;= n; i++) if (cut[i]) new_id[i] = ++t; for (int i = 1; i &lt;= cnt; i++) { for (std::vector&lt;int&gt;::iterator it = dcc[i].begin(); it != dcc[i].end(); ++it) { if (cut[*it]) AddC(i, new_id[*it]), AddC(new_id[*it], i); else id[*it] = i; } } DFS(1); if ((int) leaf.size() == 1) { int s = size[leaf[0]] + 1; ans2 = s * (s - 1) / 2; ans1 = 2; } else { ans1 = leaf.size(); for (std::vector&lt;int&gt;::iterator it = leaf.begin(); it != leaf.end(); ++it) { ans2 *= size[*it]; } } printf(\"Case %d: %d %lld\\n\", cas, ans1, ans2); init(); } }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p3225/"},{"title":" Luogu P3469 [POI2008]BLO-Blockade\t\t","text":"poi~~~ Luogu P3469 [POI2008]BLO-Blockade题面：题目LYD翻译版:Byteotia 城市有 n 个城镇, m 条双向道路, 其中 $ n \\le 10 ^ 5, m \\le 5 * 10 ^ 5$.每条道路连接两个不同的城镇,没有重复的道路,所有城镇联通.把城镇看作节点,把道路看作边.容易发现,整个城市构成一张无向图. 你需要输出 n 个整数,其中第 i 个整数表示把与节点 i 关联的所有边去掉之后(不去掉节点 i 本身),无向图中有多少有序点对 (x, y), 满足 x 和 y 不联通. 输入格式：第一行读入n，m，分别是城镇数目和道路数目 城镇编号1~n 接下来m行每行两个数字a,b，表示a和b之间有一条无向边 输出格式：输出n行，每行一个数字，为第i个城镇被锁时不能发生的访问的数量。 数据范围：$ 1\\le n\\le 100,000, 1\\le m\\le 500,000 $. 思路:首先,如果 i 是割点,去掉 i 后其余城市仍然联通, ans[i] = 2 * (i - 1).(点对是有序的) 若 i 不是割点,显然,原图会裂成多个联通块. 1.i自己就是一个联通块 2.i的子树上的联通块 3.不在i子树的联通块 分开求和即可. 但分别去求复杂度过高,无法承受.可以在Tarjan过程中求出每个子树的大小,计算时直接使用. 注释里还有丶东西 代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define N 500005#define ll long longnamespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1]; int ecnt, head[N], n, m, num, cnt; int dfn[N], low[N], size[N]; ll ans[N]; bool cut[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num, size[x] = 1; int flg = 0, vis = 0; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); size[x] += size[y]; //计算子树大小 if (low[y] &gt;= dfn[x]) { ans[x] += (ll) size[y] * (n - size[y]); vis += size[y]; if (++flg &gt; 1 || x != 1) cut[x] = 1; } } else low[x] = std::min(low[x], dfn[y]); } if (!cut[x]) ans[x] = 2 * (n - 1);//是割点QwQ else ans[x] += (ll) (n - vis - 1) * (vis + 1) + n - 1; //不在子树上的联通块和自身的联通块 } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b), Add(b, a); } Tarjan(1); for (int i =1; i &lt;= n; i++) { printf(\"%lld\\n\", ans[i]); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/06/luogu-p3469/"},{"title":" Luogu P3275 [SCOI2011]糖果\t\t","text":"差分约束 Luogu P3275 [SOI2011]糖果题面：题目描述幼儿园里有 N 个小朋友，lxhgww 老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不希望小红分到的糖果比他的多，于是在分配糖果的时候，lxhgww 需要满足小朋友们的 K 个要求。幼儿园的糖果总是有限的，lxhgww 想知道他至少需要准备多少个糖果，才能使得每个小朋友都能够分到糖果，并且满足小朋友们所有的要求。 输入格式：输入的第一行是两个整数 N，K。接下来 K 行，表示这些点需要满足的关系，每行 3 个数字，X，A，B。 如果 X=1， 表示第 A 个小朋友分到的糖果必须和第 B 个小朋友分到的糖果一样多； 如果 X=2， 表示第 A 个小朋友分到的糖果必须少于第 B 个小朋友分到的糖果； 如果 X=3， 表示第 A 个小朋友分到的糖果必须不少于第 B 个小朋友分到的糖果； 如果 X=4， 表示第 A 个小朋友分到的糖果必须多于第 B 个小朋友分到的糖果； 如果 X=5， 表示第 A 个小朋友分到的糖果必须不多于第 B 个小朋友分到的糖果； 输出格式：输出一行，表示 lxhgww 老师至少需要准备的糖果数，如果不能满足小朋友们的所有要求，就输出 -1。 数据范围：对于 30% 的数据，保证 N≤100 对于 100% 的数据，保证 N≤100000 对于所有的数据，保证 K≤100000,1≤X≤5,1≤A,B≤N 思路:事一道差分约束。 差分约束就是把形如$a - b \\le x$的不等式组通过三角形不等式，用SPFA等算法解决问题。 分类讨论： x = 1: $a = b$.等价于 $a - b \\le 0 \\&amp;\\&amp; b - a \\le 0$. 建边(a, b, 0),(b, a, 0). x = 2: $a &lt; b$.由于差分约束的要求，转化为$a - b \\le 1$. 建边(a, b, 1). x = 3: $b \\le a$.转化为 $b - a \\le 0$. 建边(b, a, 0). * x = 4: $a &gt; b$.由于差分约束的要求，转化为$b - a \\le 1$.建边(b, a, 1). x = 5: $a \\le b$.转化为$a - b \\le 0$.建边(a, b, 0). 注意几个点： 读入时特判一下自相矛盾的情况. 数据歹毒,从0建边时反着建可有效防止T飞 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt, val;} e[N]; int ecnt, head[N], n, k, dis[N]; long long ans; bool vis[N]; inline void Add(int f, int to, int val) {e[++ecnt].to = to, e[ecnt].val = val, e[ecnt].nxt = head[f], head[f] = ecnt;} bool SPFA(int u) { vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (dis[v] &lt; dis[u] + val) { dis[v] = dis[u] + val; if (vis[v] || !SPFA(v)) return 0; } } vis[u] = 0; return 1; } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;k); for (int i = 1; i &lt;= k; i++) { int x, a, b; scanf(\"%d%d%d\", &amp;x, &amp;a, &amp;b); switch (x) { case 1: Add(a, b, 0); Add(b, a, 0); break; case 2: if (a == b) return !puts(\"-1\"); else Add(a, b, 1); break; case 3: Add(b, a, 0); break; case 4: if (a == b) return !puts(\"-1\"); else Add(b, a, 1); break; default : Add(a, b, 0); break; } } for (int i = n; i &gt;= 1; i--) Add(0, i, 1); dis[0] = 0; if (SPFA(0)) { for (int i = 1; i &lt;= n; i++) ans += dis[i]; return !printf(\"%lld\\n\", ans); } else return !puts(\"-1\"); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/05/luogu-p3275/"},{"title":" Luogu P3627 [APIO2009]抢掠计划\t\t","text":"与缩点模板题惊人的相似… Luogu P3627 [APIO2009]抢掠计划题面：题目描述Siruseri 城中的道路都是单向的。不同的道路由路口连接。按照法律的规定， 在每个路口都设立了一个 Siruseri 银行的 ATM 取款机。令人奇怪的是，Siruseri 的酒吧也都设在路口，虽然并不是每个路口都设有酒吧。 Banditji 计划实施 Siruseri 有史以来最惊天动地的 ATM 抢劫。他将从市中心 出发，沿着单向道路行驶，抢劫所有他途径的 ATM 机，最终他将在一个酒吧庆 祝他的胜利。 使用高超的黑客技术，他获知了每个 ATM 机中可以掠取的现金数额。他希 望你帮助他计算从市中心出发最后到达某个酒吧时最多能抢劫的现金总数。他可 以经过同一路口或道路任意多次。但只要他抢劫过某个 ATM 机后，该 ATM 机 里面就不会再有钱了。 例如，假设该城中有 6 个路口，道路的连接情况如下图所示： 市中心在路口 1，由一个入口符号→来标识，那些有酒吧的路口用双圈来表示。每个 ATM 机中可取的钱数标在了路口的上方。在这个例子中，Banditji 能抢 劫的现金总数为 47，实施的抢劫路线是：1-2-4-1-2-3-5。 输入格式：第一行包含两个整数 N、M。N 表示路口的个数，M 表示道路条数。接下来 M 行，每行两个整数，这两个整数都在 1 到 N 之间，第 i+1 行的两个整数表示第 i 条道路的起点和终点的路口编号。接下来 N 行，每行一个整数，按顺序表示每 个路口处的 ATM 机中的钱数。接下来一行包含两个整数 S、P，S 表示市中心的 编号，也就是出发的路口。P 表示酒吧数目。接下来的一行中有 P 个整数，表示 P 个有酒吧的路口的编号。 输出格式：输出一个整数，表示 Banditji 从市中心开始到某个酒吧结束所能抢劫的最多 的现金总数。 数据范围：50%的输入保证 N, M&lt;=3000。所有的输入保证 N, M&lt;=500000。每个 ATM 机中可取的钱数为一个非负整数且不超过 4000。 输入数据保证你可以从市中心 沿着 Siruseri 的单向的道路到达其中的至少一个酒吧。 思路:此题是要在图中求经过点权最大的路径所经过的点权和. 然后我们就可以发现它与缩点模板题惊人的相似… 我们可以先缩点,将图转化为DAG,之后在DAG上拓扑跑DP即可. 本题有一大坑!(图片来自洛谷评论区) 当出现如图这种情况,若1为起点,5的入度为2,在拓扑过程中由于4不可达,5无法入队.我们可以发现,只需要研究可达的点就够了.所以在跑Tarjan和建新图的时候都只需要跑与起点联通的点.Tarjan只需要从起点跑,建图是特判dfn是否等于0. #3#11卡WA了解一下? 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, n, m, num, scc, cnt, ans = -114514, S, P, SPlace; int stack[N], dfn[N], low[N], id[N], ind[N], pv[N], val[N], f[N]; bool bridge[N], vis[N], bar[N], Bar[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], vis[y] = 0; id[y] = cnt; val[cnt] += pv[y]; if (bar[y]) Bar[cnt] = 1; if (y == S) SPlace = cnt; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; q.push(id[S]); f[id[S]] = val[SPlace]; while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; f[v] = std::max(f[v], f[u] + val[v]); if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) if (Bar[i]) ans = std::max(ans, f[i]); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;pv[i]); scanf(\"%d%d\", &amp;S, &amp;P); for (int i = 1, x; i &lt;= P; i++) scanf(\"%d\", &amp;x), bar[x] = 1; Tarjan(S); for (int x = 1; x &lt;= n; x++) { if (!dfn[x]) continue; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); ind[id[y]]++; } } TopSort(); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/08/luogu-p3627/"},{"title":"Luogu P3901 数列找不同","text":"简单的莫队 Luogu P3901 数列找不同 思路:维护区间[l, r]出现了几种数字, 若出现数等于r - l + 1则数列互不相同,反之则有相同. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;#define N 100000 + 233int n, q, block, kind;int pos[N], a[N], appear[N];bool ans[N];struct Node { int l, r, id; friend bool operator &lt;(Node a, Node b) { return (pos[a.l] ^ pos[b.l]) ? pos[a.l] &lt; pos[b.l] : ((pos[a.l] &amp; 1) ? a.r &lt; b.r : a.r &gt; b.r); }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline void Add(int x) { ++appear[x]; if (appear[x] == 1) ++kind;}inline void Remove(int x) { --appear[x]; if (!appear[x]) --kind;}signed main() { n = R(), q = R(); block = (int) sqrt(n); for (int i = 1; i &lt;= n; i++) a[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= q; i++) nd[i].l = R(), nd[i].r = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + q); for (int i = 1, l = 1, r = 0; i &lt;= q; i++) { while (l &lt; nd[i].l) Remove(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Remove(a[r--]); ans[nd[i].id] = (kind == nd[i].r - nd[i].l + 1); } for (int i = 1; i &lt;= q; i++) printf(\"%s\\n\", ans[i] ? \"Yes\" : \"No\"); return 0;}","link":"/2019/05/29/luogu-p3901/"},{"title":"Luogu P3674 小清新人渣的本愿","text":"毒瘤lxl QAQ Luogu P3674 小清新人渣的本愿 思路:lxl的题必定分块(不 区间题,看数据范围就可以知道可以莫队. 先看第一个操作:假设区间[l, r]有a, b满足a - b = x.那么a = b + x.这该怎么维护?可以开一个bitset存数列中出现的数,右移x位与一下,如果最后bitset不为空则说明可以满足. 第二个操作与第一个处理方法类似.假设区间[l, r]有a, b满足a + b = x, a = x + (-b).再开一个bitset反向存出现的数,这样就可以起到-b的效果.右移N - x位与第一个bitset与一下. 第三个操作略暴力,直接枚举因数,反正数据范围不大. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define N 100000 + 233int n, m, block;int a[N], pos[N], cnt[N];bool ans[N];std::bitset&lt;N&gt; b1, b2;struct Node { int l, r, id, x, opt; friend bool operator &lt;(Node a, Node b) { if (pos[a.l] != pos[b.l]) return pos[a.l] &lt; pos[b.l]; if (pos[a.l] &amp; 1) return a.r &lt; b.r; else return a.r &gt; b.r; }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline void Add(int x) {if (++cnt[x] == 1) b1[x] = b2[N - x] = 1;}inline void Remove(int x) {if (--cnt[x] == 0) b1[x] = b2[N - x] = 0;}signed main() { n = R(), m = R(), block = (int) sqrt(n); for (int i = 1; i &lt;= n; ++i) a[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= m; ++i) nd[i].opt = R(), nd[i].l = R(), nd[i].r = R(), nd[i].x = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + m); for (int i = 1, l = 1, r = 0; i &lt;= m; ++i) { while (l &lt; nd[i].l) Remove(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Remove(a[r--]); switch (nd[i].opt) { case 1: if ((b1 &amp; (b1 &lt;&lt; nd[i].x)).any()) ans[nd[i].id] = 1; break; case 2: if ((b1 &amp; (b2 &gt;&gt; (N - nd[i].x))).any()) ans[nd[i].id] = 1; break; default: for (int j = 1; j * j &lt;= nd[i].x; ++j) { if (!(nd[i].x % j) &amp;&amp; b1[j] &amp;&amp; b1[nd[i].x / j]) { ans[nd[i].id] = 1; break; } } break; } } for (int i = 1; i &lt;= m; i++) printf(\"%s\\n\", ans[i] ? \"hana\" : \"bi\"); return 0;}","link":"/2019/05/29/luogu-p3674/"},{"title":"Luogu P4396 [AHOI2013]作业","text":"可以莫队或CDQ,由于菜不会CDQ QAQ Luogu P4396 [AHOI2013]作业题面：题目描述此时己是凌晨两点，刚刚做了Codeforces的小A掏出了英语试卷。英语作业其实不算多，一个小时刚好可以做完。然后是一个小时可以做完的数学作业，接下来是分别都是一个小时可以做完的化学，物理，语文……小A压力巨大。 这是小A碰见了一道非常恶心的数学题，给定了一个长度为n的数列和若干个询问，每个询问是关于数列的区间表示数列的第l个数到第r个数)，首先你要统计该区间内大于等于a，小于等于b的数的个数，其次是所有大于等于a，小于等于b的，且在该区间中出现过的数值的个数。 小A望着那数万的数据规模几乎绝望，只能向大神您求救，请您帮帮他吧。 输入格式：第一行n,m 接下来n个数表示数列 接下来m行，每行四个数l,r,a,b 输出格式：输出m行，分别对应每个询问，输出两个数，分别为在l到r这段区间中大小在[a,b]中的数的个数，以及大于等于a,小于等于b的，且在该区间中出现过的数值的个数（具体可以参考样例）。 数据范围：N&lt;=100000,M&lt;=100000 思路:求区间[l, r]中在[a, b]间的数的个数和数值的个数. 两问可转化为二维数点和三位数点,CDQ分治易求,但由于我Too Young,不会CDQ,这里使用莫队做法. 我们开两个树状数组,分别维护数的个数和数值的个数,开一个cnt数组来维护数是否存在. 之后跑个莫队,复杂度$O(n\\sqrt nlogn)$,完美TLE 77分. 放弃树状数组直接分块,去掉那个log,可以苟过去. 我犯了个SB错误交了一页:重载运算符的时候把l写成id了 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;#define N 200000 + 23333int n, m, block, pos[N], cnt[N], a[N], f[N], g[N], L[N], ans1[N], ans2[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}struct Node { int l, r, a, b, id; bool operator &lt;(const Node &amp;a) { if (pos[l] != pos[a.l]) return pos[l] &lt; pos[a.l]; if (pos[l] &amp; 1) return r &lt; a.r; else return r &gt; a.r; }} nd[N];inline void Ask(int x) { int l = nd[x].a, r = nd[x].b, id = nd[x].id; if (pos[r] - pos[l] &lt; 2) { for (int i = l; i &lt;= r; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; return; } else { for (int i = l; i &lt; L[pos[l] + 1]; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; for (int i = L[pos[r]]; i &lt;= r; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; for (int i = pos[l] + 1; i &lt; pos[r]; i++) ans1[id] += f[i], ans2[id] += g[i]; }}inline void Modify(int p, int tag) { if (tag) { if (!cnt[p]) g[pos[p]]++; f[pos[p]]++, cnt[p]++; } else { f[pos[p]]--, cnt[p]--; if (!cnt[p]) g[pos[p]]--; }}signed main() { n = R(), m = R(); block = ceil (pow(n, 0.5)); for (register int i = 1; i &lt;= n; i++) { a[i] = R(), pos[i] = (i - 1) / block + 1; if (pos[i] != pos[i - 1]) L[pos[i]] = i; } L[pos[n + 1] = pos[n] + 1] = n + 1; for (register int i = 1; i &lt;= m; i++) nd[i].l = R(), nd[i].r = R(), nd[i].a = R(), nd[i].b = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + m); for (int i = nd[1].l; i &lt;= nd[1].r; i++) Modify(a[i], 1); Ask(1); for (register int i = 2, l = nd[1].l, r = nd[1].r; i &lt;= m; i++) { while (l &lt; nd[i].l) Modify(a[l++], 0); while (l &gt; nd[i].l) Modify(a[--l], 1); while (r &lt; nd[i].r) Modify(a[++r], 1); while (r &gt; nd[i].r) Modify(a[r--], 0); Ask(i); } for (register int i = 1; i &lt;= m; i++) printf(\"%d %d\\n\", ans1[i], ans2[i]); return 0;}","link":"/2019/05/09/luogu-p4396/"},{"title":"Luogu P4168 [Violet]蒲公英","text":"分块是暴力的浪漫 Luogu P4168 [Violet]蒲公英题面：题目描述在乡下的小路旁种着许多蒲公英，而我们的问题正是与这些蒲公英有关。 为了简化起见，我们把所有的蒲公英看成一个长度为n的序列$(a_1,a_2..a_n)$,其中$a_i$为一个正整数，表示第i棵蒲公英的种类编号。 而每次询问一个区间 [l,r]，你需要回答区间里出现次数最多的是哪种蒲公英，如果有若干种蒲公英出现次数相同，则输出种类编号最小的那个。 注意，你的算法必须是在线的. 输入格式：第一行两个整数 n,m ，表示有n株蒲公英，m 次询问。 接下来一行n个空格分隔的整数 $a_i$ ，表示蒲公英的种类 再接下来m行每行两个整数 $l_0,r_0$ ，我们令上次询问的结果为 x（如果这是第一次询问，则 x=0）。 令 $l=(l_0+x-1)\\bmod n + 1,r=(r_0+x-1) \\bmod n + 1$，如果 l&gt;r，则交换 l,r 。 最终的询问区间为[l,r]。 输出格式：输出 m 行。每行一个整数，表示每次询问的结果。 数据范围：对于 20% 的数据，保证 $1\\le n,m \\le 3000$。 对于 100% 的数据，保证 $1\\le n \\le 40000,1\\le m \\le 50000,1\\le a_i \\le 10^9$. 思路:问题转化:求区间众数. $n \\le 40000$,显然可以分块.$a_i \\le 10 ^ 9$,空间接受不能,显然需要离散化. 显然,一个区间里的众数是这个区间包含的块的众数或者是边角上的数. 我们用f[i][j]表示从第i块到第j块的最小众数,这很好求,每个块扫一遍. 当我们得到询问区间后,我们先把它包含的大块的最小众数作为候选答案.然后再扫边角. 为了得到每个数在区间内的出现次数,我们可以开N个vector来存每个数出现的位置.查找时分别在vector二分查找l和r,下标之差即为出现次数. 有个坑:查找r时用std::upper_bound,查找l时用std::lower_bound.如果都用std::lower_bound最后结果会少… 此做法忽略块大小等因素期望复杂度$O(N\\sqrt{nlogn})$.且vector常数巨大,吸氧吧您.艰难卡过. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;bits/stdc++.h&gt;#define N 40005int n, m, block, pos[N], val[N], a[N], f[250][250], L[250], lst, id;std::vector&lt;int&gt; v[N];std::map&lt;int, int&gt; mp;inline void init(int x) { int cnt[N] = {}, mx = 0, ans = 0; for (int i = L[x]; i &lt;= n; i++) { cnt[a[i]]++; if (cnt[a[i]] &gt; mx || (cnt[a[i]] == mx &amp;&amp; val[a[i]] &lt; val[ans])) ans = a[i], mx = cnt[a[i]]; f[x][pos[i]] = ans; }} inline int ask(int l, int r) { int ret, mx; ret = f[pos[l] + 1][pos[r] - 1]; mx = std::upper_bound(v[ret].begin(), v[ret].end(), r) - std::lower_bound(v[ret].begin(), v[ret].end(), l); for (int i = l; i &lt;= std::min(L[pos[l] + 1] - 1, r); i++) { int t = std::upper_bound(v[a[i]].begin(), v[a[i]].end(), r) - std::lower_bound(v[a[i]].begin(), v[a[i]].end(), l); if (t &gt; mx || (t == mx &amp;&amp; val[a[i]] &lt; val[ret])) ret = a[i], mx = t; } if (pos[l] != pos[r]) { for (int i = L[pos[r]]; i &lt;= r; i++) { int t = std::upper_bound(v[a[i]].begin(), v[a[i]].end(), r) - std::lower_bound(v[a[i]].begin(), v[a[i]].end(), l); if (t &gt; mx || (t == mx &amp;&amp; val[a[i]] &lt; val[ret])) ret = a[i], mx = t; } } return ret;}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); //离散化 for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;a[i]); if (mp.find(a[i]) == mp.end()) { mp[a[i]] = ++id; val[id] = a[i]; } a[i] = mp[a[i]]; v[a[i]].push_back(i); } //分块和初始化 block = int(sqrt(n)); for (int i = 1; i &lt;= n; i++) { pos[i] = (i - 1) / block + 1; if (pos[i] != pos[i - 1]) L[pos[i]] = i; } L[pos[n + 1] = pos[n] + 1] = n + 1; for (int i = 1; i &lt;= pos[n]; i++) init(i); //处理询问 for (int i = 1, l, r; i &lt;= m; i++) { scanf(\"%d%d\", &amp;l, &amp;r); l = (l + lst - 1) % n + 1, r = (r + lst - 1) % n + 1; if (l &gt; r) std::swap(l, r); lst = val[ask(l, r)]; printf(\"%d\\n\", lst); } return 0;}","link":"/2019/04/30/luogu-p4168/"},{"title":"Luogu P4139 上帝与集合的正确用法","text":"教我这题的人一个星期后就退役了QAQ Luogu P4139 上帝与集合的正确用法 思路:人话: $2^{2^{…^{2}}} mod\\ p$. 前置知识: 拓展欧拉定理$$当 b &gt;= \\varphi(p),a^b \\equiv a^{b\\mod \\varphi(p) + \\varphi(p)}\\mod p.\\当 b &lt; \\varphi(p) ,a^b \\equiv a ^ {b \\mod \\varphi(p)} \\mod p.$$ 我们对原式不断使用拓欧,发现一直在递归计算$2^{…^2}\\mod \\varphi(p) + \\varphi(p)$, 最终该式会等于0.因此递归计算即可. 欧拉函数算的少,需要的时候爆算就行,不需要筛法. 代码:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;#define ll long longint Phi(int x) { int ret = x; for (int i = 2; i * i &lt;= x; ++i) { if (x % i == 0) { ret -= ret / i; while (x % i == 0) x /= i; } } if (x &gt; 1) ret -= ret / x; return ret;}int Qpow(int a, int b, int p) { int ret = 1; for (; b; b &gt;&gt;= 1, a = (ll) a * a % p) if (b &amp; 1) ret = (ll) ret * a % p; return ret;}int Solve(int p) { return p == 1 ? 0 : Qpow(2, Solve(Phi(p)) + Phi(p), p);}signed main() { int T; scanf(\"%d\", &amp;T); while (T--) { int p; scanf(\"%d\", &amp;p); printf(\"%d\\n\", Solve(p)); } return 0;}","link":"/2019/05/29/luogu-p4139/"},{"title":" Luogu P4879 ycz的妹子","text":"ycz有很多喜欢他的青梅竹马,dky有很多妹子,我没有妹子,我们都有光明的前途. Luogu P4879 ycz的妹子题面：题目描述机房神犇ycz有n个青梅竹马，她们分别住在1~n号城市中。小时候的她们美丽可爱，但是由于女大十八变，有些妹子的颜值发生了变化，但是十分重感情的ycz神犇不忍心抛弃她们，于是记录下来了她们颜值变化的值，我们用C, x, y表示第x个城市的妹子的颜值下降了y。长大之后的ycz非常有魅力，有许多妹子被ycz迷得神魂颠倒，我们用I, x, y表示第x个城市有一个妹子喜欢上了ycz，她的颜值为y（y有可能是负数，但是ycz来者不拒）。但在中途有一些妹子和ycz吵架了，于是就分手了，我们用D, x表示第x个妹子和ycz分手了。 最近神犇ycz要去全国各地找他的妹子们，为了方便计算，我们珂以把ycz的妹子所在的城市当作是一条直线，并且挨在一起。神犇ycz由于忙于和他的妹子们联系此时已经很累了，于是交给你一个这样的任务：他想知道他在某个时间去找他的所有妹子们珂以获得多大的愉悦度，这个愉悦度为他找的妹子的颜值数，你要做的就是求出这个愉悦度之和（注意长大后妹子们的颜值可能为负数/滑稽）。 注意：每个城市只允许有一个妹子，也就是说后来喜欢上ycz的妹子会赶走之前这个城市喜欢ycz的妹子（一城不容二女）。 输入格式：第一行两个正整数n和m (1&lt;=n&lt;=100000)(1&lt;=n&lt;=100000)第二行为n个整数ai，表示小时候ycz的青梅竹马的颜值(1&lt;=ai&lt;=10^9)接下来m行，每行为一条信息，每条信息可能是下面的一种: C, x, y表示第x个城市的妹子的颜值下降了yI, x, y表示在第x个城市有一个颜值为y的妹子迷上了yczD, x表示第x个妹子和ycz分手了 Q表示ycz现在想知道如果现在去找他所有的妹子们珂以获得多大的愉悦度 说明：妹子们居住的城市编号最大为5*10^5 输出格式：对于每一个Q输出一个整数 思路:这道题是在同学的分块课件里的. 但是,我选择线段树 建立一棵线段树,维护从1到MAXN城市的妹子. 只需要注意一下分手的时候是根据cnt来二分的,其他都是板子.. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;#define ll long long#define N 200005struct SegTree { int l, r; ll sum, cnt; #define l(x) tree[x].l #define r(x) tree[x].r #define sum(x) tree[x].sum #define cnt(x) tree[x].cnt #define ls(x) x &lt;&lt; 1 #define rs(x) x &lt;&lt; 1 | 1} tree[N &lt;&lt; 2];int n, m, qaq[N];void pushup(int p) { sum(p) = sum(ls(p)) + sum(rs(p)); cnt(p) = cnt(ls(p)) + cnt(rs(p));}void build(int p, int l, int r) { l(p) = l, r(p) = r, sum(p) = cnt(p) = 0; if (l == r) { sum(p) = qaq[l], cnt(p) = qaq[l] ? 1 : 0; return; } int mid = (l + r) &gt;&gt; 1; build(ls(p), l, mid); build(rs(p), mid + 1, r); pushup(p);}void remove(int p, int l, int r, int x) { if (l == r) { sum(p) = cnt(p) = 0; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= cnt(ls(p))) remove(ls(p), l, mid, x); else remove(rs(p), mid + 1, r, x - cnt(ls(p))); pushup(p);}void change(int p, int l, int r, int x, int v) { if (l == r) { sum(p) -= v; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) change(ls(p), l, mid, x, v); else change(rs(p), mid + 1, r, x, v); pushup(p);}void insert(int p, int l, int r, int x, int v) { if (l == r) { sum(p) = v, cnt(p) = 1; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) insert(ls(p), l, mid, x, v); else insert(rs(p), mid + 1, r, x, v); pushup(p);}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;qaq[i]); build(1, 1, N); for (int i = 1; i &lt;= m; i++) { char s[5]; int x, y; scanf(\"%s\", s); switch (s[0]) { case 'C': scanf(\"%d%d\", &amp;x, &amp;y); change(1, 1, N, x, y); break; case 'I': scanf(\"%d%d\", &amp;x, &amp;y); insert(1, 1, N, x, y); break; case 'D': scanf(\"%d\", &amp;x); remove(1, 1, N, x); break; default: printf(\"%lld\\n\", sum(1)); break; } } return 0;}","link":"/2019/04/29/luogu-p4879/"},{"title":" Luogu P4503 [CTSC2014] 企鹅QQ\t\t","text":"正经A掉的第一道紫题?? Luogu P4503 [CTSC2014] 企鹅QQ题面：题目描述:小Q是PenguinQQ网站的管理员，他最近在进行一项有趣的研究——哪些账户是同一个人注册的。经过长时间的分析，小Q发现同一个人注册的账户名称总是很相似的，例如Penguin1，Penguin2，Penguin3……于是小Q决定先对这种相似的情形进行统计。 小Q定义，若两个账户名称是相似的，当且仅当这两个字符串等长且恰好只有一位不同。例如“Penguin1”和“Penguin2”是相似的，但“Penguin1”和“2Penguin”不是相似的。而小Q想知道，在给定的n 个账户名称中，有多少对是相似的。 为了简化你的工作，小Q给你的N 个字符串长度均等于L ，且只包含大小写字母、数字、下划线以及‘@’共64种字符，而且不存在两个相同的账户名称。 输入格式：第一行包含三个正整数N ，L ，S 。其中N 表示账户名称数量，L 表示账户名称长度，S 用来表示字符集规模大小，它的值只可能为2或64。 若S 等于2，账户名称中只包含字符‘0’和‘1’共2种字符； 若S 等于64，账户名称中可能包含大小写字母、数字、下划线以及‘@’共64种字符。 随后N 行，每行一个长度为L 的字符串，用来描述一个账户名称。数据保证N 个字符串是两两不同的。 输出格式：仅一行一个正整数，表示共有多少对相似的账户名称。 数据范围：$N \\le 30000, L \\le 200$ 思路:S可以直接无视（（（ 把题目转换为人话：给一堆字符串，找出只有一个字符不同的字符串对数。 由于L的范围非常小，所以我们可以枚举不同字符的位置。 先预处理字符串从左往右的hash和从右往左的hash，然后在枚举时将左右两边的hash再hash一遍，把相同hash的去重并统计一下，输出对数就OK。 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//请无视S.H.I.T.一样的变量命名(逃#include &lt;bits/stdc++.h&gt;using namespace std;#define ll long long#define base1 13131#define base2 1313131#define MOD 23333333333333333namespace Gekoo { int n, l, s, cwy; char QQ[30005][205]; ll gou[30005][205], li[30005][205], nmsl[30005]; void QAQ() { scanf(\"%d%d%d\", &amp;n, &amp;l, &amp;s); for (int i = 1; i &lt;= n; i++) { scanf(\"%s\", QQ[i] + 1); for (int j = 1; j &lt;= l; j++) { gou[i][j] = (gou[i][j - 1] * base1 + QQ[i][j]) % MOD; } for (int j = l; j &gt;= 1; j--) { li[i][j] = (li[i][j + 1] * base2 + QQ[i][j]) % MOD; } } for (int mid = 1; mid &lt;= l; mid++) { for (register int i = 1; i &lt;= n; i++) { nmsl[i] = (gou[i][mid - 1]* base1 + li[i][mid + 1]) % MOD; } sort(nmsl + 1, nmsl + 1 + n); int dky = 1; for (register int i = 1; i &lt;= n; i++) { if (nmsl[i] == nmsl[i - 1]) { cwy += dky; dky++; } else { dky = 1; } } } printf(\"%d\\n\", cwy); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p4503/"},{"title":" Luogu P5058 [ZJOI2004]嗅探器\t\t","text":"警惕思维江（不僵化 Luogu P5058 [ZJOI2004]嗅探器题面：题目:某军搞信息对抗实战演习，红军成功地侵入了蓝军的内部网络，蓝军共有两个信息中心，红军计划在某台中间服务器上安装一个嗅探器，从而能够侦听到两个信息中心互相交换的所有信息，但是蓝军的网络相当的庞大，数据包从一个信息中心传到另一个信息中心可以不止有一条通路。现在需要你尽快地解决这个问题，应该把嗅探器安装在哪个中间服务器上才能保证所有的数据包都能被捕获？ 输入格式：输入文件的第一行一个整数 n，表示蓝军网络中服务器的数目。 接下来若干行是对蓝军网络的拓扑结构描述，每行是两个整数 i , j 表示编号为 i 和编号为 j 的两台服务器间存在连接（显然连接是双向的），服务器的编号从 1 开始，一行两个 0 表示网络的拓补结构描述结束，再接下来是两个整数 a , b 分别表示两个中心服务器的编号。 输出格式：输出编号。如果有多个解输出编号最小的一个，如果找不到任何解，输出 No solution 思路:求出一个点使得删去他后起点和终点不连通. 最开始我是打算求一下割点，然后枚举删割点. 之后郭老师提醒了我数据范围…&lt;100,Tarjan你horse呢QAQ 直接枚举删点跑Dijkstra,不能联通直接输出点,最后输出No Solution. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt, val;} e[N &lt;&lt; 1]; int head[N], ecnt, n, st, ed, dis[N]; bool vis[N]; inline void Add(int f, int to) {e[ecnt].val = 1, e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} bool Dijkstra(int ban) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue &lt;std::pair&lt;int, int&gt; &gt; q; dis[st] = 0; q.push(std::make_pair(0, st)); while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (v == ban) continue; if (dis[v] &gt; dis[u] + val) { dis[v] = dis[u] + val; if (!vis[v]) { q.push(std::make_pair(-dis[v], v)); } } } } return (dis[ed] == 0x3f3f3f3f) ? 0 : 1; } signed QAQ() { scanf(\"%d\", &amp;n); int i, j; while (1) { scanf(\"%d%d\", &amp;i, &amp;j); if (!i &amp;&amp; !j) break; Add(i, j), Add(j, i); } scanf(\"%d%d\", &amp;st, &amp;ed); for (int i = 1; i &lt;= n; i++) { if (i == st || i == ed) continue; if (!Dijkstra(i)) return !printf(\"%d\\n\", i); } return !printf(\"No solution\\n\"); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/14/luogu-p5058/"},{"title":" POJ 3463 Sightseeing\t\t","text":"最短路与次短路 POJ3463 Sightseeing题意：求图中最短路和比最短路长度大1的路径数总和 思路:先求出最短路数和次短路数，如果次短路长度 = 最短路长度，那么输出路径数和，否则输出最短路数。 求次短路数也非常简单，在Dijkstra过程中分类讨论即可。 代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;cctype&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;ctime&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;deque&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;string&gt;#include &lt;utility&gt;#include &lt;vector&gt;#define N 100005namespace Gekoo { struct Edge { int to, nxt, val; }e[N]; struct Node { int val, u, is_first; Node(int a, int b, int c) {u = a, val = b, is_first = c;} bool operator &lt;(const Node &amp;a) const { return val &gt; a.val; } }; int ecnt, head[N], T, dis[N][2], cnt[N][2]; bool vis[N][2]; void AddEdge(int f, int to, int val) { e[++ecnt].to = to; e[ecnt].val = val; e[ecnt].nxt = head[f]; head[f] = ecnt; } void Dijkstra(int s) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); memset(cnt, 0, sizeof(cnt)); dis[s][0] = dis[s][1] = 0; cnt[s][0] = cnt[s][1] = 1; std::priority_queue&lt;Node&gt; q; q.push(Node(s, 0, 0)); while (!q.empty()) { int u = q.top().u, is_f = q.top().is_first; q.pop(); if (vis[u][is_f]) continue; vis[u][is_f] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (val + dis[u][is_f] &lt; dis[v][0]) { dis[v][1] = dis[v][0]; dis[v][0] = val + dis[u][is_f]; cnt[v][1] = cnt[v][0]; cnt[v][0] = cnt[u][is_f]; q.push(Node(v, dis[v][0], 0)); q.push(Node(v, dis[v][1], 1)); } else if (val + dis[u][is_f] == dis[v][0]) { cnt[v][0] += cnt[u][is_f]; } else if (val + dis[u][is_f] &gt; dis[v][0] &amp;&amp; val + dis[u][is_f] &lt; dis[v][1]) { dis[v][1] = val + dis[u][is_f]; cnt[v][1] = cnt[u][is_f]; q.push(Node(v, dis[v][1], 1)); } else if (val + dis[u][is_f] == dis[v][1]) { cnt[v][1] += cnt[u][is_f]; } } } } signed QAQ() { scanf(\"%d\", &amp;T); while (T--) { ecnt = 0; memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); int n, m, s, f; scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, l; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;l); AddEdge(a, b, l); } scanf(\"%d%d\", &amp;s, &amp;f); Dijkstra(s); if (dis[f][1] == dis[f][0] + 1) cnt[f][0] += cnt[f][1]; printf(\"%d\\n\", cnt[f][0]); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/02/28/poj-3463/"},{"title":" POJ 1734 Sightseeing trip\t\t","text":"Floyd求最小环 POJ 1734 Sightseeing trip题面人话ver：给一无向图，求最小环。 思路:Floyd求最小环板子（（（ 没啥好多说的zzz 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#define INF 0x3f3f3f3fnamespace Gekoo { int n, m, mp[105][105], dis[105][105], pre[105][105], mincircle = INF; std::vector&lt;int&gt; path; void GetPath(int x, int y) { if(pre[x][y] == 0) return ; GetPath(x, pre[x][y]); path.push_back(pre[x][y]); GetPath(pre[x][y], y); } void Floyd() { for (int k = 1; k &lt;= n; k++) { for (int i = 1; i &lt; k; i++) { for (int j = i + 1; j &lt; k; j++) { if ((long long)dis[i][j] + mp[i][k] + mp[k][j] &lt; mincircle) { mincircle = dis[i][j] + mp[i][k] + mp[k][j]; path.clear(); path.push_back(i); GetPath(i, j); path.push_back(j); path.push_back(k); } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (dis[i][j] &gt; dis[i][k] + dis[k][j]) { dis[i][j] = dis[i][k] + dis[k][j]; pre[i][j] = k; } } } } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); memset(mp, 0x3f, sizeof(mp)); memset(dis, 0x3f, sizeof(dis)); for (int i = 1; i &lt;= n; i++) mp[i][i] = 0; for (int i = 1, a, b ,c; i &lt;= m; i++) { scanf(\"%d%d%d\", &amp;a, &amp;b ,&amp;c); mp[a][b] = mp[b][a] = dis[a][b] = dis[b][a] = std::min(mp[a][b], c); } Floyd(); if (mincircle == INF) { puts(\"No solution.\"); return 0; } for (std::vector&lt;int&gt;::iterator it = path.begin(); it != path.end(); ++it) { printf(\"%d \", *it); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/04/poj-1734/"},{"title":" POJ 1135 Domino Effect\t\t","text":"最短路 POJ1135 Domino Effect人话版题面：给一无向图,从节点1开始推骨牌,骨牌运动速度为1m/s,求出最后一个骨牌的落地时间. 思路:先求最短路,找出最短路中最大值,即为落在节点上的最长时间. 再枚举落在边上的最长时间,画图手推可得,落在边$(u,v)$上的时间为$\\frac{dis(u)+dis(v)+val}{2}$. 最后比较一下大小对应输出. 由于我不良的代码习惯导致一直WA,我忏悔 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;deque&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;utility&gt;#include &lt;vector&gt;#define N 500005namespace Gekoo { struct Edge { int to, nxt, val; }e[N &lt;&lt; 1]; int n, m, ecnt, head[N], dis[N], cnt; bool vis[N]; inline void AddEdge(int f, int to, int val) { e[++ecnt].to = to, e[ecnt].val = val, e[ecnt].nxt = head[f], head[f] = ecnt; } void Dijkstra(int s) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; q; q.push(std::make_pair(0, 1)); dis[1] = 0; while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (dis[v] &gt; dis[u] + val) { dis[v] = dis[u] + val; q.push(std::make_pair(-dis[v], v)); } } } } void init() { ecnt = 0; memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); } signed QAQ() { while (1) { scanf(\"%d%d\", &amp;n, &amp;m); if (!n &amp;&amp; !m) break; init(); for (int i = 1; i &lt;= m; i++) { int a, b, l; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;l); AddEdge(a, b, l); AddEdge(b, a, l); } Dijkstra(1); double mx_pt = 0.0; int pt = 0; for (int i = 1; i &lt;= n; i++) { if (dis[i] &gt;= mx_pt) { mx_pt = dis[i]; pt = i; } } double mx_e = 0.0; int lpt = 0, rpt = 0; for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (mx_e &lt;= (double) (dis[u] + dis[v] + val) / 2.0) { mx_e = (double) (dis[u] + dis[v] + val) / 2.0; lpt = std::min(u, v), rpt = std::max(u, v); } } } printf(\"System #%d\\n\", ++cnt); if (mx_pt &gt;= mx_e) { printf(\"The last domino falls after %.1f seconds, at key domino %d.\\n\", mx_pt, pt); } else { printf(\"The last domino falls after %.1f seconds, between key dominoes %d and %d.\\n\", mx_e, lpt, rpt); } puts(\"\"); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/02/28/poj-1135/"},{"title":"2019普通高等OIer全团队统一考试","text":"Please enter the password to read the blog. Incorrect Password! No content to display! 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","link":"/2019/06/07/test0607/"},{"title":"六一儿童周考","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/06/01/test0601/"}],"tags":[{"name":"图论","slug":"图论","link":"/tags/图论/"},{"name":"DP","slug":"DP","link":"/tags/DP/"},{"name":"字符串","slug":"字符串","link":"/tags/字符串/"},{"name":"KMP","slug":"KMP","link":"/tags/KMP/"},{"name":"AC自动机","slug":"AC自动机","link":"/tags/AC自动机/"},{"name":"Manacher","slug":"Manacher","link":"/tags/Manacher/"},{"name":"SCC","slug":"SCC","link":"/tags/SCC/"},{"name":"Tarjan","slug":"Tarjan","link":"/tags/Tarjan/"},{"name":"缩点","slug":"缩点","link":"/tags/缩点/"},{"name":"数学","slug":"数学","link":"/tags/数学/"},{"name":"矩阵乘法","slug":"矩阵乘法","link":"/tags/矩阵乘法/"},{"name":"DFS","slug":"DFS","link":"/tags/DFS/"},{"name":"并查集","slug":"并查集","link":"/tags/并查集/"},{"name":"Floyd","slug":"Floyd","link":"/tags/Floyd/"},{"name":"LCA","slug":"LCA","link":"/tags/LCA/"},{"name":"生成树","slug":"生成树","link":"/tags/生成树/"},{"name":"拓扑排序","slug":"拓扑排序","link":"/tags/拓扑排序/"},{"name":"分块","slug":"分块","link":"/tags/分块/"},{"name":"莫队","slug":"莫队","link":"/tags/莫队/"},{"name":"二分图","slug":"二分图","link":"/tags/二分图/"},{"name":"匈牙利","slug":"匈牙利","link":"/tags/匈牙利/"},{"name":"DCC","slug":"DCC","link":"/tags/DCC/"},{"name":"树链剖分","slug":"树链剖分","link":"/tags/树链剖分/"},{"name":"RMQ","slug":"RMQ","link":"/tags/RMQ/"},{"name":"ST表","slug":"ST表","link":"/tags/ST表/"},{"name":"割点","slug":"割点","link":"/tags/割点/"},{"name":"SPFA","slug":"SPFA","link":"/tags/SPFA/"},{"name":"差分约束","slug":"差分约束","link":"/tags/差分约束/"},{"name":"bitset","slug":"bitset","link":"/tags/bitset/"},{"name":"树状数组","slug":"树状数组","link":"/tags/树状数组/"},{"name":"离散化","slug":"离散化","link":"/tags/离散化/"},{"name":"数论","slug":"数论","link":"/tags/数论/"},{"name":"拓展欧拉定理","slug":"拓展欧拉定理","link":"/tags/拓展欧拉定理/"},{"name":"线段树","slug":"线段树","link":"/tags/线段树/"},{"name":"Hash","slug":"Hash","link":"/tags/Hash/"},{"name":"Dijkstra","slug":"Dijkstra","link":"/tags/Dijkstra/"},{"name":"最短路","slug":"最短路","link":"/tags/最短路/"},{"name":"周考","slug":"周考","link":"/tags/周考/"},{"name":"快速幂","slug":"快速幂","link":"/tags/快速幂/"},{"name":"状压DP","slug":"状压DP","link":"/tags/状压DP/"},{"name":"前缀和","slug":"前缀和","link":"/tags/前缀和/"}],"categories":[{"name":"OI","slug":"OI","link":"/categories/OI/"}]}