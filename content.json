{"pages":[{"title":"about","text":"关于我这里Gekoo,是弱省的一个蒟蒻WAer…目前正在文化课倒数与OI间苦苦挣扎喜欢的话就坚持8 友链本Blog首席合作伙伴:中华人民共和国政府 https://www.gov.cn 同届生:AKUOI DKY https://baka.online素质电竞 HHY https://oierhhy.top阳光男孩 TKJ https://oiertkj.top压行鬼才 宇興 https://www.cnblogs.com/yu-xing勤奋巨神 Chloris https://www.cnblogs.com/chloris物理很菜 AQSfer https://www.cnblogs.com/qxyzili--24不知写啥 OIerGLH https://www.cnblogs.com/oierglh儒雅随和 SIN_XIII https://www.cnblogs.com/SINXIII 学长/姐:邦邦人 Labelray http://labelray.top恶心肥宅 ErkkiErkko https://www.cnblogs.com/ErkkiErkko游戏开发者 Floatiy https://www.cnblogs.com/floatiy 校外朋友:ACCPET https://zhehao.topYorkWu http://yueyangwu.cn","link":"/about/index.html"}],"posts":[{"title":"(Uncompleted)(5.9更新)纸糊窜学习笔记","text":"图巨Orz 纸糊窜学习笔记图巨使用自动机为我们讲解了一系列纸糊窜算法. 定义与符号 $\\Sigma$是字母表，字母表是一个非空的有限集合，字符串$S$是元素在字母表中的有限长的数组 所有字符串的集合$\\Sigma^$，空串$\\epsilon \\in \\Sigma^$ 对于字符串 $S \\in \\Sigma *$，$S_i$或$S[i]$是字符串第$i$个位置的字符，从$1$开始编号 定义$|S|$为字符串$S$的长度 $S[i,j]$为字符串$S_iS_{i+1}…S_j$,i省略代表1,j省略代表$|S|$ $A^R$是字符串的反转 $AB$是字符串$A,B$的拼接. 拼接和反转满足穿脱原则,即:$(AB)^R=B^RA^R$ $S^k$表示字符串重复k次构成的字符串 $S^*$表示字符串集合${S^k|k \\in \\N}$ 确定性有限状态自动机(DFA)1.定义有限状态自动机是一张边上带有字母的有向图，它有唯一的初始节点和一些接受节点。 DFA满足对于图上任意一个节点$u$和一个字母$w \\in \\Sigma$,至多只有一条从$u$出发标有$w$的边.设这条边到达$v$,用$\\delta(u, w) = v$来表示这条边. 我们可以把DFA理解成一个五元组$M=(\\Sigma,Q,F,\\delta,q_0)$. DFA的重要作用是作为识别字符串的工具，从另一个角度讲，DFA是一个（可能是无限的）字符串集合的有限表示.我们有时将字符串的集合称为语言。自动机$M$能识别的串代表的语言记作$L(M)$. 如果自动机$M$给定,判断字符串$S$能否被$M$接受只需要$O(|S|+|M|)$的时间. 2.构造自动机对于一个串T，包含这个串的字符串构成的语言记作$L(T)$。那么如果我们能构造出$L(T)$所对应的DFA，那么就可以在线性时间内判定任何串S是否属于$L(T)$，即是否包含这个串作为子串. 构造自动机的第一步是为每个状态赋予一定的实际含义.不妨设$|S| = m,|T| = n$.首先，由于我们的识别算法是在线的，我们可以稍稍收紧自动机的接受条件，只接受那些满足长度为$n$的后缀是$T$的字符串.如果读入的串$S$的最长后缀满足其也是$T$的一个长度为$i$的前缀，我们让它落在状态$q_i$上。那么根据定义，$q_0$是起始状态，$q_n$是接受状态. 接下来我们考虑$\\delta (q_i, x)$应当转移到哪一个状态.即如果一个字符串$S$的最后$i$位是$T[,i]$，那么再读入一个字符$x$，最长能匹配的前缀有多长.我们分两种状态来讨论这一点. 若$T_{i + 1} = x$, 则匹配成功. $\\delta (q_i, x) = q_{i + 1}$ 若$T_{i + 1} \\not ={x}$, 则匹配失败. $\\delta (q_i, x) = q_{j + 1}$,其中$j$是最大的满足$T[,j] = T[i - j + 1, i]$和$T_{j + 1} = x$的数. 3.Border显然,高效转移需要关注$T[,j] = T[i - j + 1, i]$的性质.因此我们引入概念border.若字符串$T$满足$T$既是字符串$S$的一个前缀也是字符串$S$的一个后缀,则$T$是$S$的一个border.","link":"/2019/05/09/AM/"},{"title":" Luogu P1108 低价购买\t\t","text":"变种LIS Luogu P1108 低价购买题面：题目描述“低价购买”这条建议是在奶牛股票市场取得成功的一半规则。要想被认为是伟大的投资者，你必须遵循以下的问题建议:“低价购买；再低价购买”。每次你购买一支股票,你必须用低于你上次购买它的价格购买它。买的次数越多越好!你的目标是在遵循以上建议的前提下，求你最多能购买股票的次数。你将被给出一段时间内一支股票每天的出售价($2^{16} $范围内的正整数)，你可以选择在哪些天购买这支股票。每次购买都必须遵循“低价购买；再低价购买”的原则。写一个程序计算最大购买次数。 这里是某支股票的价格清单： 日期 $ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8, 9 ,10 ,11, 12$ 价格 $68 ,69 ,54, 64,68 ,64 ,70 ,67 ,78 ,62, 98, 87 $ 最优秀的投资者可以购买最多4次股票，可行方案中的一种是： 日期 $2 , 5 , 6 ,10 $ 价格 $69, 68 ,64 ,62 $ 输入格式：第1行: $ N(1 \\le N \\le 5000) $，股票发行天数 第2行: $ N$个数，是每天的股票价格。 输出格式：两个数: 最大购买次数和拥有最大购买次数的方案数($ \\le 2^{31} $)当二种方案“看起来一样”时（就是说它们构成的价格队列一样的时候）,这2种方案被认为是相同的。 思路:第一问ez,由下次购买价格低于上次,求最大购买次数可转化为LIS. 思考点主要在第二问,求出最大购买次数方案数. 事实上可以显然地求出最大购买次数方案数的状态转移方程: $$ c[i]_{j:1\\rightarrow i}= \\left{ \\begin{aligned} 1,if(f[i]=1)\\ c[i]+c[j],if(f[i]=f[j]+1,a[i]&lt;a[j])\\ 0,if(a[i]=a[j],f[i]=f[j]) \\end{aligned} \\right.\\ $$ 解释一下: 当f[i]=1时,说明这是一种新的方案,c[i]=1. 然后$j:1\\rightarrow i$扫一遍,如果f[i]=f[j]+1&amp;&amp;a[i]&lt;a[j],说明他们属于当前方案,将他们的方案数加上. 如果f[i]=f[j]&amp;&amp;a[i]=a[j],说明这两种股票一模一样,当前c[i]直接为0,此步是去重. 最后最重要的:不开long long见祖宗!!!!!!!!!!! 代码:12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;bits/stdc++.h&gt;using namespace std;#define N 5005#define ll long longnamespace Gekoo { ll n, f[N], a[N], c[N], ans = -(1 &lt;&lt; 30), cans; void QAQ() { scanf(\"%lld\", &amp;n); for (ll i = 1; i &lt;= n; i++) { scanf(\"%lld\", &amp;a[i]); } for (ll i = 1; i &lt;= n; i++) { for (ll j = 0; j &lt; i; j++) { f[i] = (a[i] &lt; a[j])? max(f[i], f[j]) : f[i]; } f[i]++; if (f[i] == 1) c[i] = 1; for (ll j = 0; j &lt; i; j++) { if (a[i] &lt; a[j] &amp;&amp; f[i] == f[j] + 1) c[i] = (c[i] + c[j]); else if (a[i] == a[j] &amp;&amp; f[i] == f[j]) c[i] = 0; } ans = max(ans, f[i]); } for (ll i = 1; i &lt;= n; i++) { if(f[i] == ans) cans += c[i]; } printf(\"%lld %lld\\n\", ans, cans); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p1108/"},{"title":" Luogu P1262 间谍网络\t\t","text":"ning干 Luogu P1262 间谍网络题面：题目描述由于外国间谍的大量渗入，国家安全正处于高度的危机之中。如果A间谍手中掌握着关于B间谍的犯罪证据，则称A可以揭发B。有些间谍收受贿赂，只要给他们一定数量的美元，他们就愿意交出手中掌握的全部情报。所以，如果我们能够收买一些间谍的话，我们就可能控制间谍网中的每一分子。因为一旦我们逮捕了一个间谍，他手中掌握的情报都将归我们所有，这样就有可能逮捕新的间谍，掌握新的情报。 我们的反间谍机关提供了一份资料，包括所有已知的受贿的间谍，以及他们愿意收受的具体数额。同时我们还知道哪些间谍手中具体掌握了哪些间谍的资料。假设总共有n个间谍(n不超过3000)，每个间谍分别用1到3000的整数来标识。 请根据这份资料，判断我们是否有可能控制全部的间谍，如果可以，求出我们所需要支付的最少资金。否则，输出不能被控制的一个间谍。 输入格式：第一行只有一个整数n。 第二行是整数p。表示愿意被收买的人数，1≤p≤n。 接下来的p行，每行有两个整数，第一个数是一个愿意被收买的间谍的编号，第二个数表示他将会被收买的数额。这个数额不超过20000。 紧跟着一行只有一个整数r，1≤r≤8000。然后r行，每行两个正整数，表示数对(A, B)，A间谍掌握B间谍的证据。 输出格式：如果可以控制所有间谍，第一行输出YES，并在第二行输出所需要支付的贿金最小值。否则输出NO，并在第二行输出不能控制的间谍中，编号最小的间谍编号。 思路:显然,同一个SCC里的间谍会互相出卖.因此,先缩点,记录每个SCC里的最小特工编号和贿赂费用. 思考后可以发现,只要我们控制了所有入度为0的特工,整个图就都可以被控制. 直接寻找一下所有入度为0的点,如果该点不能被贿赂,就无法控制所有间谍,此时记录编号最小的间谍,反之将贿金加给ans. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; int ecnt, ccnt, head[N], hc[N], p, n, m, MO, num, cnt, ans = 0, cant = 0x3f3f3f3f; int stack[N], dfn[N], low[N], id[N], ind[N], val[N]; int mn[N], cost[N]; bool ins[N], flg; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, ins[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], ins[y] = 0; id[y] = cnt; if (cost[y] &gt; 0) val[cnt] = std::min(val[cnt], cost[y]); mn[cnt] = std::min(mn[cnt], y); } while (x != y); } } signed QAQ() { memset(val, 0x3f, sizeof(val)); memset(mn, 0x3f, sizeof(mn)); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); cost[a] = b; } int r; scanf(\"%d\", &amp;r); for (int i = 1; i &lt;= r; i++) { int a, b; scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (id[u] != id[v]) AddC(id[u], id[v]), ind[id[v]]++; } } for (int i = 1; i &lt;= cnt; i++) { if (!ind[i]) { if (val[i] == 0x3f3f3f3f) { flg = 1; cant = std::min(cant, mn[i]); } else { ans += val[i]; } } } if (!flg) return !printf(\"YES\\n%d\\n\", ans); else return !printf(\"NO\\n%d\\n\", cant); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p1262/"},{"title":" Luogu P1306 斐波那契公约数\t\t","text":"矩阵乘法板子题 Luogu P1306 斐波那契公约数题面：题目描述对于Fibonacci数列:1,1,2,3,5,8,13……大家应该很熟悉吧~~~但是现在有一个很“简单”问题:第n项和第m项的最大公约数是多少？ 输入格式：两个正整数n和m.($n,m\\le 10^9$). 注意:数据很大. 输出格式：Fn和Fm的最大公约数. 由于看了大数字就头晕,所以只要输出最后的8位数字就可以了. 思路:通过打表可以得到一条显然的结论:$gcd(f(n),f(m))=f(gcd(n,m))$. 那么求就vans了.不过数据很大,那么就必须使用矩阵优化了. 所以这是矩阵乘法板子题 求一哈中间矩阵: $\\begin {bmatrix} f(i-1), f(i)\\\\end{bmatrix}=\\begin {bmatrix} f(i-2),f(i-1)\\end{bmatrix}\\times\\begin{bmatrix}0,1\\1,1\\end{bmatrix}$ 最后:不开long long见祖宗! 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;bits/stdc++.h&gt;using namespace std;#define MO 100000000#define ll long longnamespace Gekoo { ll t, p; struct Mat { ll x[3][3]; Mat() { memset(x, 0, sizeof(x)); } inline void build_x () { memset(x, 0, sizeof(x)); for (int i = 1; i &lt;= 2; i++) x[i][i] = 1; } inline void build_A () { memset(x, 0, sizeof(x)); x[1][2] = x[2][1] = x[2][2] = 1; } }x, A; Mat operator * (const Mat &amp;a, const Mat &amp;b) { Mat z; memset(z.x, 0, sizeof(z)); for (int k = 1; k &lt;= 2; k++) for (int i = 1; i &lt;= 2; i++) for (int j = 1; j &lt;= 2; j++) z.x[i][j] += (a.x[i][k] % MO) * (b.x[k][j] % MO), z.x[i][j] %= MO; return z; } Mat qpow (Mat a, ll b) { Mat ans = x; for (; b; b &gt;&gt;= 1) { if (b &amp; 1) ans = ans * A; A = A * A; } return ans; } ll gcd(ll a, ll b) { return (b == 0) ? a : gcd(b, a % b); } void main () { A.build_A(); x.build_x(); scanf(\"%d%d\", &amp;t, &amp;p); Mat ans = qpow(x, gcd(t, p) - 1); printf(\"%d\\n\", (ans.x[1][1] + ans.x[1][2]) % MO); }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p1306/"},{"title":" Luogu P1073 最优贸易","text":"虚假的Dijkstra Luogu P1073 最优贸易题面：题目描述C 国有 n 个大城市和 m 条道路，每条道路连接这 n 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 m 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 1 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 n 个城市的标号从 1~ n，阿龙决定从 1 号城市出发，并最终在 n 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 n 个城市。阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品――水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 现在给出 n 个城市的水晶球价格，m 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式：第一行包含 2 个正整n 和 m ，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 n 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 n 个城市的商品价格。 接下来 m 行，每行有 3 个正整数 x, y, z，每两个整数之间用一个空格隔开。如果 = 1，表示这条道路是城市 x 到城市 y 之间的单向道路；如果 z = 2，表示这条道路为城市 x 和城市 y 之间的双向道路。 输出格式：一个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 0。 数据范围：输入数据保证 1 号城市可以到达 n 号城市。 对于 10% 的数据，1 ≤ n ≤ 6。 对于 30% 的数据，1 ≤ n ≤ 100。 对于 50% 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市。 对于 100% 的数据，1 ≤ n ≤ 100000，1 ≤ m ≤ 500000，1 ≤ x, y ≤ n，1 ≤ z ≤ 2，1 ≤ 各城市 水晶球价格 ≤ 100. 思路:问题转化为求1-n的一条路径使得途径点的最大点权与最小点权的差最大. 建原图和反图，先在正图上跑“Dijkstra”得到1到各点最小值，再在反图上跑“Dijkstra”得到n到各点最大值。 枚举1 - n，维护$ans=max(ans,E[i]-G[i])$. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], g[N &lt;&lt; 1]; int ecnt, gcnt, ehead[N], ghead[N], n, m, p[N], E[N], G[N], ans; bool vis[N]; inline void AddE(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = ehead[f], ehead[f] = ecnt;} inline void AddG(int f, int to) {g[++gcnt].to = to, g[gcnt].nxt = ghead[f], ghead[f] = gcnt;} signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;p[i]); for (int i = 1; i &lt;= m; i++) { int x , y , z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); AddE(x, y); AddG(y, x); if (z == 2) { AddE(y, x); AddG(x, y); } } //Dijkstra memset(vis, 0, sizeof(vis)); memset(E, 0x3f, sizeof(E)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; q; q.push(std::make_pair(-p[1], 1)); E[1] = p[1]; while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = ehead[u]; i; i = e[i].nxt) { int v = e[i].to; E[v] = std::min(E[u], p[v]); q.push(std::make_pair(-E[v], v)); } } memset(G, -0x3f, sizeof(G)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; Q; Q.push(std::make_pair(p[n], n)); G[n] = p[n]; while (!Q.empty()) { int u = Q.top().second; Q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = ghead[u]; i; i = g[i].nxt) { int v = g[i].to; G[v] = std::max(G[u], p[v]); Q.push(std::make_pair(G[v], v)); } } //枚举节点 for (int i = 1; i &lt;= n; i++) ans = std::max(ans, G[i] - E[i]); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/01/luogu-p1073/"},{"title":" Luogu P1313 计算系数\t\t","text":"NOIP最简单的数论题 Luogu P1313 计算系数题面：题目描述给定一个多项式 $ (by+ax)^k $ ,请求出多项式展开后 $x^n \\times y^m $项的系数. 输入格式：共一行,包含5个整数,分别为a,b,k,n,m,每两个整数之间用一个空格隔开. 输出格式：共1行,包含一个整数,表示所求的系数,这个系数可能很大,输出对10007取模后的结果. 数据范围：对于30% 的数据,有0 ≤ k ≤10 ； 对于50%的数据,有a = 1,b = 1； 对于100%的数据,有0 ≤ k ≤ 1,000, 0 ≤ n , m ≤ k,且 n + m = k , 0 ≤ a , b ≤1,000,000. 来自NOIP 2011 TG D2T1. 思路:刺激数论! 根据二项式定理:$ (by + ax)^k =\\Sigma_{r=0}^{k}C^r_n(by)^{k-r}(ax)^r=\\Sigma_{r=0}^{k}C^r_k(a^rb^{k-r})(x^ry^{k-r})$. $ n + m = k$.所以第n项: $(C^n_ka^nb^{m})(x^ny^{m})$. 由组合数的性质:$C^n_ka^nb^{m}=C_k^pa^pb^{k-p},p=min(n,m)$. 最后将问题转化为求$C^p_k\\times a^pb^{k-p}$. $ a^pb^{k-p}$通过快速幂求解. $C^n_k$通过组合数递推公式:$C^m_n=C^m_{n-1}+C^{m-1}_{n-1}$求解. 代码:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;using namespace std;#define MO 10007namespace Gekoo { int a, b, k, n, m, C[1005][1005], p; long long ans; int qpow(int a, int b) { int ans = 1 % MO; for (; b; b &gt;&gt;= 1) { if (b &amp; 1) ans = (ans * a) % MO; a = (a * a) % MO; } return ans; } void QAQ() { scanf(\"%d%d%d%d%d\", &amp;a, &amp;b, &amp;k, &amp;n, &amp;m); p = min(n, m), a %= MO, b %= MO; ans = (qpow(a, n) * qpow(b, m)) % MO; for (int i = 0; i &lt;= k; i++) C[i][0] = C[i][i] = 1; for (int i = 2; i &lt;= k; i++) { for (int j = 1; j &lt;= p; j++) { C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MO; } } ans = (ans * C[k][p]) % MO; printf(\"%lld\\n\",ans); }}int main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p1313/"},{"title":" Luogu P1726 上白泽慧音\t\t","text":"车 万 厨 大 欢 喜 Luogu P1726 上白泽慧音题面：题目描述在幻想乡，上白泽慧音是以知识渊博闻名的老师。春雪异变导致人间之里的很多道路都被大雪堵塞，使有的学生不能顺利地到达慧音所在的村庄。因此慧音决定换一个能够聚集最多人数的村庄作为新的教学地点。人间之里由N个村庄（编号为1..N）和M条道路组成，道路分为两种一种为单向通行的，一种为双向通行的，分别用1和2来标记。如果存在由村庄A到达村庄B的通路，那么我们认为可以从村庄A到达村庄B，记为(A,B)。当(A,B)和(B,A)同时满足时，我们认为A,B是绝对连通的，记为&lt;A,B&gt;。绝对连通区域是指一个村庄的集合，在这个集合中任意两个村庄X,Y都满足&lt;X,Y&gt;。现在你的任务是，找出最大的绝对连通区域，并将这个绝对连通区域的村庄按编号依次输出。若存在两个最大的，输出字典序最小的，比如当存在1,3,4和2,5,6这两个最大连通区域时，输出的是1,3,4。 输入格式：第1行：两个正整数N,M 第2..M+1行：每行三个正整数a,b,t, t = 1表示存在从村庄a到b的单向道路，t = 2表示村庄a,b之间存在双向通行的道路。保证每条道路只出现一次。 输出格式：第1行： 1个整数，表示最大的绝对连通区域包含的村庄个数。 第2行：若干个整数，依次输出最大的绝对连通区域所包含的村庄编号。 数据范围：对于60%的数据：N &lt;= 200且M &lt;= 10,000 对于100%的数据：N &lt;= 5,000且M &lt;= 50,000 思路:求图中最大SCC. 基本就是板子(((( 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;bits/stdc++.h&gt;#define N 50005namespace Gekoo { struct Edge { int to, nxt; } e[N &lt;&lt; 1]; int head[N], dfn[N], low[N], c[N], s[N &lt;&lt; 1], ecnt, n, m, num, p, cnt, ans = 1; bool vis[N]; std::vector &lt;int&gt; scc[N]; void Add(int f, int to) { e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt; } void Tarjan(int x) { dfn[x] = low[x] = ++num; s[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int v = e[i].to; if (!dfn[v]) { Tarjan(v); low[x] = std::min(low[x], low[v]); } else if (vis[v]) { low[x] = std::min(low[x], dfn[v]); } } if (dfn[x] == low[x]) { cnt++; int y; do { y = s[p--], vis[y] = 0; c[y] = cnt; scc[cnt].push_back(y); } while (x != y); } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, t; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;t); Add(a, b); if (t == 2) Add(b, a); } for (int i = 1; i &lt;= n; i++) { if (!dfn[i]) Tarjan(i); } for (int i = 1; i &lt;= cnt; i++) { if (scc[i].size() &gt; scc[ans].size()) ans = i; } printf(\"%d\\n\", (int) scc[ans].size()); std::sort(scc[ans].begin(), scc[ans].end()); for (std::vector&lt;int&gt;::iterator it = scc[ans].begin(); it != scc[ans].end(); ++it) { printf(\"%d \", *it); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/05/luogu-p1726/"},{"title":" Luogu P1967 货车运输\t\t","text":"可怕的普及组 Luogu P1967 货车运输题面：题目描述A国有n座城市,编号从1到n,城市之间有m条双向道路.每一条道路对车辆都有重量限制,简称限重.现在有q辆货车在运输货物,司机们想知道每辆车在不超过车辆限重的情况下,最多能运多重的货物. 输入格式：第一行有两个用一个空格隔开的整数n,m,表示A国有n座城市和m条道路。 接下来m行每行3个整数 x,y,z 每两个整数之间用一个空格隔开,表示从x号城市到y号城市有一条限重为z的道路.注意: x$\\ne$y,两座城市之间可能有多条道路. 接下来一行有一个整数,表示有q辆货车需要运货. 接下来q行,每行两个整数x,y,之间用一个空格隔开,表示一辆货车需要从x城市运输货物到y城市,注意:x$\\ne$y . 输出格式：共有q行,每行一个整数,表示对于每一辆货车,它的最大载重是多少.如果货车不能到达目的地,输出−1. 数据范围：对于30%的数据,0 &lt; n &lt; 1,000, 0 &lt; m &lt; 10,000, 0 &lt; q&lt; 1,000； 对于60%的数据,0 &lt; n &lt; 1,000, 0 &lt; m &lt; 50,000, 0 &lt; q&lt; 1,000； 对于100%的数据,0 &lt; n &lt; 10,000, 0 &lt; m &lt; 50,000, 0 &lt; q&lt; 30,000, 0 ≤ z ≤ 100,000. 思路:这题真难,居然是普及组…(我差点被普及组的题卡了 首先,沟通每个城市之间的道路若想边权最大,必定形成了一棵最大生成树,这个可以通过Kruskal完成.但这题还有一个坑,最后树不一定是一棵,可能是树林. 之后就不用管图了,研究树就行了.沟通两个城市之间的道路可以通过LCA实现,求最大载重就是求这几条边的最大值,通过ST表实现.ST表和LCA的初始化可以放一块进行. 当两个城市不在同一棵树上时,货车无法到达. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include &lt;bits/stdc++.h&gt;using namespace std;#define N 100005namespace Gekoo { inline int read () { int a = 1, b = 0; char c; do{c = getchar(); if (c == '-') a = -1;} while (c &lt; '0' || c &gt; '9'); do{b = b * 10 + c - '0'; c = getchar();} while (c &gt;= '0' &amp;&amp; c &lt;='9'); return a * b; } struct Edge { int from, to, nxt, val; }e[1000005]; struct Tree { int x, y, z; bool operator &lt; (const Tree &amp;x) { return z &gt; x.z; } }t[1000005]; int ecnt, head[N], n, m, fa[N], q, f[N][25], w[N][25], dep[N], tcnt, s; bool vis[N]; void Add_Edge (int f, int to, int v) { e[++ecnt].to = to; e[ecnt].val = v; e[ecnt].nxt = head[f]; head[f] = ecnt; } int Get (int x) { if (x == fa[x]) return x; return fa[x] = Get(fa[x]); } void Tree_data (int u) { vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (!dep[v]) { dep[v] = dep[u] + 1; f[v][0] = u; w[v][0] = e[i].val; Tree_data(v); } } return ; } void init () { for (int j = 1; (1 &lt;&lt; j) &lt;= tcnt; j++) { for (int i = 1; i &lt;=tcnt; i++) { f[i][j] = f[ f[i][j-1] ][j-1]; w[i][j] = min(w[i][j-1], w[ f[i][j-1] ][j-1]); } } } void LCA (int a, int b) { if (Get(a) != Get(b)) { printf(\"-1\\n\"); return ; } int ans = (1 &lt;&lt; 30); if (dep[a] &lt; dep[b]) swap(a, b); int i = 0; for (; (1 &lt;&lt; i) &lt;= dep[a]; i++); for (int j = i; j &gt;= 0; j--) { if (dep[a] - (1 &lt;&lt; j) &gt;= dep[b]){ ans = min(ans, w[a][j]); a = f[a][j]; } } if (a == b) { printf(\"%d\\n\",ans); return ; } for (int j = i; j &gt;= 0; j--) { if (f[a][j] &amp;&amp; f[a][j] != f[b][j]) { ans = min(ans, min(w[a][j], w[b][j])); a = f[a][j], b = f[b][j]; } } ans = min(ans, min(w[a][0], w[b][0])); printf(\"%d\\n\",ans); return ; } void main() { n = read(), m = read(); for (int i = 1; i &lt;=n; i++) { fa[i] = i; } for (int i = 1, x, y, z; i &lt;= m; i++) { x = read(), y = read(), z = read(); t[++tcnt].x = x, t[tcnt].y = y, t[tcnt].z = z; t[++tcnt].x = y, t[tcnt].y = x, t[tcnt].z = z; } //Kruskal sort(t + 1, t + 1 + tcnt); for (int i = 1; i &lt;= tcnt; i++) { int x = t[i].x, y = t[i].y, z = t[i].z; if (Get(x) != Get(y)) { Add_Edge(x, y, z); Add_Edge(y, x, z); fa[Get(x)] = Get(y); } } for (int i = 1; i &lt;= n; i++) { //树林!被坑过一次QAQ if (!vis[i]) { dep[i] = 1; f[1][0] = 1; Tree_data(i); w[i][0] = (1 &lt;&lt; 30); } } init(); q = read(); for (int i = 1; i &lt;= q; i++) { LCA(read(), read()); } }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p1967/"},{"title":" Luogu P1731 生日蛋糕\t\t","text":"搜索 and 超神剪枝 Luogu P1731 生日蛋糕题面：题目描述7月17日是Mr.W的生日，ACM-THU为此要制作一个体积为Nπ的M层 生日蛋糕，每层都是一个圆柱体。 设从下往上数第i(1&lt;=i&lt;=M)层蛋糕是半径为Ri, 高度为Hi的圆柱。当i&lt;M时，要求$R_i&gt;R_{i+1}$ 且$ H_i&gt;H_{i+1} $. 由于要在蛋糕上抹奶油，为尽可能节约经费，我们希望蛋糕外表面（最下一层的下底面除外）的面积Q最小。 令Q= Sπ 请编程对给出的N和M，找出蛋糕的制作方案（适当的Ri和Hi的值），使S最小。 （除Q外，以上所有数据皆为正整数） 输入格式：有两行，第一行为N（N&lt;=20000），表示待制作的蛋糕的体积为Nπ；第二行为M(M&lt;=15)，表示蛋糕的层数为M。 输出格式：仅一行，是一个正整数S（若无解则S=0）。 思路:主体是暴力DFS.主要加了3个剪枝. 体积超过限制后剪枝 表面积超过最优解剪枝 玄(数)学剪枝 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;#define N 25namespace Gekoo { int n, m, r[N], h[N], ans = (1 &lt;&lt; 30); void dfs(int s, int v, int lv) { if (lv == m + 1) { if (v == n) ans = std::min(ans, s + r[1] * r[1]); return ; } if (v &gt; n || s + r[1] * r[1] &gt;= ans) { //体积超出限制 || 表面积超出最优解 return ; } //此题最坑的玄(数)学剪枝 if (2 * (n - v) / r[lv - 1] + s &gt; ans) return ; for (int i = r[lv - 1] - 1; i &gt;= m - lv + 1; i--) { //枚举r for (int j = h[lv - 1] - 1; j &gt;= m - lv + 1; j--) { //枚举h r[lv] = i; h[lv] = j; dfs(s + 2 * i * j, v + i * i * j, lv + 1); r[lv] = 0; h[lv] = 0; } } } void QAQ(){ scanf(\"%d%d\", &amp;n, &amp;m); r[0] = (int) sqrt(n); h[0] = (int) sqrt(n); dfs(0, 0, 1); ans = (ans == (1 &lt;&lt; 30)) ? 0 : ans; printf(\"%d\\n\", ans); }}using namespace Gekoo;signed main() { QAQ(); return 0;}","link":"/2019/02/28/luogu-p1731/"},{"title":" Luogu P1841 [JSOI2007] 重要的城市\t\t","text":"Floyd变种，水题赛T3 Luogu P1841 [JSOI2007] 重要的城市题面：题目描述参加 JSOI 冬令营的同学最近发现，由于南航校内修路截断了原来通向计算中心的路，导致去的路程比原先增加了近一公里。而食堂门前施工虽然也截断了原来通向计算中心的路，却没有使路程增加，因为可以找到同样长度的路作替代。其实，问题的关键在于，路截断的地方是交通要点。 同样的情况也出现在城市间的交通中。某些城市如果出了问题，可能会引起其他很多城市的交通不便。另一些城市则影响不到别的城市的交通。jsoi冬令营的同学发现这是一个有趣的问题，于是决定研究这个问题。 他们认为这样的城市是重要的：如果一个城市c被破坏后，存在两个不同的城市a和b（a, b均不等于c），a到b的最短距离增长了（或不通），则城市c是重要的。 JSOI冬令营的同学面对着一张教练组交给他们的城市间交通图，他们希望能找出所有重要的城市。现在就请你来解决这个问题。 输入格式：第一行两个整数N,M,N为城市数，M为道路数 接下来M行，每行三个整数，表示两个城市之间的无向边，以及之间的路的长度 输出格式：一行，按递增次序输出若干的数，表示重要的城市。 数据范围：30%的数据：N ≤ 20； 60%的数据：N ≤ 100； 100%的数据：N ≤ 200,M ≤ N × (N − 1) / 2, 0 &lt; c ≤ 10000。c即路的长度。 保证不出现重边和自环 如果没有点的话需要输出一行 “No important cities.” 去掉引号 思路:日常翻译： 若u，v最短路上一点去掉后最短路长度改变，则该点为重要点，输出重要点。 N ≤ 200，无脑Floyd（逃 显然在Floyd过程中若进行了一次松弛,则k为f[i][j]对应的一个关键点.若出现f[i][j]=f[i][k]+f[k][j],说明该关键点无效,删去. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;utility&gt;#include &lt;cstdlib&gt;#include &lt;cctype&gt;#include &lt;queue&gt;#define N 205namespace Gekoo { int f[N][N], n, m, imp[N][N]; bool used[N], flg; signed QAQ() { freopen(\"city.in\", \"r\", stdin); freopen(\"city.out\", \"w\", stdout); memset(f, 0x3f, sizeof(f)); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, c; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c); f[a][b] = f[b][a] = std::min(f[a][b], c); } for (int k = 1; k &lt;= n; k++) { for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (i == k || j == i || j == k) continue; if (f[i][j] &gt; f[i][k] + f[k][j]) { f[i][j] = f[i][k] + f[k][j]; imp[i][j] = k; } else if (f[i][j] == f[i][k] + f[k][j]) { imp[i][j] = 0; } } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (imp[i][j]) { flg = 1; used[imp[i][j]] = 1; } } } if (!flg) { puts(\"No important cities.\"); return 0; } for (int i = 1; i &lt;= n; i++) { if (used[i]) printf(\"%d \", i); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/04/luogu-p1841/"},{"title":" Luogu P2024 [NOI2001]食物链\t\t","text":"并查集 Luogu P2024 [NOI2001]食物链题面：题目描述动物王国中有三类动物 A , B , C , 这三类动物的食物链构成了有趣的环形. A 吃 B , B 吃 C , C 吃 A. 现有 N 个动物,以 1 － N 编号.每个动物都是 A , B , C 中的一种,但是我们并不知道 它到底是哪一种. 有人用两种说法对这 N 个动物所构成的食物链关系进行描述: 第一种说法是“1 X Y”，表示 X 和 Y 是同类. 第二种说法是“2 X Y”，表示 X 吃 Y . 此人对 N 个动物,用上述两种说法,一句接一句地说出 K 句话,这 K 句话有的是真 的,有的是假的.当一句话满足下列三条之一时,这句话就是假话,否则就是真话. 当前的话与前面的某些真的话冲突,就是假话 当前的话中 X 或 Y 比 N 大,就是假话 当前的话表示 X 吃 X,就是假话 你的任务是根据给定的 N 和 K 句话,输出假话的总数. 输入格式：第一行两个整数 , N , K , 表示有 N 个动物, K 句话. 第二行开始每行一句话. 输出格式：一行,一个整数,表示假话的总数. 数据范围：1 ≤ N ≤ 5 ∗ 10^4 1 ≤ K ≤ 10^5 思路:事拓展域并查集.将每个动物分成同类食物和敌人三个域. 设每句话第一个数为a, 矛盾的几种情况: $x &gt; n || y &gt; n$ $a = 1,x_{self} = y_{eat}$ $a = 1, x_{eat} = y_{self}$ $a = 2, x_{self} = y_{self}$ $a = 2, x_{self} = y_{eat}$ $a = 2, x = y$ 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;bits/stdc++.h&gt;using namespace std;namespace Gekoo { const int N = 50005; int n, k, fa[N*3], ans;//1~n事同类,n~2n事食物,2n~3n事敌人. int get(int x) { if (x == fa[x]) return x; return fa[x] = get(fa[x]); } void main() { printf(\"%d%d\", &amp;n, &amp;k); for(int i = 1; i &lt;= n * 3; i++) { fa[i] = i; } for(int i = 1; i &lt;= k; i++) { int a, x, y; scanf(\"%d%d%d\", &amp;a, &amp;x, &amp;y); if (x &gt; n || y &gt; n) { ++ans; continue; } int x_self = x, x_eat = x + n, x_enemy = x + 2 * n; int y_self = y, y_eat = y + n, y_enemy = y + 2 * n; if (a == 1) { if (get(x_self) == get(y_eat) || get(x_eat) == get(y_self)) { ++ans; continue; } else { fa[get(x_self)] = get(y_self); fa[get(x_eat)] = get(y_eat); fa[get(x_enemy)] = get(y_enemy); } } else { if (get(x_self) == get(y_self) || get(x_self) == get(y_eat) || x == y) { ++ans; continue; } else { fa[get(x_self)] = get(y_enemy); fa[get(x_eat)] = get(y_self); fa[get(x_enemy)] = get(y_eat); } } } printf(\"%d\\n\", ans); }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p2024/"},{"title":" Luogu P2272 [ZJOI2007]最大半连通子图\t\t","text":"Tarjan总是和DAGDP紧密结合呢 Luogu P2272 [ZJOI2007]最大半连通子图题面：题目描述一个有向图G=(V,E)称为半连通的(Semi-Connected)，如果满足：?u,v∈V，满足u→v或v→u，即对于图中任意两点u，v,存在一条u到v的有向路径或者从v到u的有向路径。若G’=(V’,E’)满足V’?V，E’是E中所有跟V’有关的边，则称G’是G的一个导出子图。若G’是G的导出子图，且G’半连通，则称G’为G的半连通子图。若G’是G所有半连通子图中包含节点数最多的，则称G’是G的最大半连通子图。给定一个有向图G，请求出G的最大半连通子图拥有的节点数K，以及不同的最大半连通子图的数目C。由于C可能比较大，仅要求输出C对X的余数。 输入格式：第一行包含两个整数N，M，X。N，M分别表示图G的点数与边数，X的意义如上文所述接下来M行，每行两个正整数a, b，表示一条有向边(a, b)。图中的每个点将编号为1,2,3…N，保证输入中同一个(a,b)不会出现两次。 输出格式：应包含两行，第一行包含一个整数K。第二行包含整数C Mod X. 数据范围：对于100%的数据，$N \\le 100000, M \\le 1000000, X \\le 10^8$ 思路:简化题意:给定一个有向图，若u，v两点，只要u-v可达或者v-u可达，则称u，v半联通.求半联通子图中点数最多的个数和方案数. 显然又是DAGDP…先跑Tarjan缩点,记录一下每个连通块的大小,再拓扑跑DP. 问题主要在第二问,缩点会有重边,势必会影响方案数统计.所以要去重边. 如何去重? 开一边集数组,先记录所有缩点后的边,再按起始点sort一下.建图时检查一下,如果E[i].from == E[i - 1].from &amp;&amp; E[i].to == E[i - 1].to,说明为重边,直接continue. 其他没什么了. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;bits/stdc++.h&gt;#define M 1000005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; struct EdgeC { int from, to; bool operator &lt;(const EdgeC &amp;a) const { return (from == a.from) ? to &lt; a.to : from &lt; a.from; } }EDGE[N]; int ecnt, ccnt, head[N], hc[N], p, n, m, MO, num, scc, cnt, t, ans = -114514, ans2; int stack[N], dfn[N], low[N], id[N], ind[N], val[N], f[N], g[N]; bool ins[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, ins[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], ins[y] = 0; id[y] = cnt; val[cnt]++; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; for (int i = 1; i &lt;= cnt; i++) if (!ind[i]) q.push(i), f[i] = val[i], g[i] = 1; while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (f[v] &lt; f[u] + val[v]) { f[v] = f[u] + val[v]; g[v] = g[u]; } else if (f[v] == f[u] + val[v]) { g[v] = (g[v] + g[u]) % MO; } if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) if (f[i] &gt; ans) ans = f[i]; for (int i = 1; i &lt;= cnt; i++) if (f[i] == ans) ans2 = (ans2 + g[i]) % MO; } signed QAQ() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;MO); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt;= n; x++) { for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] != id[y]) EDGE[++t].from = id[x], EDGE[t].to = id[y]; } } std::sort(EDGE + 1, EDGE + t + 1); for (int i = 1; i &lt;= t; i++) { if (EDGE[i].from == EDGE[i - 1].from &amp;&amp; EDGE[i].to == EDGE[i - 1].to) continue; AddC(EDGE[i].from, EDGE[i].to), ++ind[EDGE[i].to]; } TopSort(); printf(\"%d\\n%d\\n\", ans, ans2); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p2272/"},{"title":" Luogu P2055 [ZJOI2009]假期的宿舍\t\t","text":"二分图求最大匹配 Luogu P2055 [ZJOI2009]假期的宿舍题面：题目:学校放假了 · · · · · · 有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。 比如 A 和 B 都是学校的学生，A 要回家，而 C 来看B，C 与 A 不认识。我们假设每个人只能睡和自己直接认识的人的床。那么一个解决方案就是 B 睡 A 的床而 C 睡 B 的床。而实际情况可能非常复杂，有的人可能认识好多在校学生，在校学生之间也不一定都互相认识。 我们已知一共有 n 个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。 输入格式：第一行一个数 T 表示数据组数。接下来 T 组数据，每组数据第一行一个数n 表示涉及到的总人数。 接下来一行 n 个数，第 i 个数表示第 i 个人是否是在校学生 (0 表示不是，1 表示是)。再接下来一行 n 个数，第 i 个数表示第 i 个人是否回家 (0 表示不回家，1 表示回家，注意如果第 i 个人不是在校学生，那么这个位置上的数是一个随机的数，你应该在读入以后忽略它)。 接下来 n 行每行 n 个数，第 i 行第 j 个数表示 i 和 j 是否认识 (1 表示认识，0 表示不认识，第 i 行 i 个的值为 0，但是显然自己还是可以睡自己的床)，认识的关系是相互的。 输出格式：对于每组数据，如果存在一个方案则输出 “^_^”(不含引号) 否则输出“T_T”(不含引号)。(注意输出的都是半角字符，即三个符号的 ASCII 码分别为94,84,95) 数据范围：对于 30% 的数据满足 1 ≤ n ≤ 12。 对于 100% 的数据满足 1 ≤ n ≤ 50,1 ≤ T ≤ 20。 思路:很明显,一个学生睡一张床就是二分图匹配. 先读入学生是不是本校学生,在不在家和学生之间的关系. 如果学生是本校学生且不在家,他就可以睡自己的床,连一下自己. 如果i认识j,j是本校生,i就可以睡j的床,连一下i,j.好混乱 然后统计一下有多少人要住宿舍,跑一下匈牙利,看看最大匹配数是不是等于住宿舍人数. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define N 105namespace Gekoo { struct Edge {int to, nxt;} e[N]; int n, T, need, mth; int head[N], ecnt = 1, Home[N], School[N], match[N]; bool vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} bool dfs(int u) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (!vis[v]) { vis[v] = 1; if (!match[v] || dfs(match[v])) { match[v] = u; return 1; } } } return 0; } signed QAQ() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;School[i]); for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;Home[i]); if (!Home[i] &amp;&amp; School[i]) Add(i, i); } for (int i = 1, x; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { scanf(\"%d\", &amp;x); if (x &amp;&amp; School[j]) Add(i, j); } } for (int i = 1; i &lt;= n; i++) { if ((!Home[i] &amp;&amp; School[i]) || !School[i]) { need++; memset(vis, 0, sizeof(vis)); if (dfs(i)) mth++; } } if (mth == need) printf(\"^_^\\n\"); else printf(\"T_T\\n\"); memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); memset(School, 0, sizeof(School)); memset(Home, 0, sizeof(Home)); memset(match, 0, sizeof(match)); need = mth = ecnt = 0; } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/14/luogu-p2055/"},{"title":" Luogu P2051 [AHOI2009] 中国象棋\t\t","text":"DP Luogu P2051 [AHOI2009] 中国象棋题面：题目描述这次小可可想解决的难题和中国象棋有关，在一个N行M列的棋盘上，让你放若干个炮（可以是0个），使得没有一个炮可以攻击到另一个炮，请问有多少种放置方法。大家肯定很清楚，在中国象棋中炮的行走方式是：一个炮攻击到另一个炮，当且仅当它们在同一行或同一列中，且它们之间恰好 有一个棋子。你也来和小可可一起锻炼一下思维吧！ 输入格式：一行包含两个整数N，M，之间由一个空格隔开。 输出格式：总共的方案数，由于该值可能很大，只需给出方案数模9999973的结果。 数据范围：100%的数据中N和M均不超过100 50%的数据中N和M至少有一个数不超过8 30%的数据中N和M均不超过6 思路:把题面翻译成人话:n*n的棋盘，每行每列最多放两枚棋子,求方案数. 可以用$f[i][j][k]$来描述在前i行j列有1个棋子,k列有2个棋子. 接下来对放棋进行分类讨论. Ⅰ.不放棋.直接继承上一次的方案数.显然可得:$f[i][j][k]+=f[i-1][j][k]$. Ⅱ.放一枚棋.①.放在有一枚棋子的一列.放置棋子后会使j减少1,k增加1,这种方案共有$ j-1$种,因此可以得到: $f[i][j][k]+=f[i-1][j+1][k-1]\\times (j+1)$. ②.放在没有棋子的一列.放置棋子后会使j增加1,k不变,这种方案共有$(m-(j-1)-k)$种.因此可以得到: $f[i][j][k] += f[i - 1][j - 1][k] \\times (m - j - k + 1)$. Ⅲ.放两枚棋.①.都放在有一枚棋子的两列.放置棋子后会使j减少2,k增加2. 而显然,这种方案数为$C^2_{j+2}$.化简该式,$C^2_{j+2}=\\frac{(j+2)!}{2!\\times j!}=\\frac{j!\\times (j+1)\\times (j +2)}{2!\\times j!}=\\frac{(j+1)(j+2)}{2}$. 可得:$ f[i][j][k] += f[i - 1][j + 2][k - 2] \\times (j + 2) \\times (j + 1) / 2$ ②.都放在没有棋子的两列.放置后会使j增加2,k不变.而这种方案数也是很显然的,为$C^2_{m-(j-2)-k}$. 化简该式:$C^2_{m-(j-2)-k}=\\frac{(m-j-k+2)!}{2!\\times (m-j-k)!}=\\frac{(m-j-k)!\\times (m-j-k+1)\\times (m-j-k+2)}{2!\\times(m-j-k)!}=\\frac{(m-j-k+1)\\times (m-j-k+2)}{2}$. 可得:$ f[i][j][k] += f[i - 1][j - 2][k] \\times (m - j - k + 1) \\times (m - j - k + 2) / 2$ ③.分别放在有一枚棋子和没有棋子两列.放置棋子在有棋子列后会使j减少1,k增加1,放置棋子在无棋子列后会使j增加1,k不变.最终其实j没有改变,只是k增加了1. 根据乘法原理,方案数显然,为$[m-j-(k-1)]\\times j$种. 可得:$ f[i][j][k] += f[i - 1][j][k - 1] \\times (m - j - k + 1) \\times j $. 最后统计答案,这道题就结束了. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;#define N 105#define MO 9999973#define ll long longnamespace Gekoo { int n, m; ll f[N][N][N], ans;//f[行][有几列放了1个棋子][有几列放了两个棋子] void QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); f[0][0][0] = 1; for (int i = 1; i &lt;= n; i++) { for (int j = 0; j &lt;= m; j++) { for (int k = 0; k &lt;= m - j; k++) { //下棋时分三种情况. //1.放0个棋子 (f[i][j][k] += f[i - 1][j][k]) %= MO;//直接加上之前的 //2.放1个棋子 if (k &gt;= 1) (f[i][j][k] += f[i - 1][j + 1][k - 1] * (j + 1)) %= MO;//(1)放在有棋子的一列 if (j &gt;= 1) (f[i][j][k] += f[i - 1][j - 1][k] * (m - j - k + 1)) %= MO;//(2)放在没棋子的一列 //3.2个棋子 if (j &gt;= 2) (f[i][j][k] += f[i - 1][j - 2][k] * (m - j - k + 1) * (m - j - k + 2) / 2) %= MO;//(1)0 and 0 if (k &gt;= 1) (f[i][j][k] += f[i - 1][j][k - 1] * (m - j - k + 1) * j) %= MO;//(2)0 and 1 if (k &gt;= 2) (f[i][j][k] += f[i - 1][j + 2][k - 2] * (j + 2) * (j + 1) / 2) %= MO;//(3)1 and 1 } } } for (int j = 0; j &lt;= m; j++) { for (int k = 0; k &lt;= m; k++) { (ans += f[n][j][k]) %= MO; } } printf(\"%lld\\n\", (ans + MO) % MO); }}using namespace Gekoo;signed main() { QAQ(); return 0;}","link":"/2019/02/28/luogu-p2051/"},{"title":"Luogu P2746 [USACO5.3]校园网Network of Schools\t\t","text":"缩点ning干 P2746 [USACO5.3]校园网Network of Schools题面：题目:一些学校连入一个电脑网络。那些学校已订立了协议：每个学校都会给其它的一些学校分发软件（称作“接受学校”）。注意即使 B 在 A 学校的分发列表中， A 也不一定在 B 学校的列表中。 你要写一个程序计算，根据协议，为了让网络中所有的学校都用上新软件，必须接受新软件副本的最少学校数目（子任务 A）。更进一步，我们想要确定通过给任意一个学校发送新软件，这个软件就会分发到网络中的所有学校。为了完成这个任务，我们可能必须扩展接收学校列表，使其加入新成员。计算最少需要增加几个扩展，使得不论我们给哪个学校发送新软件，它都会到达其余所有的学校（子任务 B）。一个扩展就是在一个学校的接收学校列表中引入一个新成员。 输入格式：输入文件的第一行包括一个整数 N：网络中的学校数目（2 &lt;= N &lt;= 100）。学校用前 N 个正整数标识。 接下来 N 行中每行都表示一个接收学校列表（分发列表）。第 i+1 行包括学校 i 的接收学校的标识符。每个列表用 0 结束。空列表只用一个 0 表示。 输出格式：你的程序应该在输出文件中输出两行。 第一行应该包括一个正整数：子任务 A 的解。 第二行应该包括子任务 B 的解。 数据范围：n &lt;= 100 思路:缩点ning干(逃 先缩点,记录一下入度和出度.显然,问题A的答案就是入度为0的点的个数. 问题B的答案也比较显然,是入度为0和出度为0的点的个数的较大值. 注意特判,当缩成只有一个点的时候问题B答案为0. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;bits/stdc++.h&gt;#define N 5000005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; int ecnt, ccnt, hc[N], head[N], ind[N], outd[N], n, Aans, Bans; int dfn[N], low[N], s[N], id[N], num, p, cnt; bool vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; s[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = s[p--], vis[y] = 0; id[y] = cnt; } while (x != y); } } signed QAQ() { //Input scanf(\"%d\", &amp;n); for (int u = 1, v; u &lt;= n; u++) { while (1) { scanf(\"%d\", &amp;v); if (!v) break; Add(u, v); } } //Shrink for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (id[u] == id[v]) continue; AddC(id[u], id[v]); ind[id[v]]++, outd[id[u]]++; } } //Task A for (int i = 1; i &lt;= cnt; i++) if (!ind[i]) Aans++; //Task B for (int i = 1; i &lt;= cnt; i++) if (!outd[i]) Bans++; Bans = std::max(Bans, Aans); if (cnt == 1) Bans = 0; //Output printf(\"%d\\n%d\\n\", Aans, Bans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/07/luogu-p2746/"},{"title":"Luogu P2709 小B的询问","text":"莫队模板题 Luogu P2709 小B的询问题面：题目描述小B有一个序列，包含N个1~K之间的整数。他一共有M个询问，每个询问给定一个区间[L..R]，求$Sigma(c(i)^2)$的值,其中i的值从1到K，其中c(i)表示数字i在[L..R]中的重复次数。小B请你帮助他回答询问。 输入格式：第一行，三个整数N、M、K。 第二行，N个整数，表示小B的序列。 接下来的M行，每行两个整数L、R。 输出格式：M行，每行一个整数，其中第i行的整数表示第i个询问的答案。 数据范围：对于全部的数据，1&lt;=N、M、K&lt;=50000 思路:询问一个区间每个数字重复次数的平方和,首先大分块肯定可做,但比较麻烦… 这时我们就可以学习一种你没有学过的船新算法:莫队算法 主要思想就是将询问保存并排序,通过移动左右端点维护询问.当我们解决了一个询问后,我们就移动它的左右端点使它成为下一个询问,在移动的过程中维护答案. 合理的排序可以让我们的复杂度更加优秀.移动的越少,跑得就越像HK记者. 为了控制移动的距离,我们使用分块优化.如果左端点属于同一块就按右端点排序,否则按左端点排序.最终的莫队算法复杂度是$O(n\\sqrt n)$. 关于维护,由完全平方公式可得,只需要加减$2 \\times c(i) + 1$. 总的来说,莫队可以解决许多区间维护问题而且比分块更好写. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;#define ll long long#define N 50000 + 233struct Node {int l, r, id;} nd[N];int n, m, k, block, a[N], pos[N];ll tmp, cnt[N], ans[N];bool cmp(const Node &amp;a, const Node &amp;b) { return (pos[a.l] == pos[b.l]) ? a.r &lt; b.r : a.l &lt; b.l;}signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", a + i); for (int i = 1; i &lt;= m; i++) { scanf(\"%d%d\", &amp;nd[i].l, &amp;nd[i].r); nd[i].id = i; } block = (int) sqrt(n); for (int i = 1; i &lt;= n; i++) pos[i] = (i - 1) / block + 1; std::sort(nd + 1, nd + 1 + m, cmp); for (int i = 1, l = 1, r = 0; i &lt;= m; i++) { while (l &gt; nd[i].l) { l--; tmp += 2 * cnt[a[l]] + 1; cnt[a[l]]++; } while (r &lt; nd[i].r) { r++; tmp += 2 * cnt[a[r]] + 1; cnt[a[r]]++; } while (l &lt; nd[i].l) { tmp -= 2 * cnt[a[l]] - 1; cnt[a[l]]--; l++; } while (r &gt; nd[i].r) { tmp -= 2 * cnt[a[r]] - 1; cnt[a[r]]--; r--; } ans[nd[i].id] = tmp; } for (int i = 1; i &lt;= m; i++) printf(\"%lld\\n\", ans[i]); return 0;}","link":"/2019/05/08/luogu-p2709/"},{"title":" Luogu P2880 Balanced Lineup\t\t","text":"ST表 Luogu P2880 Balanced Lineup题面：题目描述每天,农夫 John 的N(1 &lt;= N &lt;= 50,000)头牛总是按同一序列排队. 有一天, John 决定让一些牛们玩一场飞盘比赛. 他准备找一群在对列中为置连续的牛来进行比赛. 但是为了避免水平悬殊,牛的身高不应该相差太大. John 准备了Q (1 &lt;= Q &lt;= 180,000) 个可能的牛的选择和所有牛的身高 (1 &lt;= 身高 &lt;= 1,000,000). 他想知道每一组里面最高和最低的牛的身高差别. 输入格式：第1行：N,Q 第2到N+1行：每头牛的身高 第N+2到N+Q+1行：两个整数A和B，表示从A到B的所有牛。（1&lt;=A&lt;=B&lt;=N） 输出格式：输出每行一个数，为最大数与最小数的差 思路:开两个数组f和g，分别存最大值和最小值就行了 蓝题++这怎么是蓝题的 代码:123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;using namespace std;#define N 50005#define r(x) x=read();inline int read(){ int a=1,b=0;char c; do{c=getchar();if(c=='-') a=-1;}while(c&lt;'0'||c&gt;'9'); do{b=b*10+c-'0';c=getchar();}while(c&gt;='0'&amp;&amp;c&lt;='9'); return a*b;}int n,q,a[N],f[N][25],g[N][25];void ST_pre(){ for(int i=1;i&lt;=n;i++) f[i][0]=g[i][0]=a[i]; int t=log2(n)+1; for(int j=1;j&lt;t;j++){ for(int i=1;i&lt;=n-(1&lt;&lt;j)+1;i++){ f[i][j]=max(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]); g[i][j]=min(g[i][j-1],g[i+(1&lt;&lt;(j-1))][j-1]); } }}int ST_q(int l,int r){ int t=log2(r-l+1); return max(f[l][t],f[r-(1&lt;&lt;t)+1][t])-min(g[l][t],g[r-(1&lt;&lt;t)+1][t]);}int main(){ r(n);r(q); for(int i=1;i&lt;=n;i++){ r(a[i]); } ST_pre(); for(int i=1,a,b;i&lt;=q;i++){ r(a);r(b); printf(\"%d\\n\",ST_q(a,b)); } return 0;}","link":"/2019/02/28/luogu-p2880/"},{"title":" Luogu P2783 有机化学之神偶尔会做作弊\t\t","text":"郭老师强力推荐 Luogu P2783 有机化学之神偶尔会做作弊题面：题目:XS中学化学竞赛组教练是一个酷爱炉石的人。 有一天他一边搓炉石一边监考，而你作为一个信息竞赛的大神也来凑热闹。 然而你的化竞基友却向你求助了。 “第1354题怎么做”&lt;–手语 他问道。 你翻到那一题：给定一个烃，只含有单键（给初中生的一个理解性解释：就是一堆碳用横线连起来，横线都是单条的）。 然后炎魔之王拉格纳罗斯用他的火焰净化了一切环（？？？）。所有的环状碳都变成了一个碳。如图所示。 然后指定多组碳，求出它们之间总共有多少碳。如图所示（和上图没有关系）。 但是因为在考试，所以你只能把这个答案用手语告诉你的基友。你决定用二进制来表示最后的答案。 输入格式：第一行两个整数n,m.表示有n个点，m根键 接下来m行每行两个整数u，v表示u号碳和v号碳有一根键 接下来一个整数tot表示询问次数 接下来tot行每行两个整数，a,b表示询问的两个碳的编号 输出格式：共tot行 每行一个二进制数 数据范围：1&lt;n&lt;=10000,1&lt;m&lt;=50000 （两个碳不成环） 思路:题意翻译:给一无向图,去掉所有的环,求两点树上距离. 去掉环很简单,跑一遍Tarjan缩掉边双即可. 很简单? 不!QAQ 踩了个巨坑:我第一次是用LYD的写法缩边双的,然后: 就WA了 就WA了 就WA了 第一版写法: 12345678910111213141516171819202122void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y, i); low[x] = std::min(low[x], low[y]); if (low[y] &gt; dfn[x]) bridge[i] = bridge[i ^ 1] = 1; } else if (i != (fa ^ 1)) low[x] = std::min(low[x], dfn[y]); }}void dfs(int x) { id[x] = cnt; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[y] || bridge[i]) continue; dfs(y); }} 更改为郭老师写法就畅快AC: 12345678910111213141516171819void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { if(y == fa) continue; Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++cnt; int y; do { y = stack[p--]; id[y] = cnt; } while (x != y); }} 原因未知….引以为戒QAQ 求树上距离是很简单的.如下图的树: 比如说我们要求12和13之间的距离,可以先跑一次树链剖分,求出12和13的深度. 显然,12与13之间的距离就等于dep[12] + dep[13] - 2 * dep[3] + 1. 任意两点x, y在树上的距离就是:dep[x] + dep[y] - 2 * dep[LCA] + 1. 二进制随便写个函数输出一下就行了 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;bits/stdc++.h&gt;#define N 50005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int n, m, s; int ecnt = 1, head[N], ccnt = 1, hc[N], cnt, ask; int dep[N], fa[N], siz[N], son[N], tp[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} int dfn[N], low[N], stack[N], id[N], root, p, num; bool bridge[N &lt;&lt; 1]; void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if(y == fa) continue; if (!dfn[y]) { Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++cnt; int y; do { y = stack[p--]; id[y] = cnt; } while (x != y); } } void dfs1(int u) { siz[u] = 1; for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (dep[v]) continue; dep[v] = dep[u] + 1, fa[v] = u; dfs1(v); siz[u] += siz[v]; if (!son[u] || siz[son[u]] &lt; siz[v]) son[u] = v; } } void dfs2(int u, int t) { tp[u] = t; if (!son[u]) return; dfs2(son[u], t); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (v == fa[u]) continue; if (v != son[u]) dfs2(v, v); } } void Write(int x) { int a[1005] = {}, pt = 0; do { a[++pt] = (x &amp; 1); x &gt;&gt;= 1; }while (x != 0); for (int i = pt; i &gt;= 1; i--) printf(\"%d\", a[i]); puts(\"\"); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); Add(x, y), Add(y, x); } scanf(\"%d\", &amp;ask); for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i, 0); for (int i = 2; i &lt;= ecnt; i++) { int x = e[i ^ 1].to, y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); } dep[1] = 1; dfs1(1), dfs2(1, 1); for (int i = 1, a, b; i &lt;= ask; i++) { scanf(\"%d%d\", &amp;a, &amp;b); a = id[a], b = id[b]; int ans = 0; ans += dep[a] + dep[b]; while (tp[a] != tp[b]) { if (dep[tp[a]] &lt; dep[tp[b]]) b = fa[tp[b]]; else a = fa[tp[a]]; } ans -= 2 * std::min(dep[a], dep[b]) - 1; Write(ans); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/12/luogu-p2783/"},{"title":" Luogu P3166 [CQOI2014]数三角形\t\t","text":"喜闻乐见的数学题 Luogu P3166 [CQOI2014]数三角形题面：题目描述给定一个$n \\times m$的网格，请计算三点都在格点上的三角形共有多少个。注意三角形的三点不能共线。 输入格式：输入一行，包含两个空格分隔的正整数m和n。 输出格式：输出一个正整数，为所求三角形数量。 数据范围：1&lt;=m,n&lt;=1000 思路:$n\\times m$的网格中共有$(n+1)(m+1)$个点,其中选3个点的方法数共有$C_{(n + 1)(m + 1)}^3$种.为构成三角形,须除去三点共线的情况.横向和纵向共线数很显然,为$mC_{n+1}^3+nC_{m+1}^3$种.而斜向就比较复杂. 首先,斜向共有两个方向,我们只研究一个就行,将结果×2. 然后仔细思考可以发现每条落在格点上的直线必然是由最短的一条线段延伸,设这条线段的端点为(0,0),(x,y),xy必然互素.而之后直线在格点上的点的横纵坐标必然为(kx,ky).稍加整理后显然可得斜向共线情况数为: $\\sum_{i=1}^m\\sum_{j=1}^n(gcd(i,j)-1)\\times(m-i+1)\\times(n-j+1)\\times 2$. 最终,$ans=C_{(n + 1)(m + 1)}^3-mC_{n+1}^3-nC_{m+1}^3-\\sum_{i=1}^m\\sum_{j=1}^n(gcd(i,j)-1)\\times(m-i+1)\\times(n-j+1)\\times 2$ 代码:12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;#define ll long longnamespace Gekoo { int m, n; ll ans; ll C(int n, int m) { ll ret = 1; for (int i = 1; i &lt;= m; i++) ret = ret * (ll) (n - m + i) / i; return ret; } inline int GCD(int a, int b) {return b == 0 ? a : GCD(b, a % b);} void QAQ() { scanf(\"%d%d\", &amp;m, &amp;n); ans = C((m + 1) * (n + 1), 3) - (n + 1) * C((m + 1), 3) - (m + 1) * C((n + 1), 3); for (int i = 1; i &lt;= m; i++) { for (int j = 1; j &lt;= n; j++) { ans -= (ll) (GCD(i, j) - 1) * (m - i + 1) * (n - j + 1) * 2; } } printf(\"%lld\\n\", ans); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p3166/"},{"title":" Luogu P2860 [USACO06JAN]冗余路径Redundant Paths\t\t","text":"Tarjan水题 Luogu P2860 [USACO06JAN]冗余路径Redundant Paths题面：题目:为了从F(1≤F≤5000)个草场中的一个走到另一个，贝茜和她的同伴们有时不得不路过一些她们讨厌的可怕的树．奶牛们已经厌倦了被迫走某一条路，所以她们想建一些新路，使每一对草场之间都会至少有两条相互分离的路径，这样她们就有多一些选择． 每对草场之间已经有至少一条路径．给出所有R(F-1≤R≤10000)条双向路的描述，每条路连接了两个不同的草场，请计算最少的新建道路的数量, 路径由若干道路首尾相连而成．两条路径相互分离，是指两条路径没有一条重合的道路．但是，两条分离的路径上可以有一些相同的草场． 对于同一对草场之间，可能已经有两条不同的道路，你也可以在它们之间再建一条道路，作为另一条不同的道路． 输入格式：第一行两个整数 f, r. 接下来r行每行两个整数u，v表示u到v有边. 输出格式：输出一个数tot,为修建道路数. 思路:显然,一个边双内必然有两条不同的道路.(可以从两边绕嘛) 于是就先缩点ning干.我们就要添加最少边使整个图变成边双. 我们可以发现把叶子节点连起来就行.所以连边数为叶子节点数/2向上取整. 另:此题有重边.因为数据范围小,我直接开了个bool数组((( 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int n, m; int head[N], ecnt = 1, hc[N], ccnt = 1, deg[N], ans; bool vis[5002][5002]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} int dfn[N], low[N], stack[N], id[N], p, num, dcc; void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (y == fa) continue; if (!dfn[y]) { Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++dcc; int y; do { y = stack[p--]; id[y] = dcc; } while(x != y); } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); if (vis[x][y]) continue; vis[x][y] = vis[y][x] = 1; Add(x, y), Add(y, x); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i, 0); for (int i = 2; i &lt;= ecnt; i += 2) { int x = e[i ^ 1].to, y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); deg[id[x]]++, deg[id[y]]++; } for (int i = 1; i &lt;= dcc; i++) if (deg[i] == 1) ans++; printf(\"%d\\n\", (ans + 1) &gt;&gt; 1); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/13/luogu-p2860/"},{"title":" Luogu P3275 [SCOI2011]糖果\t\t","text":"差分约束 Luogu P3275 [SOI2011]糖果题面：题目描述幼儿园里有 N 个小朋友，lxhgww 老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不希望小红分到的糖果比他的多，于是在分配糖果的时候，lxhgww 需要满足小朋友们的 K 个要求。幼儿园的糖果总是有限的，lxhgww 想知道他至少需要准备多少个糖果，才能使得每个小朋友都能够分到糖果，并且满足小朋友们所有的要求。 输入格式：输入的第一行是两个整数 N，K。接下来 K 行，表示这些点需要满足的关系，每行 3 个数字，X，A，B。 如果 X=1， 表示第 A 个小朋友分到的糖果必须和第 B 个小朋友分到的糖果一样多； 如果 X=2， 表示第 A 个小朋友分到的糖果必须少于第 B 个小朋友分到的糖果； 如果 X=3， 表示第 A 个小朋友分到的糖果必须不少于第 B 个小朋友分到的糖果； 如果 X=4， 表示第 A 个小朋友分到的糖果必须多于第 B 个小朋友分到的糖果； 如果 X=5， 表示第 A 个小朋友分到的糖果必须不多于第 B 个小朋友分到的糖果； 输出格式：输出一行，表示 lxhgww 老师至少需要准备的糖果数，如果不能满足小朋友们的所有要求，就输出 -1。 数据范围：对于 30% 的数据，保证 N≤100 对于 100% 的数据，保证 N≤100000 对于所有的数据，保证 K≤100000,1≤X≤5,1≤A,B≤N 思路:事一道差分约束。 差分约束就是把形如$a - b \\le x$的不等式组通过三角形不等式，用SPFA等算法解决问题。 分类讨论： x = 1: $a = b$.等价于 $a - b \\le 0 \\&amp;\\&amp; b - a \\le 0$. 建边(a, b, 0),(b, a, 0). x = 2: $a &lt; b$.由于差分约束的要求，转化为$a - b \\le 1$. 建边(a, b, 1). x = 3: $b \\le a$.转化为 $b - a \\le 0$. 建边(b, a, 0). * x = 4: $a &gt; b$.由于差分约束的要求，转化为$b - a \\le 1$.建边(b, a, 1). x = 5: $a \\le b$.转化为$a - b \\le 0$.建边(a, b, 0). 注意几个点： 读入时特判一下自相矛盾的情况. 数据歹毒,从0建边时反着建可有效防止T飞 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt, val;} e[N]; int ecnt, head[N], n, k, dis[N]; long long ans; bool vis[N]; inline void Add(int f, int to, int val) {e[++ecnt].to = to, e[ecnt].val = val, e[ecnt].nxt = head[f], head[f] = ecnt;} bool SPFA(int u) { vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (dis[v] &lt; dis[u] + val) { dis[v] = dis[u] + val; if (vis[v] || !SPFA(v)) return 0; } } vis[u] = 0; return 1; } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;k); for (int i = 1; i &lt;= k; i++) { int x, a, b; scanf(\"%d%d%d\", &amp;x, &amp;a, &amp;b); switch (x) { case 1: Add(a, b, 0); Add(b, a, 0); break; case 2: if (a == b) return !puts(\"-1\"); else Add(a, b, 1); break; case 3: Add(b, a, 0); break; case 4: if (a == b) return !puts(\"-1\"); else Add(b, a, 1); break; default : Add(a, b, 0); break; } } for (int i = n; i &gt;= 1; i--) Add(0, i, 1); dis[0] = 0; if (SPFA(0)) { for (int i = 1; i &lt;= n; i++) ans += dis[i]; return !printf(\"%lld\\n\", ans); } else return !puts(\"-1\"); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/05/luogu-p3275/"},{"title":" Luogu P3387 【模板】缩点\t\t","text":"为什么缩点模板还有DAGDP(半恼 Luogu P3387 【模板】缩点题面：题目:给定一个n个点m条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。 允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。 输入格式：第一行，n,m 第二行，n个整数，依次代表点权 第三至m+2行，每行两个整数u,v，表示u-&gt;v有一条有向边 输出格式：共一行，最大的点权之和。 数据范围：n&lt;=10^4,m&lt;=10^5,点权&lt;=1000 思路:首先先求出scc,之后缩点 (缩点板子要缩点不是显然 缩点后可以得到一个DAG,求最大点权的转移方程显然:f[v] = max(f[v], f[u] + val[v]). 但是有后效性.为了解决后效性,进行一次拓扑排序,在拓扑排序过程中DP. 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, n, m, num, scc, cnt, ans = -114514; int stack[N], dfn[N], low[N], id[N], ind[N], pv[N], val[N], f[N]; bool bridge[N], vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], vis[y] = 0; id[y] = cnt; val[cnt] += pv[y]; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; for (int i = 1; i &lt;= cnt; i++) if(!ind[i]) f[i] = val[i], q.push(i); while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; f[v] = std::max(f[v], f[u] + val[v]); if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) ans = std::max(ans, f[i]); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;pv[i]); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt;= n; x++) { for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); ind[id[y]]++; } } TopSort(); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/07/luogu-p3387/"},{"title":" Luogu P3225 [HNOI2012]矿场搭建\t\t","text":"调了好久QAQ Luogu P3225 [HNOI2012]矿场搭建题面：题目描述煤矿工地可以看成是由隧道连接挖煤点组成的无向图。为安全起见，希望在工地发生事故时所有挖煤点的工人都能有一条出路逃到救援出口处。于是矿主决定在某些挖煤点设立救援出口，使得无论哪一个挖煤点坍塌之后，其他挖煤点的工人都有一条道路通向救援出口。 请写一个程序，用来计算至少需要设置几个救援出口，以及不同最少救援出口的设置方案总数。 输入格式：输入文件有若干组数据，每组数据的第一行是一个正整数 N（N&lt;=500），表示工地的隧道数，接下来的 N 行每行是用空格隔开的两个整数 S 和 T，表示挖 S 与挖煤点 T 由隧道直接连接。输入数据以 0 结尾。 输出格式：输入文件中有多少组数据，输出文件 output.txt 中就有多少行。每行对应一组输入数据的 结果。其中第 i 行以 Case i: 开始（注意大小写，Case 与 i 之间有空格，i 与:之间无空格，: 之后有空格），其后是用空格隔开的两个正整数，第一个正整数表示对于第 i 组输入数据至少需 要设置几个救援出口，第二个正整数表示对于第 i 组输入数据不同最少救援出口的设置方案总 数。输入数据保证答案小于 2^64。输出格式参照以下输入输出样例。 思路:v-DCC删去一点后其内部必然仍互相连通,在一个v-DCC中最多只需要建一个出口.所以可以先缩点,缩成一棵树,记录每个节点的大小. 以这个比母亲还要见得多的图(雾 为例,缩点后就变成了: 仔细观察,非叶节点不用建出口,出事了往叶子节点跑就完事了.叶子节点必须建出口,不然割点炸了就完了. 所以需要建的出口个数就是叶子节点的个数,而出口方案数,通过乘法原理,将叶子节点的大小乘起来即即可. 然而如果缩完点后就剩一个点了就不用这么多事了.显然只需要建两个点(如果一个被炸了另一个还能跑),方案数为$C_{size}^2$. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include &lt;bits/stdc++.h&gt;#define N 300005#define ll long longnamespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, m, num, cnt, cas, root, n, ans1; int stack[N], dfn[N], low[N], id[N], new_id[N], size[N]; bool cut[N], vis[N]; ll ans2 = 1; std::vector&lt;int&gt; dcc[N], leaf; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x; if (x == root &amp;&amp; !head[x]) { dcc[++cnt].push_back(x); return ; } int flg = 0; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); if (low[y] &gt;= dfn[x]) { if (++flg &gt; 1 || x != root) cut[x] = 1; int z; cnt++; do { z = stack[p--]; dcc[cnt].push_back(z); size[cnt]++; } while (y != z); dcc[cnt].push_back(x); } } else low[x] = std::min(low[x], dfn[y]); } } void DFS(int u) { int flg = 0; for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (!vis[v]) { vis[v] = 1; flg++; DFS(v); } } if (!flg) leaf.push_back(u); } void init() { memset(e, 0, sizeof(e)); memset(c, 0, sizeof(c)); memset(head, 0, sizeof(head)); memset(hc, 0, sizeof(hc)); memset(stack, 0, sizeof(stack)); memset(dfn, 0, sizeof(dfn)); memset(low, 0, sizeof(low)); memset(id, 0, sizeof(id)); memset(new_id, 0, sizeof(new_id)); memset(size, 0, sizeof(size)); memset(cut, 0, sizeof(cut)); memset(vis, 0, sizeof(vis)); for (int i = 1; i &lt;= cnt; i++) dcc[i].clear(); leaf.clear(); ecnt = ccnt = p = n = num = cnt = root = 0; ans2 = 1; } signed QAQ() { while (1) { cas++; scanf(\"%d\", &amp;m); if (!m) return 0; for (int i = 1, s, t; i &lt;= m; i++) { scanf(\"%d%d\", &amp;s, &amp;t); Add(s, t), Add(t, s); n = std::max(n, std::max(s, t)); } for (int i = 1; i &lt;= n; i++) { if (!dfn[i]) root = i, Tarjan(i); } int t = cnt; for (int i = 1; i &lt;= n; i++) if (cut[i]) new_id[i] = ++t; for (int i = 1; i &lt;= cnt; i++) { for (std::vector&lt;int&gt;::iterator it = dcc[i].begin(); it != dcc[i].end(); ++it) { if (cut[*it]) AddC(i, new_id[*it]), AddC(new_id[*it], i); else id[*it] = i; } } DFS(1); if ((int) leaf.size() == 1) { int s = size[leaf[0]] + 1; ans2 = s * (s - 1) / 2; ans1 = 2; } else { ans1 = leaf.size(); for (std::vector&lt;int&gt;::iterator it = leaf.begin(); it != leaf.end(); ++it) { ans2 *= size[*it]; } } printf(\"Case %d: %d %lld\\n\", cas, ans1, ans2); init(); } }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p3225/"},{"title":" Luogu P3469 [POI2008]BLO-Blockade\t\t","text":"poi~~~ Luogu P3469 [POI2008]BLO-Blockade题面：题目LYD翻译版:Byteotia 城市有 n 个城镇, m 条双向道路, 其中 $ n \\le 10 ^ 5, m \\le 5 * 10 ^ 5$.每条道路连接两个不同的城镇,没有重复的道路,所有城镇联通.把城镇看作节点,把道路看作边.容易发现,整个城市构成一张无向图. 你需要输出 n 个整数,其中第 i 个整数表示把与节点 i 关联的所有边去掉之后(不去掉节点 i 本身),无向图中有多少有序点对 (x, y), 满足 x 和 y 不联通. 输入格式：第一行读入n，m，分别是城镇数目和道路数目 城镇编号1~n 接下来m行每行两个数字a,b，表示a和b之间有一条无向边 输出格式：输出n行，每行一个数字，为第i个城镇被锁时不能发生的访问的数量。 数据范围：$ 1\\le n\\le 100,000, 1\\le m\\le 500,000 $. 思路:首先,如果 i 是割点,去掉 i 后其余城市仍然联通, ans[i] = 2 * (i - 1).(点对是有序的) 若 i 不是割点,显然,原图会裂成多个联通块. 1.i自己就是一个联通块 2.i的子树上的联通块 3.不在i子树的联通块 分开求和即可. 但分别去求复杂度过高,无法承受.可以在Tarjan过程中求出每个子树的大小,计算时直接使用. 注释里还有丶东西 代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define N 500005#define ll long longnamespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1]; int ecnt, head[N], n, m, num, cnt; int dfn[N], low[N], size[N]; ll ans[N]; bool cut[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num, size[x] = 1; int flg = 0, vis = 0; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); size[x] += size[y]; //计算子树大小 if (low[y] &gt;= dfn[x]) { ans[x] += (ll) size[y] * (n - size[y]); vis += size[y]; if (++flg &gt; 1 || x != 1) cut[x] = 1; } } else low[x] = std::min(low[x], dfn[y]); } if (!cut[x]) ans[x] = 2 * (n - 1);//是割点QwQ else ans[x] += (ll) (n - vis - 1) * (vis + 1) + n - 1; //不在子树上的联通块和自身的联通块 } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b), Add(b, a); } Tarjan(1); for (int i =1; i &lt;= n; i++) { printf(\"%lld\\n\", ans[i]); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/06/luogu-p3469/"},{"title":"Luogu P3674 小清新人渣的本愿","text":"毒瘤lxl QAQ Luogu P3674 小清新人渣的本愿 思路:lxl的题必定分块(不 区间题,看数据范围就可以知道可以莫队. 先看第一个操作:假设区间[l, r]有a, b满足a - b = x.那么a = b + x.这该怎么维护?可以开一个bitset存数列中出现的数,右移x位与一下,如果最后bitset不为空则说明可以满足. 第二个操作与第一个处理方法类似.假设区间[l, r]有a, b满足a + b = x, a = x + (-b).再开一个bitset反向存出现的数,这样就可以起到-b的效果.右移N - x位与第一个bitset与一下. 第三个操作略暴力,直接枚举因数,反正数据范围不大. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define N 100000 + 233int n, m, block;int a[N], pos[N], cnt[N];bool ans[N];std::bitset&lt;N&gt; b1, b2;struct Node { int l, r, id, x, opt; friend bool operator &lt;(Node a, Node b) { if (pos[a.l] != pos[b.l]) return pos[a.l] &lt; pos[b.l]; if (pos[a.l] &amp; 1) return a.r &lt; b.r; else return a.r &gt; b.r; }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline void Add(int x) {if (++cnt[x] == 1) b1[x] = b2[N - x] = 1;}inline void Remove(int x) {if (--cnt[x] == 0) b1[x] = b2[N - x] = 0;}signed main() { n = R(), m = R(), block = (int) sqrt(n); for (int i = 1; i &lt;= n; ++i) a[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= m; ++i) nd[i].opt = R(), nd[i].l = R(), nd[i].r = R(), nd[i].x = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + m); for (int i = 1, l = 1, r = 0; i &lt;= m; ++i) { while (l &lt; nd[i].l) Remove(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Remove(a[r--]); switch (nd[i].opt) { case 1: if ((b1 &amp; (b1 &lt;&lt; nd[i].x)).any()) ans[nd[i].id] = 1; break; case 2: if ((b1 &amp; (b2 &gt;&gt; (N - nd[i].x))).any()) ans[nd[i].id] = 1; break; default: for (int j = 1; j * j &lt;= nd[i].x; ++j) { if (!(nd[i].x % j) &amp;&amp; b1[j] &amp;&amp; b1[nd[i].x / j]) { ans[nd[i].id] = 1; break; } } break; } } for (int i = 1; i &lt;= m; i++) printf(\"%s\\n\", ans[i] ? \"hana\" : \"bi\"); return 0;}","link":"/2019/05/29/luogu-p3674/"},{"title":" Luogu P3627 [APIO2009]抢掠计划\t\t","text":"与缩点模板题惊人的相似… Luogu P3627 [APIO2009]抢掠计划题面：题目描述Siruseri 城中的道路都是单向的。不同的道路由路口连接。按照法律的规定， 在每个路口都设立了一个 Siruseri 银行的 ATM 取款机。令人奇怪的是，Siruseri 的酒吧也都设在路口，虽然并不是每个路口都设有酒吧。 Banditji 计划实施 Siruseri 有史以来最惊天动地的 ATM 抢劫。他将从市中心 出发，沿着单向道路行驶，抢劫所有他途径的 ATM 机，最终他将在一个酒吧庆 祝他的胜利。 使用高超的黑客技术，他获知了每个 ATM 机中可以掠取的现金数额。他希 望你帮助他计算从市中心出发最后到达某个酒吧时最多能抢劫的现金总数。他可 以经过同一路口或道路任意多次。但只要他抢劫过某个 ATM 机后，该 ATM 机 里面就不会再有钱了。 例如，假设该城中有 6 个路口，道路的连接情况如下图所示： 市中心在路口 1，由一个入口符号→来标识，那些有酒吧的路口用双圈来表示。每个 ATM 机中可取的钱数标在了路口的上方。在这个例子中，Banditji 能抢 劫的现金总数为 47，实施的抢劫路线是：1-2-4-1-2-3-5。 输入格式：第一行包含两个整数 N、M。N 表示路口的个数，M 表示道路条数。接下来 M 行，每行两个整数，这两个整数都在 1 到 N 之间，第 i+1 行的两个整数表示第 i 条道路的起点和终点的路口编号。接下来 N 行，每行一个整数，按顺序表示每 个路口处的 ATM 机中的钱数。接下来一行包含两个整数 S、P，S 表示市中心的 编号，也就是出发的路口。P 表示酒吧数目。接下来的一行中有 P 个整数，表示 P 个有酒吧的路口的编号。 输出格式：输出一个整数，表示 Banditji 从市中心开始到某个酒吧结束所能抢劫的最多 的现金总数。 数据范围：50%的输入保证 N, M&lt;=3000。所有的输入保证 N, M&lt;=500000。每个 ATM 机中可取的钱数为一个非负整数且不超过 4000。 输入数据保证你可以从市中心 沿着 Siruseri 的单向的道路到达其中的至少一个酒吧。 思路:此题是要在图中求经过点权最大的路径所经过的点权和. 然后我们就可以发现它与缩点模板题惊人的相似… 我们可以先缩点,将图转化为DAG,之后在DAG上拓扑跑DP即可. 本题有一大坑!(图片来自洛谷评论区) 当出现如图这种情况,若1为起点,5的入度为2,在拓扑过程中由于4不可达,5无法入队.我们可以发现,只需要研究可达的点就够了.所以在跑Tarjan和建新图的时候都只需要跑与起点联通的点.Tarjan只需要从起点跑,建图是特判dfn是否等于0. #3#11卡WA了解一下? 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, n, m, num, scc, cnt, ans = -114514, S, P, SPlace; int stack[N], dfn[N], low[N], id[N], ind[N], pv[N], val[N], f[N]; bool bridge[N], vis[N], bar[N], Bar[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], vis[y] = 0; id[y] = cnt; val[cnt] += pv[y]; if (bar[y]) Bar[cnt] = 1; if (y == S) SPlace = cnt; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; q.push(id[S]); f[id[S]] = val[SPlace]; while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; f[v] = std::max(f[v], f[u] + val[v]); if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) if (Bar[i]) ans = std::max(ans, f[i]); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;pv[i]); scanf(\"%d%d\", &amp;S, &amp;P); for (int i = 1, x; i &lt;= P; i++) scanf(\"%d\", &amp;x), bar[x] = 1; Tarjan(S); for (int x = 1; x &lt;= n; x++) { if (!dfn[x]) continue; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); ind[id[y]]++; } } TopSort(); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/08/luogu-p3627/"},{"title":"Luogu P3901 数列找不同","text":"简单的莫队 Luogu P3901 数列找不同 思路:维护区间[l, r]出现了几种数字, 若出现数等于r - l + 1则数列互不相同,反之则有相同. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;#define N 100000 + 233int n, q, block, kind;int pos[N], a[N], appear[N];bool ans[N];struct Node { int l, r, id; friend bool operator &lt;(Node a, Node b) { return (pos[a.l] ^ pos[b.l]) ? pos[a.l] &lt; pos[b.l] : ((pos[a.l] &amp; 1) ? a.r &lt; b.r : a.r &gt; b.r); }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline void Add(int x) { ++appear[x]; if (appear[x] == 1) ++kind;}inline void Remove(int x) { --appear[x]; if (!appear[x]) --kind;}signed main() { n = R(), q = R(); block = (int) sqrt(n); for (int i = 1; i &lt;= n; i++) a[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= q; i++) nd[i].l = R(), nd[i].r = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + q); for (int i = 1, l = 1, r = 0; i &lt;= q; i++) { while (l &lt; nd[i].l) Remove(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Remove(a[r--]); ans[nd[i].id] = (kind == nd[i].r - nd[i].l + 1); } for (int i = 1; i &lt;= q; i++) printf(\"%s\\n\", ans[i] ? \"Yes\" : \"No\"); return 0;}","link":"/2019/05/29/luogu-p3901/"},{"title":" Luogu P4503 [CTSC2014] 企鹅QQ\t\t","text":"正经A掉的第一道紫题?? Luogu P4503 [CTSC2014] 企鹅QQ题面：题目描述:小Q是PenguinQQ网站的管理员，他最近在进行一项有趣的研究——哪些账户是同一个人注册的。经过长时间的分析，小Q发现同一个人注册的账户名称总是很相似的，例如Penguin1，Penguin2，Penguin3……于是小Q决定先对这种相似的情形进行统计。 小Q定义，若两个账户名称是相似的，当且仅当这两个字符串等长且恰好只有一位不同。例如“Penguin1”和“Penguin2”是相似的，但“Penguin1”和“2Penguin”不是相似的。而小Q想知道，在给定的n 个账户名称中，有多少对是相似的。 为了简化你的工作，小Q给你的N 个字符串长度均等于L ，且只包含大小写字母、数字、下划线以及‘@’共64种字符，而且不存在两个相同的账户名称。 输入格式：第一行包含三个正整数N ，L ，S 。其中N 表示账户名称数量，L 表示账户名称长度，S 用来表示字符集规模大小，它的值只可能为2或64。 若S 等于2，账户名称中只包含字符‘0’和‘1’共2种字符； 若S 等于64，账户名称中可能包含大小写字母、数字、下划线以及‘@’共64种字符。 随后N 行，每行一个长度为L 的字符串，用来描述一个账户名称。数据保证N 个字符串是两两不同的。 输出格式：仅一行一个正整数，表示共有多少对相似的账户名称。 数据范围：$N \\le 30000, L \\le 200$ 思路:S可以直接无视（（（ 把题目转换为人话：给一堆字符串，找出只有一个字符不同的字符串对数。 由于L的范围非常小，所以我们可以枚举不同字符的位置。 先预处理字符串从左往右的hash和从右往左的hash，然后在枚举时将左右两边的hash再hash一遍，把相同hash的去重并统计一下，输出对数就OK。 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//请无视S.H.I.T.一样的变量命名(逃#include &lt;bits/stdc++.h&gt;using namespace std;#define ll long long#define base1 13131#define base2 1313131#define MOD 23333333333333333namespace Gekoo { int n, l, s, cwy; char QQ[30005][205]; ll gou[30005][205], li[30005][205], nmsl[30005]; void QAQ() { scanf(\"%d%d%d\", &amp;n, &amp;l, &amp;s); for (int i = 1; i &lt;= n; i++) { scanf(\"%s\", QQ[i] + 1); for (int j = 1; j &lt;= l; j++) { gou[i][j] = (gou[i][j - 1] * base1 + QQ[i][j]) % MOD; } for (int j = l; j &gt;= 1; j--) { li[i][j] = (li[i][j + 1] * base2 + QQ[i][j]) % MOD; } } for (int mid = 1; mid &lt;= l; mid++) { for (register int i = 1; i &lt;= n; i++) { nmsl[i] = (gou[i][mid - 1]* base1 + li[i][mid + 1]) % MOD; } sort(nmsl + 1, nmsl + 1 + n); int dky = 1; for (register int i = 1; i &lt;= n; i++) { if (nmsl[i] == nmsl[i - 1]) { cwy += dky; dky++; } else { dky = 1; } } } printf(\"%d\\n\", cwy); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p4503/"},{"title":"Luogu P4168 [Violet]蒲公英","text":"分块是暴力的浪漫 Luogu P4168 [Violet]蒲公英题面：题目描述在乡下的小路旁种着许多蒲公英，而我们的问题正是与这些蒲公英有关。 为了简化起见，我们把所有的蒲公英看成一个长度为n的序列$(a_1,a_2..a_n)$,其中$a_i$为一个正整数，表示第i棵蒲公英的种类编号。 而每次询问一个区间 [l,r]，你需要回答区间里出现次数最多的是哪种蒲公英，如果有若干种蒲公英出现次数相同，则输出种类编号最小的那个。 注意，你的算法必须是在线的. 输入格式：第一行两个整数 n,m ，表示有n株蒲公英，m 次询问。 接下来一行n个空格分隔的整数 $a_i$ ，表示蒲公英的种类 再接下来m行每行两个整数 $l_0,r_0$ ，我们令上次询问的结果为 x（如果这是第一次询问，则 x=0）。 令 $l=(l_0+x-1)\\bmod n + 1,r=(r_0+x-1) \\bmod n + 1$，如果 l&gt;r，则交换 l,r 。 最终的询问区间为[l,r]。 输出格式：输出 m 行。每行一个整数，表示每次询问的结果。 数据范围：对于 20% 的数据，保证 $1\\le n,m \\le 3000$。 对于 100% 的数据，保证 $1\\le n \\le 40000,1\\le m \\le 50000,1\\le a_i \\le 10^9$. 思路:问题转化:求区间众数. $n \\le 40000$,显然可以分块.$a_i \\le 10 ^ 9$,空间接受不能,显然需要离散化. 显然,一个区间里的众数是这个区间包含的块的众数或者是边角上的数. 我们用f[i][j]表示从第i块到第j块的最小众数,这很好求,每个块扫一遍. 当我们得到询问区间后,我们先把它包含的大块的最小众数作为候选答案.然后再扫边角. 为了得到每个数在区间内的出现次数,我们可以开N个vector来存每个数出现的位置.查找时分别在vector二分查找l和r,下标之差即为出现次数. 有个坑:查找r时用std::upper_bound,查找l时用std::lower_bound.如果都用std::lower_bound最后结果会少… 此做法忽略块大小等因素期望复杂度$O(N\\sqrt{nlogn})$.且vector常数巨大,吸氧吧您.艰难卡过. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;bits/stdc++.h&gt;#define N 40005int n, m, block, pos[N], val[N], a[N], f[250][250], L[250], lst, id;std::vector&lt;int&gt; v[N];std::map&lt;int, int&gt; mp;inline void init(int x) { int cnt[N] = {}, mx = 0, ans = 0; for (int i = L[x]; i &lt;= n; i++) { cnt[a[i]]++; if (cnt[a[i]] &gt; mx || (cnt[a[i]] == mx &amp;&amp; val[a[i]] &lt; val[ans])) ans = a[i], mx = cnt[a[i]]; f[x][pos[i]] = ans; }} inline int ask(int l, int r) { int ret, mx; ret = f[pos[l] + 1][pos[r] - 1]; mx = std::upper_bound(v[ret].begin(), v[ret].end(), r) - std::lower_bound(v[ret].begin(), v[ret].end(), l); for (int i = l; i &lt;= std::min(L[pos[l] + 1] - 1, r); i++) { int t = std::upper_bound(v[a[i]].begin(), v[a[i]].end(), r) - std::lower_bound(v[a[i]].begin(), v[a[i]].end(), l); if (t &gt; mx || (t == mx &amp;&amp; val[a[i]] &lt; val[ret])) ret = a[i], mx = t; } if (pos[l] != pos[r]) { for (int i = L[pos[r]]; i &lt;= r; i++) { int t = std::upper_bound(v[a[i]].begin(), v[a[i]].end(), r) - std::lower_bound(v[a[i]].begin(), v[a[i]].end(), l); if (t &gt; mx || (t == mx &amp;&amp; val[a[i]] &lt; val[ret])) ret = a[i], mx = t; } } return ret;}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); //离散化 for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;a[i]); if (mp.find(a[i]) == mp.end()) { mp[a[i]] = ++id; val[id] = a[i]; } a[i] = mp[a[i]]; v[a[i]].push_back(i); } //分块和初始化 block = int(sqrt(n)); for (int i = 1; i &lt;= n; i++) { pos[i] = (i - 1) / block + 1; if (pos[i] != pos[i - 1]) L[pos[i]] = i; } L[pos[n + 1] = pos[n] + 1] = n + 1; for (int i = 1; i &lt;= pos[n]; i++) init(i); //处理询问 for (int i = 1, l, r; i &lt;= m; i++) { scanf(\"%d%d\", &amp;l, &amp;r); l = (l + lst - 1) % n + 1, r = (r + lst - 1) % n + 1; if (l &gt; r) std::swap(l, r); lst = val[ask(l, r)]; printf(\"%d\\n\", lst); } return 0;}","link":"/2019/04/30/luogu-p4168/"},{"title":"Luogu P4396 [AHOI2013]作业","text":"可以莫队或CDQ,由于菜不会CDQ QAQ Luogu P4396 [AHOI2013]作业题面：题目描述此时己是凌晨两点，刚刚做了Codeforces的小A掏出了英语试卷。英语作业其实不算多，一个小时刚好可以做完。然后是一个小时可以做完的数学作业，接下来是分别都是一个小时可以做完的化学，物理，语文……小A压力巨大。 这是小A碰见了一道非常恶心的数学题，给定了一个长度为n的数列和若干个询问，每个询问是关于数列的区间表示数列的第l个数到第r个数)，首先你要统计该区间内大于等于a，小于等于b的数的个数，其次是所有大于等于a，小于等于b的，且在该区间中出现过的数值的个数。 小A望着那数万的数据规模几乎绝望，只能向大神您求救，请您帮帮他吧。 输入格式：第一行n,m 接下来n个数表示数列 接下来m行，每行四个数l,r,a,b 输出格式：输出m行，分别对应每个询问，输出两个数，分别为在l到r这段区间中大小在[a,b]中的数的个数，以及大于等于a,小于等于b的，且在该区间中出现过的数值的个数（具体可以参考样例）。 数据范围：N&lt;=100000,M&lt;=100000 思路:求区间[l, r]中在[a, b]间的数的个数和数值的个数. 两问可转化为二维数点和三位数点,CDQ分治易求,但由于我Too Young,不会CDQ,这里使用莫队做法. 我们开两个树状数组,分别维护数的个数和数值的个数,开一个cnt数组来维护数是否存在. 之后跑个莫队,复杂度$O(n\\sqrt nlogn)$,完美TLE 77分. 放弃树状数组直接分块,去掉那个log,可以苟过去. 我犯了个SB错误交了一页:重载运算符的时候把l写成id了 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;#define N 200000 + 23333int n, m, block, pos[N], cnt[N], a[N], f[N], g[N], L[N], ans1[N], ans2[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}struct Node { int l, r, a, b, id; bool operator &lt;(const Node &amp;a) { if (pos[l] != pos[a.l]) return pos[l] &lt; pos[a.l]; if (pos[l] &amp; 1) return r &lt; a.r; else return r &gt; a.r; }} nd[N];inline void Ask(int x) { int l = nd[x].a, r = nd[x].b, id = nd[x].id; if (pos[r] - pos[l] &lt; 2) { for (int i = l; i &lt;= r; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; return; } else { for (int i = l; i &lt; L[pos[l] + 1]; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; for (int i = L[pos[r]]; i &lt;= r; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; for (int i = pos[l] + 1; i &lt; pos[r]; i++) ans1[id] += f[i], ans2[id] += g[i]; }}inline void Modify(int p, int tag) { if (tag) { if (!cnt[p]) g[pos[p]]++; f[pos[p]]++, cnt[p]++; } else { f[pos[p]]--, cnt[p]--; if (!cnt[p]) g[pos[p]]--; }}signed main() { n = R(), m = R(); block = ceil (pow(n, 0.5)); for (register int i = 1; i &lt;= n; i++) { a[i] = R(), pos[i] = (i - 1) / block + 1; if (pos[i] != pos[i - 1]) L[pos[i]] = i; } L[pos[n + 1] = pos[n] + 1] = n + 1; for (register int i = 1; i &lt;= m; i++) nd[i].l = R(), nd[i].r = R(), nd[i].a = R(), nd[i].b = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + m); for (int i = nd[1].l; i &lt;= nd[1].r; i++) Modify(a[i], 1); Ask(1); for (register int i = 2, l = nd[1].l, r = nd[1].r; i &lt;= m; i++) { while (l &lt; nd[i].l) Modify(a[l++], 0); while (l &gt; nd[i].l) Modify(a[--l], 1); while (r &lt; nd[i].r) Modify(a[++r], 1); while (r &gt; nd[i].r) Modify(a[r--], 0); Ask(i); } for (register int i = 1; i &lt;= m; i++) printf(\"%d %d\\n\", ans1[i], ans2[i]); return 0;}","link":"/2019/05/09/luogu-p4396/"},{"title":"Luogu P4139 上帝与集合的正确用法","text":"教我这题的人一个星期后就退役了QAQ Luogu P4139 上帝与集合的正确用法 思路:人话: $2^{2^{…^{2}}} mod\\ p$. 前置知识: 拓展欧拉定理$$当 b &gt;= \\varphi(p),a^b \\equiv a^{b\\mod \\varphi(p) + \\varphi(p)}\\mod p.\\当 b &lt; \\varphi(p) ,a^b \\equiv a ^ {b \\mod \\varphi(p)} \\mod p.$$ 我们对原式不断使用拓欧,发现一直在递归计算$2^{…^2}\\mod \\varphi(p) + \\varphi(p)$, 最终该式会等于0.因此递归计算即可. 欧拉函数算的少,需要的时候爆算就行,不需要筛法. 代码:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;#define ll long longint Phi(int x) { int ret = x; for (int i = 2; i * i &lt;= x; ++i) { if (x % i == 0) { ret -= ret / i; while (x % i == 0) x /= i; } } if (x &gt; 1) ret -= ret / x; return ret;}int Qpow(int a, int b, int p) { int ret = 1; for (; b; b &gt;&gt;= 1, a = (ll) a * a % p) if (b &amp; 1) ret = (ll) ret * a % p; return ret;}int Solve(int p) { return p == 1 ? 0 : Qpow(2, Solve(Phi(p)) + Phi(p), p);}signed main() { int T; scanf(\"%d\", &amp;T); while (T--) { int p; scanf(\"%d\", &amp;p); printf(\"%d\\n\", Solve(p)); } return 0;}","link":"/2019/05/29/luogu-p4139/"},{"title":" Luogu P5058 [ZJOI2004]嗅探器\t\t","text":"警惕思维江（不僵化 Luogu P5058 [ZJOI2004]嗅探器题面：题目:某军搞信息对抗实战演习，红军成功地侵入了蓝军的内部网络，蓝军共有两个信息中心，红军计划在某台中间服务器上安装一个嗅探器，从而能够侦听到两个信息中心互相交换的所有信息，但是蓝军的网络相当的庞大，数据包从一个信息中心传到另一个信息中心可以不止有一条通路。现在需要你尽快地解决这个问题，应该把嗅探器安装在哪个中间服务器上才能保证所有的数据包都能被捕获？ 输入格式：输入文件的第一行一个整数 n，表示蓝军网络中服务器的数目。 接下来若干行是对蓝军网络的拓扑结构描述，每行是两个整数 i , j 表示编号为 i 和编号为 j 的两台服务器间存在连接（显然连接是双向的），服务器的编号从 1 开始，一行两个 0 表示网络的拓补结构描述结束，再接下来是两个整数 a , b 分别表示两个中心服务器的编号。 输出格式：输出编号。如果有多个解输出编号最小的一个，如果找不到任何解，输出 No solution 思路:求出一个点使得删去他后起点和终点不连通. 最开始我是打算求一下割点，然后枚举删割点. 之后郭老师提醒了我数据范围…&lt;100,Tarjan你horse呢QAQ 直接枚举删点跑Dijkstra,不能联通直接输出点,最后输出No Solution. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt, val;} e[N &lt;&lt; 1]; int head[N], ecnt, n, st, ed, dis[N]; bool vis[N]; inline void Add(int f, int to) {e[ecnt].val = 1, e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} bool Dijkstra(int ban) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue &lt;std::pair&lt;int, int&gt; &gt; q; dis[st] = 0; q.push(std::make_pair(0, st)); while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (v == ban) continue; if (dis[v] &gt; dis[u] + val) { dis[v] = dis[u] + val; if (!vis[v]) { q.push(std::make_pair(-dis[v], v)); } } } } return (dis[ed] == 0x3f3f3f3f) ? 0 : 1; } signed QAQ() { scanf(\"%d\", &amp;n); int i, j; while (1) { scanf(\"%d%d\", &amp;i, &amp;j); if (!i &amp;&amp; !j) break; Add(i, j), Add(j, i); } scanf(\"%d%d\", &amp;st, &amp;ed); for (int i = 1; i &lt;= n; i++) { if (i == st || i == ed) continue; if (!Dijkstra(i)) return !printf(\"%d\\n\", i); } return !printf(\"No solution\\n\"); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/14/luogu-p5058/"},{"title":" Luogu P4879 ycz的妹子","text":"ycz有很多喜欢他的青梅竹马,dky有很多妹子,我没有妹子,我们都有光明的前途. Luogu P4879 ycz的妹子题面：题目描述机房神犇ycz有n个青梅竹马，她们分别住在1~n号城市中。小时候的她们美丽可爱，但是由于女大十八变，有些妹子的颜值发生了变化，但是十分重感情的ycz神犇不忍心抛弃她们，于是记录下来了她们颜值变化的值，我们用C, x, y表示第x个城市的妹子的颜值下降了y。长大之后的ycz非常有魅力，有许多妹子被ycz迷得神魂颠倒，我们用I, x, y表示第x个城市有一个妹子喜欢上了ycz，她的颜值为y（y有可能是负数，但是ycz来者不拒）。但在中途有一些妹子和ycz吵架了，于是就分手了，我们用D, x表示第x个妹子和ycz分手了。 最近神犇ycz要去全国各地找他的妹子们，为了方便计算，我们珂以把ycz的妹子所在的城市当作是一条直线，并且挨在一起。神犇ycz由于忙于和他的妹子们联系此时已经很累了，于是交给你一个这样的任务：他想知道他在某个时间去找他的所有妹子们珂以获得多大的愉悦度，这个愉悦度为他找的妹子的颜值数，你要做的就是求出这个愉悦度之和（注意长大后妹子们的颜值可能为负数/滑稽）。 注意：每个城市只允许有一个妹子，也就是说后来喜欢上ycz的妹子会赶走之前这个城市喜欢ycz的妹子（一城不容二女）。 输入格式：第一行两个正整数n和m (1&lt;=n&lt;=100000)(1&lt;=n&lt;=100000)第二行为n个整数ai，表示小时候ycz的青梅竹马的颜值(1&lt;=ai&lt;=10^9)接下来m行，每行为一条信息，每条信息可能是下面的一种: C, x, y表示第x个城市的妹子的颜值下降了yI, x, y表示在第x个城市有一个颜值为y的妹子迷上了yczD, x表示第x个妹子和ycz分手了 Q表示ycz现在想知道如果现在去找他所有的妹子们珂以获得多大的愉悦度 说明：妹子们居住的城市编号最大为5*10^5 输出格式：对于每一个Q输出一个整数 思路:这道题是在同学的分块课件里的. 但是,我选择线段树 建立一棵线段树,维护从1到MAXN城市的妹子. 只需要注意一下分手的时候是根据cnt来二分的,其他都是板子.. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;#define ll long long#define N 200005struct SegTree { int l, r; ll sum, cnt; #define l(x) tree[x].l #define r(x) tree[x].r #define sum(x) tree[x].sum #define cnt(x) tree[x].cnt #define ls(x) x &lt;&lt; 1 #define rs(x) x &lt;&lt; 1 | 1} tree[N &lt;&lt; 2];int n, m, qaq[N];void pushup(int p) { sum(p) = sum(ls(p)) + sum(rs(p)); cnt(p) = cnt(ls(p)) + cnt(rs(p));}void build(int p, int l, int r) { l(p) = l, r(p) = r, sum(p) = cnt(p) = 0; if (l == r) { sum(p) = qaq[l], cnt(p) = qaq[l] ? 1 : 0; return; } int mid = (l + r) &gt;&gt; 1; build(ls(p), l, mid); build(rs(p), mid + 1, r); pushup(p);}void remove(int p, int l, int r, int x) { if (l == r) { sum(p) = cnt(p) = 0; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= cnt(ls(p))) remove(ls(p), l, mid, x); else remove(rs(p), mid + 1, r, x - cnt(ls(p))); pushup(p);}void change(int p, int l, int r, int x, int v) { if (l == r) { sum(p) -= v; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) change(ls(p), l, mid, x, v); else change(rs(p), mid + 1, r, x, v); pushup(p);}void insert(int p, int l, int r, int x, int v) { if (l == r) { sum(p) = v, cnt(p) = 1; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) insert(ls(p), l, mid, x, v); else insert(rs(p), mid + 1, r, x, v); pushup(p);}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;qaq[i]); build(1, 1, N); for (int i = 1; i &lt;= m; i++) { char s[5]; int x, y; scanf(\"%s\", s); switch (s[0]) { case 'C': scanf(\"%d%d\", &amp;x, &amp;y); change(1, 1, N, x, y); break; case 'I': scanf(\"%d%d\", &amp;x, &amp;y); insert(1, 1, N, x, y); break; case 'D': scanf(\"%d\", &amp;x); remove(1, 1, N, x); break; default: printf(\"%lld\\n\", sum(1)); break; } } return 0;}","link":"/2019/04/29/luogu-p4879/"},{"title":"六一儿童周考","text":"Please enter the password to read the blog. Incorrect Password! No content to display! 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","link":"/2019/06/01/test0601/"},{"title":" POJ 1135 Domino Effect\t\t","text":"最短路 POJ1135 Domino Effect人话版题面：给一无向图,从节点1开始推骨牌,骨牌运动速度为1m/s,求出最后一个骨牌的落地时间. 思路:先求最短路,找出最短路中最大值,即为落在节点上的最长时间. 再枚举落在边上的最长时间,画图手推可得,落在边$(u,v)$上的时间为$\\frac{dis(u)+dis(v)+val}{2}$. 最后比较一下大小对应输出. 由于我不良的代码习惯导致一直WA,我忏悔 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;deque&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;utility&gt;#include &lt;vector&gt;#define N 500005namespace Gekoo { struct Edge { int to, nxt, val; }e[N &lt;&lt; 1]; int n, m, ecnt, head[N], dis[N], cnt; bool vis[N]; inline void AddEdge(int f, int to, int val) { e[++ecnt].to = to, e[ecnt].val = val, e[ecnt].nxt = head[f], head[f] = ecnt; } void Dijkstra(int s) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; q; q.push(std::make_pair(0, 1)); dis[1] = 0; while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (dis[v] &gt; dis[u] + val) { dis[v] = dis[u] + val; q.push(std::make_pair(-dis[v], v)); } } } } void init() { ecnt = 0; memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); } signed QAQ() { while (1) { scanf(\"%d%d\", &amp;n, &amp;m); if (!n &amp;&amp; !m) break; init(); for (int i = 1; i &lt;= m; i++) { int a, b, l; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;l); AddEdge(a, b, l); AddEdge(b, a, l); } Dijkstra(1); double mx_pt = 0.0; int pt = 0; for (int i = 1; i &lt;= n; i++) { if (dis[i] &gt;= mx_pt) { mx_pt = dis[i]; pt = i; } } double mx_e = 0.0; int lpt = 0, rpt = 0; for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (mx_e &lt;= (double) (dis[u] + dis[v] + val) / 2.0) { mx_e = (double) (dis[u] + dis[v] + val) / 2.0; lpt = std::min(u, v), rpt = std::max(u, v); } } } printf(\"System #%d\\n\", ++cnt); if (mx_pt &gt;= mx_e) { printf(\"The last domino falls after %.1f seconds, at key domino %d.\\n\", mx_pt, pt); } else { printf(\"The last domino falls after %.1f seconds, between key dominoes %d and %d.\\n\", mx_e, lpt, rpt); } puts(\"\"); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/02/28/poj-1135/"},{"title":" POJ 3463 Sightseeing\t\t","text":"最短路与次短路 POJ3463 Sightseeing题意：求图中最短路和比最短路长度大1的路径数总和 思路:先求出最短路数和次短路数，如果次短路长度 = 最短路长度，那么输出路径数和，否则输出最短路数。 求次短路数也非常简单，在Dijkstra过程中分类讨论即可。 代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;cctype&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;ctime&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;deque&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;string&gt;#include &lt;utility&gt;#include &lt;vector&gt;#define N 100005namespace Gekoo { struct Edge { int to, nxt, val; }e[N]; struct Node { int val, u, is_first; Node(int a, int b, int c) {u = a, val = b, is_first = c;} bool operator &lt;(const Node &amp;a) const { return val &gt; a.val; } }; int ecnt, head[N], T, dis[N][2], cnt[N][2]; bool vis[N][2]; void AddEdge(int f, int to, int val) { e[++ecnt].to = to; e[ecnt].val = val; e[ecnt].nxt = head[f]; head[f] = ecnt; } void Dijkstra(int s) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); memset(cnt, 0, sizeof(cnt)); dis[s][0] = dis[s][1] = 0; cnt[s][0] = cnt[s][1] = 1; std::priority_queue&lt;Node&gt; q; q.push(Node(s, 0, 0)); while (!q.empty()) { int u = q.top().u, is_f = q.top().is_first; q.pop(); if (vis[u][is_f]) continue; vis[u][is_f] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (val + dis[u][is_f] &lt; dis[v][0]) { dis[v][1] = dis[v][0]; dis[v][0] = val + dis[u][is_f]; cnt[v][1] = cnt[v][0]; cnt[v][0] = cnt[u][is_f]; q.push(Node(v, dis[v][0], 0)); q.push(Node(v, dis[v][1], 1)); } else if (val + dis[u][is_f] == dis[v][0]) { cnt[v][0] += cnt[u][is_f]; } else if (val + dis[u][is_f] &gt; dis[v][0] &amp;&amp; val + dis[u][is_f] &lt; dis[v][1]) { dis[v][1] = val + dis[u][is_f]; cnt[v][1] = cnt[u][is_f]; q.push(Node(v, dis[v][1], 1)); } else if (val + dis[u][is_f] == dis[v][1]) { cnt[v][1] += cnt[u][is_f]; } } } } signed QAQ() { scanf(\"%d\", &amp;T); while (T--) { ecnt = 0; memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); int n, m, s, f; scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, l; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;l); AddEdge(a, b, l); } scanf(\"%d%d\", &amp;s, &amp;f); Dijkstra(s); if (dis[f][1] == dis[f][0] + 1) cnt[f][0] += cnt[f][1]; printf(\"%d\\n\", cnt[f][0]); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/02/28/poj-3463/"},{"title":" POJ 1734 Sightseeing trip\t\t","text":"Floyd求最小环 POJ 1734 Sightseeing trip题面人话ver：给一无向图，求最小环。 思路:Floyd求最小环板子（（（ 没啥好多说的zzz 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#define INF 0x3f3f3f3fnamespace Gekoo { int n, m, mp[105][105], dis[105][105], pre[105][105], mincircle = INF; std::vector&lt;int&gt; path; void GetPath(int x, int y) { if(pre[x][y] == 0) return ; GetPath(x, pre[x][y]); path.push_back(pre[x][y]); GetPath(pre[x][y], y); } void Floyd() { for (int k = 1; k &lt;= n; k++) { for (int i = 1; i &lt; k; i++) { for (int j = i + 1; j &lt; k; j++) { if ((long long)dis[i][j] + mp[i][k] + mp[k][j] &lt; mincircle) { mincircle = dis[i][j] + mp[i][k] + mp[k][j]; path.clear(); path.push_back(i); GetPath(i, j); path.push_back(j); path.push_back(k); } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (dis[i][j] &gt; dis[i][k] + dis[k][j]) { dis[i][j] = dis[i][k] + dis[k][j]; pre[i][j] = k; } } } } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); memset(mp, 0x3f, sizeof(mp)); memset(dis, 0x3f, sizeof(dis)); for (int i = 1; i &lt;= n; i++) mp[i][i] = 0; for (int i = 1, a, b ,c; i &lt;= m; i++) { scanf(\"%d%d%d\", &amp;a, &amp;b ,&amp;c); mp[a][b] = mp[b][a] = dis[a][b] = dis[b][a] = std::min(mp[a][b], c); } Floyd(); if (mincircle == INF) { puts(\"No solution.\"); return 0; } for (std::vector&lt;int&gt;::iterator it = path.begin(); it != path.end(); ++it) { printf(\"%d \", *it); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/04/poj-1734/"}],"tags":[{"name":"字符串","slug":"字符串","link":"/tags/字符串/"},{"name":"KMP","slug":"KMP","link":"/tags/KMP/"},{"name":"AC自动机","slug":"AC自动机","link":"/tags/AC自动机/"},{"name":"Manacher","slug":"Manacher","link":"/tags/Manacher/"},{"name":"DP","slug":"DP","link":"/tags/DP/"},{"name":"SCC","slug":"SCC","link":"/tags/SCC/"},{"name":"Tarjan","slug":"Tarjan","link":"/tags/Tarjan/"},{"name":"图论","slug":"图论","link":"/tags/图论/"},{"name":"缩点","slug":"缩点","link":"/tags/缩点/"},{"name":"数学","slug":"数学","link":"/tags/数学/"},{"name":"矩阵乘法","slug":"矩阵乘法","link":"/tags/矩阵乘法/"},{"name":"LCA","slug":"LCA","link":"/tags/LCA/"},{"name":"生成树","slug":"生成树","link":"/tags/生成树/"},{"name":"DFS","slug":"DFS","link":"/tags/DFS/"},{"name":"Floyd","slug":"Floyd","link":"/tags/Floyd/"},{"name":"并查集","slug":"并查集","link":"/tags/并查集/"},{"name":"拓扑排序","slug":"拓扑排序","link":"/tags/拓扑排序/"},{"name":"二分图","slug":"二分图","link":"/tags/二分图/"},{"name":"匈牙利","slug":"匈牙利","link":"/tags/匈牙利/"},{"name":"分块","slug":"分块","link":"/tags/分块/"},{"name":"莫队","slug":"莫队","link":"/tags/莫队/"},{"name":"RMQ","slug":"RMQ","link":"/tags/RMQ/"},{"name":"ST表","slug":"ST表","link":"/tags/ST表/"},{"name":"DCC","slug":"DCC","link":"/tags/DCC/"},{"name":"树链剖分","slug":"树链剖分","link":"/tags/树链剖分/"},{"name":"SPFA","slug":"SPFA","link":"/tags/SPFA/"},{"name":"差分约束","slug":"差分约束","link":"/tags/差分约束/"},{"name":"割点","slug":"割点","link":"/tags/割点/"},{"name":"bitset","slug":"bitset","link":"/tags/bitset/"},{"name":"Hash","slug":"Hash","link":"/tags/Hash/"},{"name":"离散化","slug":"离散化","link":"/tags/离散化/"},{"name":"树状数组","slug":"树状数组","link":"/tags/树状数组/"},{"name":"数论","slug":"数论","link":"/tags/数论/"},{"name":"拓展欧拉定理","slug":"拓展欧拉定理","link":"/tags/拓展欧拉定理/"},{"name":"Dijkstra","slug":"Dijkstra","link":"/tags/Dijkstra/"},{"name":"线段树","slug":"线段树","link":"/tags/线段树/"},{"name":"周考","slug":"周考","link":"/tags/周考/"},{"name":"快速幂","slug":"快速幂","link":"/tags/快速幂/"},{"name":"状压DP","slug":"状压DP","link":"/tags/状压DP/"},{"name":"前缀和","slug":"前缀和","link":"/tags/前缀和/"},{"name":"最短路","slug":"最短路","link":"/tags/最短路/"}],"categories":[{"name":"OI","slug":"OI","link":"/categories/OI/"}]}