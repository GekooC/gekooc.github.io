{"pages":[{"title":"about","text":"关于我这里Gekoo,是弱省的一个蒟蒻WAer…目前正在文化课倒数与OI间苦苦挣扎喜欢的话就坚持8 友链本Blog首席合作伙伴:中华人民共和国政府 https://www.gov.cn 同届生:AKUOI DKY https://baka.online素质电竞 HHY https://oierhhy.top阳光男孩 TKJ https://oiertkj.top压行鬼才 宇興 https://www.cnblogs.com/yu-xing勤奋巨神 Chloris https://www.cnblogs.com/chloris物理很菜 AQSfer https://www.cnblogs.com/qxyzili--24不知写啥 OIerGLH https://www.cnblogs.com/oierglh儒雅随和 SIN_XIII https://www.cnblogs.com/SINXIII 学长/姐:邦邦人 Labelray http://labelray.top恶心肥宅 ErkkiErkko https://www.cnblogs.com/ErkkiErkko游戏开发者 Floatiy https://www.cnblogs.com/floatiy 校外朋友:ACCPET https://zhehao.topYorkWu http://yueyangwu.cn","link":"/about/index.html"}],"posts":[{"title":"hzoi-CSP-10","text":"越考越烂，感觉药丸 感觉考试策略和心态出了大问题 Problem A:辣鸡这是一道以我的名字命名的题目，我很自豪。 看了题没啥思路，开始看数据点。 第一个数据点只有一个矩形，看出来了单矩形内的式子$2 (x_2 - x_1) (y_2 - y_1)$.5pts get 继续读题，还是没啥思路，去上厕所（ 回来后继续想，只能想出$O(N^2)$的暴力，因为我想不到什么方法去处理不同矩形间的关系。 码码码，昨天写插头DP的后遗症显现出来了，写了一堆IF。。。。 晚上没睡好没关空调被冻醒，调试进度缓慢，写完T1考试过了一半了。。。 考完看题解，我×，真是$O(N^2)$的大暴力？？？？ 不过加了一个优化：把矩形按照左下角坐标排序，这样，只要两个矩形相离就可以直接break掉。 这个我在考试的时候其实写了，但是脑抽在提交时注释掉了。。。。 这分丢的真实丢人 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define ll long longll n, x_1, x_2, y_1, y_2, ans;struct Node { ll x_1, y_1, x_2, y_2; friend bool operator &lt;(Node a, Node b) { if (a.x_1 == b.x_1) return a.y_1 &lt; b.y_1; return a.x_1 &lt; b.x_1; }} nd[100005]; bool In(ll x, ll y, Node a) { return a.x_1 &lt;= x &amp;&amp; a.x_2 &gt;= x &amp;&amp; a.y_1 &lt;= y &amp;&amp; a.y_2 &gt;= y;}namespace case5 { signed QAQ() { for (int i = 1; i &lt;= n; i++) scanf(\"%lld%lld%lld%lld\", &amp;x_1, &amp;y_1, &amp;x_2, &amp;y_2), nd[i] = {x_1, y_1, x_2, y_2}, ans += (x_2 - x_1) * (y_2 - y_1) * 2; std::sort(nd + 1, nd + 1 + n); for (int i = 1; i &lt;= n; i++) { for (int j = i + 1; j &lt;= n; j++) { if (nd[j].x_1 &gt; nd[i].x_2 + 1) break; if ((nd[j].x_1 == nd[i].x_2 + 1 || nd[j].x_2 == nd[i].x_1 - 1) &amp;&amp; (nd[j].y_1 == nd[i].y_2 + 1 || nd[j].y_2 == nd[i].y_1 - 1)) ++ans; else if (nd[j].x_1 == nd[i].x_2 + 1 || nd[j].x_2 == nd[i].x_1 - 1) { ll x = std::min(nd[i].y_2, nd[j].y_2), y = std::max(nd[i].y_1, nd[j].y_1); if (x &gt;= y) { ans += 2ll * (x - y); if (nd[i].y_2 != nd[j].y_2) ++ans; if (nd[i].y_1 != nd[j].y_1) ++ans; } } else if (nd[j].y_1 == nd[i].y_2 + 1 || nd[j].y_2 == nd[i].y_1 - 1) { ll x = std::min(nd[i].x_2, nd[j].x_2), y = std::max(nd[i].x_1, nd[j].x_1); if (x &gt;= y) { ans += 2ll * (x - y); if (nd[i].x_2 != nd[j].x_2) ++ans; if (nd[i].x_1 != nd[j].x_1) ++ans; } } } } return !printf(\"%lld\\n\", ans); }}signed main() { scanf(\"%lld\", &amp;n); return case5::QAQ();} Problem B:模板wdnmd真模板啊都 第一眼读错题以为树上差分，再仔细看，应该是每个节点开个动态开点线段树，然后线段树合并。 问题来了，这玩意我都不会啊。。。 跳了 最开始以为是线段树合并，结果邓鸽鸽说线段树合并必死，布星。 热情的邓鸽鸽向我传授了我没有学习过的船新算法 树上启发式合并 学完之后发现就是很普通的启发式合并用到了树上而已 先说做法，给每个节点按时间轴开个动态开点线段树，节点保存种类和球数。易于发现每个点的球与它的子树有关。先把修改操作保存起来，开始处理整棵树。对于每个节点，我们需要判断这个球有没有出现在桶，因为这影响了我们对于种类的统计。于是再开一个数组存每个球最早出现的时间，只有最早出现的球才是有贡献的。 这道题的瓶颈在于答案的统计。可以发现我们算的每个点的答案都是子树答案的叠加，暴力的做法是遍历所有子树，这个复杂度是$O(N^2)$的，是30分暴力。 这太暴力力，，，于是就有了树上启发式合并，它没有某谷日报说的那么玄乎，其实和普通的启发式合并差不多。直接说优化方法：我们暴力算出轻儿子的答案，期间都清空辅助数组，只保留答案。重儿子我们就不用清空辅助数组了，算出答案，这样子节点的答案都算出来了，就差父亲的了。我们把轻儿子的答案直接合并到重儿子的答案，就得到了父节点的答案。 放在这道题，每次轻儿子计算后清空记小球出现时间的那个数组，然后算重儿子，之后将轻儿子上的线段树都启发式合并到重儿子的线段树上，父节点直接继承这棵线段树，不断递归这个过程。这个做法复杂度是$O(Nlog^2N)$级别的，就可以过了。 真难写，调了好久。 这道题学到的东西蛮多的。首先我之前一直没看动态开点线段树，学前置芝士的时候直接学了。然后我经常口胡启发式合并，但从来没写过，码力不足，这次也真的写了一次。第三，好久没写过这么复杂的题了，属实锻炼码力。 说句闲话，我之前一直WA40，一看Query没return，默认return了堆栈的top。败RP啊。。。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 233;int n, k[N], m, q, ecnt, head[N], color[N], disc[N];int early[N], stk[N * 200], tp, ans[N], root[N];struct Edge { int to, nxt;} e[N &lt;&lt; 1];int ls[N * 200], rs[N * 200], siz[N * 200], val[N * 200];std::vector&lt;int&gt; op[N];inline void add_edge(int f, int to) { e[++ecnt] = {to, head[f]}, head[f] = ecnt;}int fa[N], sz[N], son[N];void dfs1(int x, int f) { fa[x] = f, sz[x] = 1 + (int) op[x].size(); for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (y != f) { dfs1(y, x); sz[x] += sz[y]; if (sz[y] &gt; sz[son[x]]) son[x] = y; } }}int tot, rbin[N * 200], rbin_top;int new_node() { if (tot + 1 &lt; N * 200) return ++tot; else return rbin[rbin_top--];}void del_node(int x) { rbin[++rbin_top] = x;}void pushup(int p) { siz[p] = siz[ls[p]] + siz[rs[p]]; val[p] = val[ls[p]] + val[rs[p]];}void change(int &amp;p, int L, int R, int x, int y) { if (!p) p = new_node(); if (L == R) { siz[p] = 1; if (y != -1) val[p] = y; return; } int mid = (L + R) &gt;&gt; 1; if (x &lt;= mid) change(ls[p], L, mid, x, y); else change(rs[p], mid + 1, R, x, y); pushup(p);}void merge(int p, int &amp;root, int L, int R) { if (!p) return; if (L == R) { if (early[color[L]] &gt; L) { change(root, 1, m, early[color[L]], 0); change(root, 1, m, L, 1); early[color[L]] = L; } else if (early[color[L]] == 0) { change(root, 1, m, L, 1); early[color[L]] = L; stk[++tp] = color[L]; } else { change(root, 1, m, L, -1); } del_node(p); } int mid = (L + R) &gt;&gt; 1; merge(ls[p], root, L, mid); merge(rs[p], root, mid + 1, R);}int query(int p, int L, int R, int bucket) { if (!bucket || !p) return 0; if (siz[p] &lt;= bucket) return val[p]; int mid = (L + R) &gt;&gt; 1, ret = 0; if (siz[ls[p]] &lt; bucket) { ret += val[ls[p]]; ret += query(rs[p], mid + 1, R, bucket - siz[ls[p]]); } else { ret += query(ls[p], L, mid, bucket); } return ret;}void clear() { while (tp &gt; 0) early[stk[tp--]] = 0;}void solve(int x) { for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) if (y != son[x] &amp;&amp; y != fa[x]) solve(y), clear(); //先解决轻儿子的答案 if (son[x]) solve(son[x]); root[x] = root[son[x]]; for (unsigned int i = 0; i &lt; op[x].size(); i++) { int co = color[op[x][i]]; if (early[co] == 0) { change(root[x], 1, m, op[x][i], 1); early[co] = op[x][i]; stk[++tp] = co; } else if (early[co] &gt; op[x][i]) { change(root[x], 1, m, early[co], 0); change(root[x], 1, m, op[x][i], 1); early[co] = op[x][i]; } else { change(root[x], 1, m, op[x][i], -1); } } for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (y != fa[x] &amp;&amp; y != son[x]) { merge(root[y], root[x], 1, m); } } ans[x] = query(root[x], 1, m, k[x]);}signed main() { scanf(\"%d\", &amp;n); for (int i = 1, x, y; i &lt;= n - 1; i++) scanf(\"%d%d\", &amp;x, &amp;y), add_edge(x, y), add_edge(y, x); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", k + i); scanf(\"%d\", &amp;m); for (int i = 1, x, y; i &lt;= m; i++) scanf(\"%d%d\", &amp;x, &amp;y), disc[i] = color[i] = y, op[x].push_back(i); std::sort(disc + 1, disc + 1 + m); int QwQ = std::unique(disc + 1, disc + 1 + m) - (disc + 1); for (int i = 1; i &lt;= m; i++) color[i] = std::lower_bound(disc + 1, disc + 1 + QwQ, color[i]) - disc; scanf(\"%d\", &amp;q); dfs1(1, 0); solve(1); for (int i = 1, x; i &lt;= q; i++) scanf(\"%d\", &amp;x), printf(\"%d\\n\", ans[x]); return 0;} Problem C:大佬这是一道以我的同桌的名字命名的题目，我的同桌很自豪。 读完题感觉这是假期望（这是错误的万恶之源） 然而其实我此时读错题了（这是fa[万恶之源]） 总方案数不就是$m^n$嘛，求出所有方案和不就行了嘛！ DP不能！别问！问就是DFS！干就完事了！ 干个头啊，cwy你分没了（哭 区间的长度是k不是n，总方案数是$m^k$不是$m^n$（错误1） 题目要求的是算t较大的w，不是最大w的t（错误2）（终极弱智错误） DFS不能后我开始尝试DP。我设计f[i][j]表示第i天最大难度j的方案数。（错误3） 首先基于错误2我的转移方程全是错的。其次，这么设置状态有后效性，DP不能。 官方题解看不懂，邓鸽鸽方法跑得快还好懂。 我们先求出来每个区间最大难度值为i的劳累期望。 所有区间的概率的分母：$\\frac{1}{m^k}$.正确认识是k不是n是你AC的重要基础（捂脸，因为区间长度是k。 在看分子部分，也就是有多少情况的i是有贡献的，也就是区间的最大值。从1-k中选数，区间能产生$i^k$种序列，刨掉最大值不是i的序列，有$(i - 1) ^ k$种。 所以每个区间的劳累期望为$\\sum \\limits _{i = 1} ^ m ( i^k - (i - 1) ^k ) m^{-k} w_i$. 然后激动的cwy输入了样例，挂掉了。 这是一个区间，别忘了乘个区间数。。。 最终答案$(n - k + 1) \\sum \\limits _{i = 1} ^ m (i^k - (i - 1) ^k) m^{-k} w_i$. 这题很坑，数据有k &gt; n的，要特判掉。 123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;#define ll long longconst int MOD = 1000000007;ll n, m, k, ans, w;ll qpow(ll x, ll b) { ll ret = 1; for (; b; b &gt;&gt;= 1, x = x * x % MOD) if (b &amp; 1) ret = ret * x % MOD; return ret;}signed main() { scanf(\"%lld%lld%lld\", &amp;n, &amp;m, &amp;k); if (n &lt; k) return !printf(\"0\\n\"); for (int i = 1; i &lt;= m; i++) scanf(\"%lld\", &amp;w), ans = (ans + w * (qpow(i, k) - qpow(i - 1, k)) % MOD * qpow(m, k * (MOD - 2)) % MOD) % MOD; printf(\"%lld\\n\", ans * (n - k + 1) % MOD); return 0;}","link":"/2019/09/11/hzoi-CSP-10/"},{"title":"hzoi-CSP-9","text":"第⑨次考试会变成baka 起床就感觉喉咙好痛，来了机房直接GG，摸了下腋下感觉药丸。 昏了头考试，崩的有点厉害（ 本次考试题目顺序的设置充满恶意。。。 Problem A: 随我一看提示原根就弃了，写了个$O(nmmod)$的暴力，结果一个点都没跑过。。。。 首先这是个假期望题，总方案数为$n^m$，求出所有情况之和就可以了 设f[i][j]为i次操作x值为j的次数，暴力转移一波。写出方程还能发现是矩阵乘法的形式，这部分就不说了，直接看正解，毕竟我考试连这几个都没写。 题目提示我们用原根， 我们就用原根。用原根的幂就可以在p-1次方内遍历整个剩余系，我们可以用原根的幂的形式代替原来的a数组。 这样，原来的$a_i a_j a_k$的形式就变成了$g^i g ^j g ^ k = g ^ {i + j + k}$，乘法变成了加法。 我们把原来的f变一下，表示i次操作变成原根的j次方的次数。$f[i][(i + j) \\% (p - 1)]+=f[i-1][i] * f[i-1][j]$. 这玩意又能矩阵优化，还是循环矩阵，写个循环矩阵快速幂，$O(mod^2 logm)$，完事了 几个问题： 1.所以原根是啥啊？其实题目给的挺清楚。 2.原根咋求啊？这题数据范围这么小，从2到mod-2枚举一边就完事了其实数据范围大了也没事，原根一般都不大（小声） 3.这题取模有三个模数，要注意mod是题目给的，在把a数组变为原根的幂的形式时用;mod-1是根据拓展欧拉定理，$a^b = a^{b % \\phi p} \\mod p, (b, p) = 1$.在快速幂处理指数的时候用;1e9+7对与答案有关的数都用。 原根真是个好东西，希望我能记住。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/* ______ ______ / \\ / \\ | | | | | || | | | | || | | /\\ | | |\\______/ \\__/ \\__/ \\______/*/#include &lt;bits/stdc++.h&gt;#define ll long longconst int MO = 1000000007, N = 100005;int n, m, p, rt;ll po[N], idx[N], a[N];struct Matrix { ll a[1005]; friend Matrix operator *(Matrix x, Matrix y) { Matrix z = {}; for (int i = 0; i &lt;= p - 2; i++) for (int j = 0; j &lt;= p - 2; j++) z.a[(i + j) % (p - 1)] = (z.a[(i + j) % (p - 1)] + x.a[i] * y.a[j]) % MO; return z; } inline void clear() { for (int i = 0; i &lt;= p - 2; i++) a[i] = 0; } Matrix qpow(int b) { Matrix tmp, x = (*this); tmp.clear(), tmp.a[idx[1]]++; for (; b; b &gt;&gt;= 1, x = x * x) if (b &amp; 1) tmp = tmp * x; return tmp; }} mtx, ans;ll qpow(ll x, ll b, ll p) { ll tmp = 1; for (; b; b &gt;&gt;= 1, x = x * x % p) if (b &amp; 1) tmp = tmp * x % p; return tmp;}inline int getrt(int x) { for (int i = 2; i &lt;= x; i++) { ll tmp = 1; bool flg = 1; for (int j = 1; j &lt;= x - 2; j++) { tmp = tmp * i % x; if (tmp == 1) { flg = 0; break; } } if (flg) return i; }}signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;p); rt = getrt(p); po[0] = 1; for (int i = 1; i &lt;= p - 2; i++) po[i] = po[i - 1] * (ll) rt % p, idx[po[i]] = i; for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;a[i]), mtx.a[idx[a[i]]]++; ans = mtx.qpow(m); ll tot = 0; for (int i = 0; i &lt;= p - 2; i++) tot = (tot + po[i] * ans.a[i]) % MO; ll inv = qpow(n, (ll) m * (MO - 2), MO); printf(\"%lld\\n\", tot * inv % MO); return 0;} Problem B: 单考试就写了个Subtask1，，， 设$sum = \\sum a_i$ siz[x] 是x为根子树的每个节点的a和。 很明显，每个点的贡献就是它子树内每个节点的siz和。 Subtask 1应该是个换根DP，把1作为根节点，一遍dfs求出b[1]，第二遍dfs求出b[]。转移：$b[y] = b[x] + sum - 2 * siz[x]$，这个还是比较显然的。 Subtask 2我考场上觉得应该是个高斯消元，但我万年没写过不会写，而且数据范围也不对，不是正解。 正解是解方程，但不用搞死小圆 换根的时候得到了$b[y] - b[x] = sum - 2 * siz[x]$。能列出n-1个方程，但少了一个解不出来。b[1]搞不出来这种形式的式子。 但我们可以暴力算b[1]啊！！$b_1 = \\sum \\limits_{i = 2}^n siz[i]$. 我们有n个方程了，可以解n个未知数了。暴力回代就完事了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091/* ______ ______ / \\ / \\ | | | | | || | | | | || | | /\\ | | |\\______/ \\__/ \\__/ \\______/*/#include &lt;bits/stdc++.h&gt;#define ll long longconst int N = 100000 + 2333;int T, n, ecnt, head[N], op;ll a[N], b[N], siz[N], sum, f[N];struct Edge {int y, nxt;} e[N &lt;&lt; 1];inline void add_edge(int x, int y) { e[++ecnt] = {y, head[x]}, head[x] = ecnt;}namespace case0 { ll f[N]; void OAO(int x, int fa) { siz[x] = a[x], b[x] = 0; for (int i = head[x], y = e[i].y; i; i = e[i].nxt, y = e[i].y) if (y != fa) OAO(y, x), siz[x] += siz[y], b[x] += b[y] + siz[y]; } void OwO(int x, int fa) { for (int i = head[x], y = e[i].y; i; i = e[i].nxt, y = e[i].y) if (y != fa) b[y] = b[x] + sum - 2 * siz[y], OwO(y, x); } void QAQ() { for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;a[i]), sum += a[i]; OAO(1, 0), OwO(1, 0); for (int i = 1; i &lt;= n; i++) printf(\"%lld \", b[i]); printf(\"\\n\"); }}namespace case1 { void QwQ(int x, int fa) { for (int i = head[x], y = e[i].y; i; i = e[i].nxt, y = e[i].y) if (y != fa) f[y] = b[y] - b[x], QwQ(y, x); } void OwO(int x, int fa) { a[x] = siz[x] = (sum - f[x]) / 2; for (int i = head[x], y = e[i].y; i; i = e[i].nxt, y = e[i].y) if (y != fa) OwO(y, x), a[x] -= siz[y]; } void QAQ() { for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;b[i]); QwQ(1, 0); for (int i = 2; i &lt;= n; i++) sum += f[i]; sum = (sum + 2 * b[1]) / (ll) (n - 1); OwO(1, 0), a[1] = sum; for (int i = 2; i &lt;= n; i++) a[1] -= a[i]; for (int i = 1; i &lt;= n; i++) printf(\"%lld \", a[i]); printf(\"\\n\"); }}void clear() { memset(head, 0, sizeof(head)); ecnt = sum = 0;}signed main() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d\", &amp;n); for (int i = 1, x, y; i &lt; n; i++) scanf(\"%d%d\", &amp;x, &amp;y), add_edge(x, y), add_edge(y, x); scanf(\"%d\", &amp;op); if (op == 1) case1::QAQ(); if (op == 0) case0::QAQ(); clear(); } return 0;} Problem C: 题T3最可做，wsl 科学开题顺序：C -&gt; B -&gt; A（ 这个事情告诉我们要先把所有题看一遍，谁告诉你题目就一定要按照难度升序排列了（ 题中还有坑，subtask 0,1,3都是白给75分，然而我被卡在2一直没看3。。。。 讲解按难度升序排列，不像出题人那么屑。 subtask 0: 枚举水平向右步数a，垂直向上步数c。答案为$C_n^a C_{n - a} ^ a C_{n - 2a} ^ c = \\frac{n!}{a! a! c! c!}$. 预处理阶乘和阶乘逆元，完事 subtask 1: 设向右步数a，向左步数b，这就像出入栈问题，必须保持 a &gt;= b.所以答案就是Cat[n / 2]. subtask 3: 就是subtask 0和1合了起来，枚举水平向右步数a，可算出向上步数c，相当于在x轴和y轴都做一边subtask1。 答案就是$C_n^{2a} Cat[a] Cat[c]$. subtask 2: 这问组合计数不能，我在考场上疯狂尝试容斥，结果容不出来。 其实就是一个很简单的DP。设f[i]为第i步回到原点的方案数，枚举第一次回到原点的步数j，它满足subtask 1。$f[i] = f[i - j] Cat[j / 2 - 1] * 4$. 解释细节：Cat为什么下标要减1？j步内是不能回到原点的，可以类比出入栈，我们不能让栈为空。×4就是4个方向。 看完题再开题！！！ 看完题再开题！！！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/* ______ ______ / \\ / \\ | | | | | || | | | | || | | /\\ | | |\\______/ \\__/ \\__/ \\______/*/#include &lt;bits/stdc++.h&gt;#define ll long longconst int MO = 1000000007, N = 1000000 + 233;int n, typ;ll ans, fac[N], inv[N], cat[N];ll Qpow(ll x, int b) { ll ret = 1; for (; b; b &gt;&gt;= 1, x = x * x % MO) if (b &amp; 1) ret = ret * x % MO; return ret;}void init(int t) { fac[0] = fac[1] = 1, cat[1] = 1, cat[0] = 1; for (int i = 2; i &lt;= t; i++) fac[i] = fac[i - 1] * i % MO; for (int i = 0; i &lt;= t; i++) inv[i] = Qpow(fac[i], MO - 2); for (int i = 2; i &lt;= t; i++) cat[i] = (cat[i - 1] * (4 * i - 2) % MO * Qpow(i + 1, MO - 2) % MO) % MO;}namespace case0 { void QAQ() { init(n); for (int i = 0; i &lt;= n; i += 2) { int a = i / 2, c = (n - i) / 2; ans = (ans + fac[n] * inv[a] % MO * inv[a] % MO * inv[c] % MO * inv[c] % MO) % MO; } printf(\"%lld\\n\", ans); }}namespace case1 { void QAQ() { init(n); printf(\"%lld\\n\", cat[n / 2]); }}namespace case2 { ll f[N]; void QAQ() { init(n), n /= 2; f[0] = 1, f[1] = 4; for (int i = 2; i &lt;= n; i++) for (int j = 1; j &lt;= i; j++) f[i] = (f[i] + 4 * f[i - j] % MO * cat[j - 1]) % MO; printf(\"%lld\\n\", f[n]% MO); }}namespace case3 { void QAQ() { init(n); for (int i = 0; i &lt;= n; i += 2) { int a = i / 2, c = (n - i) / 2; ans = (ans + fac[n] * inv[i] % MO * inv[n - i] % MO * cat[a] % MO * cat[c] % MO) % MO; } printf(\"%lld\\n\", ans); }}signed main() { scanf(\"%d%d\", &amp;n, &amp;typ); if (typ == 0) case0::QAQ(); if (typ == 1) case1::QAQ(); if (typ == 2) case2::QAQ(); if (typ == 3) case3::QAQ(); return 0;} 抛开身体原因不谈，本次考试仍然暴露出了思维深度不足的大问题，比如T2想到高斯消元就跑了，难道真的想不到解方程吗？为什么就不再深入的思考一下呢？ 时间不多了，要努力啊。","link":"/2019/09/11/hzoi-CSP-9/"},{"title":"hzoi-CSP-8","text":"HZ怎么老考试啊23333 考试前一天占个坑。给自己的忠告：想不出正解就别想了，暴力打满Rank就不会难看QaQ —-华丽的分割线—- 考完了，Rank14，我又boomboomboom了orz 最后T3的暴力还是没打出来，我就是个想不出正解还要ning想的DD T1:匹配我是Sb 一眼KMP，刚正不阿的cwy不会忘记了看猫片，果断$O(N^2)$暴力走人（ 后来一看正解居然是蛤希，我草了，，，早知道就ning干力QAQ 考场上现推KMP估计还是能推出来的，如果能多想想就好了 简直对不起图巨 而且想不到KMP为啥不想想别的啊。。。懊悔中 复习下KMP： $nxt[i]$表示了$S[,i]$的前缀最长border的位置，当我们要匹配一个新的字母，我们设定一个指针p = nxt[i - 1]，如果S[i] = S[p+1]说明匹配大成功，p+1就是$S[,i]$的前缀最长border的位置，否则p指针一直往回跳，最恶情况就是无法匹配，一直跳到了1。 123456789101112131415161718192021222324#include &lt;bits/stdc++.h&gt;const int N = 300000 + 233;int T, la, lb, nxt[N];char a[N], b[N], add[5];signed main() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d%d\", &amp;la, &amp;lb); scanf(\"%s%s\", a + 1, add); a[la + 1] = '$', ++la; for (int i = 1; i &lt;= lb; i++) a[i + la] = a[i]; a[la + lb + 1] = add[0]; for (int i = 2; a[i]; i++) { int p = nxt[i - 1]; while (p &amp;&amp; a[i] != a[p + 1]) p = nxt[p]; if (a[i] == a[p + 1]) nxt[i] = p + 1; } printf(\"%d\\n\", nxt[la + lb + 1]); memset(nxt, 0, sizeof(nxt)); } return 0;} T2:回家我离AC只差一个90w的数组 一眼求割点，速码开T3。T3写完，二眼好像不对，割点不一定在1-n路径上。于是赶回来修锅，建个圆方树，dfs求出1-n经过的圆点。 然后就MLE了？？？？红太阳GMK说他数组开小了，我跟风给常数乘个10. 然后我就A了？？？ 这题还是挺显然的，思路秒出 考试时候千万别吝啬空间，够开就开，QAQ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;const int N = 2000000 + 233;int T, n, m, ans;struct Edge {int to, nxt;} e[N &lt;&lt; 2], c[N &lt;&lt; 2];int ecnt, head[N], ccnt, hc[N], tot;bool yes[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}int low[N], dfn[N], num, stk[N], p;inline void AddEdge(int f, int to) { e[++ecnt] = {to, head[f]}, head[f] = ecnt;}inline void AddC(int f, int to) { c[++ccnt] = {to, hc[f]}, hc[f] = ccnt;}void Tarjan(int x) { dfn[x] = low[x] = ++num; stk[++p] = x; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); if (dfn[x] == low[y]) { AddC(x, ++tot), AddC(tot, x); int z; do { z = stk[p--], AddC(z, tot), AddC(tot, z); } while (y != z); } } else low[x] = std::min(low[x], dfn[y]); }}void dfs(int x, int fa) { for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) { if (y != fa) { dfs(y, x); if (y == n) return (void) (yes[x] = 1); else if (yes[y]) yes[x] = 1; } }}signed main() { T = R(); while (T--) { n = R(), m = R(), tot = n; for (int i = 1, x, y; i &lt;= m; i++) x = R(), y = R(), AddEdge(x, y), AddEdge(y, x); Tarjan(1); dfs(1, 0); for (int i = 2; i &lt; n; i++) if (yes[i]) ans++; printf(\"%d\\n\", ans); for (int i = 2; i &lt; n; i++) if (yes[i]) printf(\"%d \", i); if (ans) printf(\"\\n\"); memset(head, 0, sizeof(head)); memset(low, 0, sizeof(low)); memset(dfn, 0, sizeof(dfn)); memset(hc, 0, sizeof(hc)); memset(stk, 0, sizeof(stk)); memset(yes, 0, sizeof(yes)); num = ecnt = ccnt = ans = p = 0; } return 0;} T3:寿司开始想着会不会是一个类似与Data Backup的贪心思路，推了一段时间开码，码完发现不对，完全失败，这时发现T2有问题去修锅。 修完锅继续想，zzz，想不出来，好像只会打暴力DFS，码码码，没码完到点了，GG 考完看题解，发现我过于Noob，无法看出出题人的显然性质。 我们看到环很自然就破环为链，这时我们枚举从上头选个环的断点。 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 2000000 + 233;int T, n; long long sbl[N], sbr[N], srl[N], srr[N], sl[N], sr[N], ans = 0x3f3f3f3f3f3f3f3f;char sushi[N];inline long long calc(int l, int r, int p) { return sl[p] - sl[l - 1] - sbl[l - 1] * (srl[p] - srl[l - 1]) + sr[p + 1] - sr[r + 1] - sbr[r + 1] * (srr[p + 1] - srr[r + 1]);}signed main() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%s\", sushi + 1); n = strlen(sushi + 1); for (int i = 1; i &lt;= n; i++) sushi[i + n] = sushi[i]; sbl[0] = srl[0] = sl[0] = sbr[2 * n + 1] = srr[2 * n + 1] = sr[2 * n + 1] = 0; for (int i = 1; i &lt;= 2 * n; i++) { sl[i] = sl[i - 1], sbl[i] = sbl[i - 1], srl[i] = srl[i - 1]; if (sushi[i] == 'B') sbl[i]++; else srl[i]++, sl[i] += sbl[i]; } for (int i = 2 * n; i &gt;= 1; i--) { sr[i] = sr[i + 1], sbr[i] = sbr[i + 1], srr[i] = srr[i + 1]; if (sushi[i] == 'B') sbr[i]++; else srr[i]++, sr[i] += sbr[i]; } for (int i = 1, j = 1; i &lt;= n; i++) { while (calc(i, i + n - 1, j) &gt;= calc(i, i + n - 1, j + 1)) ++j; ans = std::min(ans, calc(i, i + n, j)); } printf(\"%lld\\n\", ans); ans = 0x3f3f3f3f3f3f3f3f; } return 0;}","link":"/2019/09/11/hzoi-CSP-8/"},{"title":"hzoi-CSP-7","text":"考爆了，爆零，GG. T1:方程的解一眼Exgcd,求出最小解，再求出所有解。 然而Exgcd忘了，面向数据范围编程，特判少了，40分滚粗。 这题要特判的太多了。。。 要注意特判0 要注意特判符号 要注意特判有无正整数解 大体来说就是这3条，关于符号的问题，Exgcd肯定要正数，可以先把负数标记一下，取相反数，Exgcd后再改回来。 关于Exgcd，有必要再证明一下。。。 已知不定方程$ax + by = c$,首先由某不记得名字的推论(裴蜀定理)，它有解的必要条件为 $(a, b) | c$. 我们设$g = (a, b)$，先求解$ax + by = g$. 因为$(a, b) = (b, a % b), a \\% b = a - b \\lfloor \\frac{a}{b} \\rfloor$，所以$bx + (a - b \\lfloor \\frac{a}{b} \\rfloor)y = g$.即：$ay + b(x - \\lfloor \\frac{a}{b} \\rfloor y) = g$. 可得原方程一组解 $x_1 = y, y_1 = x - \\lfloor \\frac{a}{b} \\rfloor y$. 而$c = kg$,我们令该不定方程两边同乘$k$得 $ax_0 + by_0 = c$, 其中$x_0 = kx_1, y_0 = ky_1$. 这是原方程的一组特解。要获得同解，我们让$x + \\Delta x, y + \\Delta y$. $a(x_0 + \\Delta x) + b (y_0 + \\Delta y) = c$.为使方程平衡，$a \\Delta x = b \\Delta y$. 所以$\\Delta x = \\frac{b}{g}, \\Delta y = \\frac{a}{g}$. 原方程同解为$x = x_0 + t \\frac{b}{g}, y = y_0 - t \\frac{a}{g}, t \\in Z $. 求出刚好大于0的y，求出刚好大于0的x对应的最大y，差值除以步长$\\frac{a}{g}$再+1就是答案。 本题过于难调，$Have fun debugging!$ （逃 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;bits/stdc++.h&gt;#define ll long longll Exgcd(ll a, ll b, ll &amp;x, ll &amp;y) { if (b == 0) { x = 1, y = 0; return a; } ll r = Exgcd(b, a % b, y, x); y -= (a / b) * x; return r;}ll Solve(ll a, ll b, ll c) { bool opa = 0, opb = 0; if (a == 0 &amp;&amp; b == 0) return c == 0 ? -1 : 0; if (a == 0) return (c == 0 || (c % b == 0 &amp;&amp; c / b &gt; 0)) ? -1 : 0; if (b == 0) return (c == 0 || (c % a == 0 &amp;&amp; c / a &gt; 0)) ? -1 : 0; if (c &lt; 0) a = -a, b = - b, c = -c; if (a &lt; 0) a = -a, opa = 1; if (b &lt; 0) b = -b, opb = 1; ll x, y; ll g = Exgcd(a, b, x, y); if (c % g != 0) return 0; ll t = c / g; x *= t, y *= t, a /= g, b /= g, c = t; if (opa) a = -a, x = -x; if (opb) b = -b, y = -y; if (a &lt; 0) a = -a, b = -b, c = -c; if (a * b &lt; 0) return -1; x %= b; while (x &lt;= 0) x += b; y = (c - a * x) / b; if (y &lt; 0) return 0; ll y_min = y % a; while (y_min &lt;= 0) y_min += a; return y_min &lt;= y ? (y - y_min) / a + 1 : 0;}signed main() { int T; scanf(\"%d\", &amp;T); while (T--) { ll a, b, c; scanf(\"%lld%lld%lld\", &amp;a, &amp;b, &amp;c); ll ans = Solve(a, b, c); if (ans == -1 || ans &gt; 65535) puts(\"ZenMeZheMeDuo\"); else printf(\"%lld\\n\", ans); }} T2:Visit最开始T2是树上染色，疯狂码，结果换题了，郁闷。。。。 有一个显然的$O(N^3)$暴力，不提了 算了一下后发现四个方向的次数知1求3，想到枚举其中一个方向，这是就是一个简单的组合计数。 可以发现图形在四个象限没有区别，n和m取abs.设向上为a，向下为b，向右为c，向左为d。 那么总方案数为$C_T^a C_{T - a}^b C_{T - a - b} ^ c C_{T - a - b - c} ^ d$，最后一项为1，化简为$C_T^a C_{T - a}^b * C_{T - a - b} ^ c$,发现和d没啥关系。 $a - b = m$.所以$b = a - m$.又因为$a + c - b - d = n + m, a + c + b + d = t$,所以$2(a + c) = t + n + m$。所以$c = \\frac{t + n + m - 2a}{2}$. 然后读错数据范围，以为60%的数据模数为质数，开始狂写质因数分解求组合数，码码码码码。结果不知道咋回事调不出来，GG。T3也没时间写了。。。随便写了一下暴力，结果着急写错了，本次考试凉凉。 事实上只有30%的数据模数为质数 那么模数不是质数该怎么办呢？可以使用ExLucas. 首先给出了每一个质因子次数为1，这太好了（ 我们先把模数质因数分解，用每个质因数作为模数计算一个答案。最后使用CRT合并答案。 答案的式子是可以化成$\\frac{T!}{a!b!c!*d!}$的，但这玩意求不了。。。还是用组合形式，每次预处理出1到$min(T, prime[i])$的阶乘，用Lucas求。 记得多取模 可以判一下非法情况，当T和(n + m)奇偶性不同时无解然而数据并没有无解的情况 要不再证一下CRT数学苦手今天好惨 CRT用来求解一组由形如$x_i \\equiv a_i \\mod m_i$组成的线性同余方程组。 我们使用构造的方法得到解： 我们设$M = \\prod \\limits_{i = 1}^{n} m_i$，$t_i = \\frac{M}{m_i} $即，M是所有$m_i$的最小公倍数，t是除$m_i$外所有模数的乘积。 现在我们要为每个方程找一个$y_i$，使得$y_i \\equiv 0 \\mod m_k, k != i, y_i \\equiv 1 \\mod m_i$.第一个式子使得乘$y_i$对其他方程没有影响，第二个式子使得$y_i * a_i \\equiv a_i \\mod m_i$. 由第一个式子，$y_i = t_i QAQ$. 由第二个式子，$t_i QAQ \\equiv 1 \\mod m_i$,即$QAQ$是$t_i$在模$m_i$意义下的乘法逆元。 所以，最后$x = \\prod \\limits_{i = 1}^n a_i t_i t_i ^ {-1} $. 考试时真没想到要CRT，我还是Too young，需要学习一个 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define ll long longconst int N = 100233;ll T, mod, n, m, a, b, c, d, fac[N], pri[N], ans[N];ll Qpow(ll x, int b, ll p) { ll ret = 1; for (; b; b &gt;&gt;= 1, x = x * x % p) if (b &amp; 1) ret = ret * x % p; return ret;}ll CRT() { ll ret = 0, lcm = 1; for (int i = 1; i &lt;= pri[0]; i++) lcm *= pri[i]; for (int i = 1; i &lt;= pri[0]; i++) { ll t = lcm / pri[i]; ret = (ret + t * ans[i] * Qpow(t, pri[i] - 2, pri[i])) % lcm; } return (ret + lcm) % lcm;}ll C(ll n, ll m, ll p) { if (m &gt; n) return 0; if (n == 0 || m == n) return 1; return fac[n] * Qpow(fac[m], p - 2, p) % p * Qpow(fac[n - m], p - 2, p) % p;}ll Lucas(ll n, ll m, ll p) { return m == 0 ? 1 : C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;}void init(int id) { fac[1] = fac[0] = 1; for (int i = 2; i &lt;= std::min(T, pri[id]); i++) fac[i] = fac[i - 1] * i % pri[id];}void GG() { puts(\"0\"); exit(0);}signed main() { scanf(\"%lld%lld%lld%lld\", &amp;T, &amp;mod, &amp;n, &amp;m); n = abs(n), m = abs(m); if ((T &amp; 1) != ((n + m) &amp; 1) || T &lt; (n + m)) GG(); ll tmp = mod; for (int i = 2; i * i &lt;= mod; i++) if (tmp % i == 0) pri[++pri[0]] = i, tmp /= i; if (tmp &gt; 1) pri[++pri[0]] = tmp; for (int i = 1; i &lt;= pri[0]; i++) { init(i); for (int j = m; j &lt;= T; j++) { a = j, b = a - m, c = (T + m + n - 2 * a) / 2, d = c - n; if (d &lt; 0) break; ans[i] = (ans[i] + Lucas(T, a, pri[i]) % pri[i] * Lucas(T - a, b, pri[i]) % pri[i] * Lucas(T - a - b, c, pri[i]) % pri[i]) % pri[i]; } } printf(\"%lld\\n\", CRT()); return 0;} T3:光考试的时候看都没看，GG。 一看就有一个很显然的60分暴力： 写一个while(1)的死循环，开个vis[][][]记录到过的格子、方向，到了到过的格子且方向相同就跳出循环。 把反射和移动都放到一堆数组里，这样省得判断。 作为附中压行之王，我坚信我是附中最短传说。 12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;int n, m, k, xs, ys, dir, ans;const int dy[] = {0, -1, -1, 1, 1}, dx[] = {0, -1, 1, 1, -1}, r1[] = {0, 2, 1, 4, 3}, r2[] = {0, 4, 3, 2, 1}, r3[] = {0, 3, 4, 1, 2};bool wall[1005][1005], vis[1005][1005][6];char ds[5];signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k); if (n &gt; 1000 || m &gt; 1000) {printf(\"%lld\\n\", (long long) n * m); return 0;} for (int i = 1, x, y; i &lt;= k; i++) scanf(\"%d%d\", &amp;x, &amp;y), wall[x][y] = 1; scanf(\"%d%d%s\", &amp;xs, &amp;ys, ds); dir = ds[0] == 'N' ? ds[1] == 'E' ? 2 : 1 : ds[1] == 'E' ? 3 : 4; for (int i = 0; i &lt;= n + 1; i++) wall[i][0] = wall[i][m + 1] = 1; for (int i = 0; i &lt;= m + 1; i++) wall[0][i] = wall[n + 1][i] = 1; while (1) { if (vis[xs][ys][dir]) break; vis[xs][ys][dir] = 1; int xx = xs + dx[dir], yy = ys + dy[dir]; if (!wall[xx][yy]) {xs = xx, ys = yy; continue;} //撞不到 if (wall[xx][ys] &amp;&amp; !wall[xs][yy]) {dir = r1[dir], ys = yy; continue;} //撞墙 if (!wall[xx][ys] &amp;&amp; wall[xs][yy]) {dir = r2[dir], xs = xx; continue;} if (wall[xx][ys] &amp;&amp; wall[xs][yy]) {dir = r3[dir]; continue;} //撞到角了 dir = r3[dir]; } for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= m; j++) if (vis[i][j][1] || vis[i][j][2] || vis[i][j][3] || vis[i][j][4]) ans++; printf(\"%d\\n\", ans); return 0;} 正解doc看不懂，向郭老师学习。正解就是个优化过的暴力。。。。。 首先图肯定不能开个二维数组存，不然你必死（ 光线肯定走几条斜线，观察图可以发现性质，两种斜线分别x+y相同或x-y相同。于是开一堆vector，往每个vector仍每条斜线上的障碍物的x。 然后大力模拟，走的时候不用一步一步走了，直接upper_bound.这就是正解优化的地方，从一步一步走到走很多步。。。 关于结束的问题，有一个很简单的思路。可以先让光线走一次，从第一个障碍物那里开始模拟，第二次到这个障碍物便是走了一圈了。 特别的，如果180度反弹，直接跳出递归，反方向找。 我觉得我还是蛮短的。作为附中压行之王，我坚信我即使不是附中最短传说，也是附中次短传说。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;int n, m, k, xs, ys, dir, start_x, start_y, vised;long long ans; bool ret;const int N = 100233, dy[] = {0, -1, -1, 1, 1}, dx[] = {0, 1, -1, 1, -1};int r1[] = {0, 2, 1, 4, 3}, r2[] = {0, 3, 4, 1, 2}, r3[] = {0, 4, 3, 2, 1};std::vector&lt;int&gt; l1[N&lt;&lt;1], l2[N&lt;&lt;2]; //l1:\"/\", l2:\"\\\"char ds[5];void Rush(int x, int y, int dir) { int tmp = 0; switch (dir) { case 1: tmp = std::upper_bound(l1[x+y].begin(), l1[x+y].end(), x) - l1[x+y].begin(); xs = l1[x+y][tmp], ys = x + y - xs; ans += xs - x; break; case 2: tmp = std::upper_bound(l2[x-y+N].begin(), l2[x-y+N].end(), x) - l2[x-y+N].begin(); xs = l2[x-y+N][tmp-1], ys = xs - x + y; ans += x - xs; break; case 3: tmp = std::upper_bound(l2[x-y+N].begin(), l2[x-y+N].end(), x) - l2[x-y+N].begin(); xs = l2[x-y+N][tmp], ys = xs - x + y; ans += xs - x; break; case 4: tmp = std::upper_bound(l1[x+y].begin(), l1[x+y].end(), x) - l1[x+y].begin(); xs = l1[x+y][tmp-1], ys = x + y - xs; ans += x - xs; break; }}bool is_banned(int x, int y) { int tmp = std::lower_bound(l1[x+y].begin(), l1[x+y].end(), x) - l1[x+y].begin(); return l1[x+y][tmp] == x;}void Move(int x, int y, int d) { if (x == start_x &amp;&amp; y == start_y &amp;&amp; ++vised &gt; 1) return; Rush(x, y, d); if (is_banned(xs, ys-dy[d]) ^ is_banned(xs-dx[d], ys)) { if (is_banned(xs, ys-dy[d])) Move(xs - dx[d], ys, r1[d]); else Move(xs, ys - dy[d], r2[d]); } else ret = 1;}void Add(int x, int y) { l1[x+y].push_back(x), l2[x-y+N].push_back(x);}signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k); for (int i = 1, x, y; i &lt;= k; i++) scanf(\"%d%d\", &amp;x, &amp;y), l1[x+y].push_back(x), l2[x-y+N].push_back(x); scanf(\"%d%d%s\", &amp;start_x, &amp;start_y, ds); dir = ds[0] == 'N' ? ds[1] == 'E' ? 1 : 2 : ds[1] == 'E' ? 3 : 4; for (int i = 0; i &lt;= n + 1; i++) Add(i, 0), Add(i, m + 1); for (int i = 0; i &lt;= m + 1; i++) Add(0, i), Add(n + 1, i); for (int i = 0; i &lt;= n + m + 2; i++) std::sort(l1[i].begin(), l1[i].end()); for (int i = N - m - 1; i &lt;= N + n + 1; i++) std::sort(l2[i].begin(), l2[i].end()); Rush(start_x, start_y, dir); if (is_banned(xs, ys-dy[dir]) ^ is_banned(xs-dx[dir], ys)) { if (is_banned(xs, ys-dy[dir])) start_x = xs - dx[dir], start_y = ys, dir = r1[dir]; else start_x = xs, start_y = ys - dy[dir], dir = r2[dir]; } else start_x = xs - dx[dir], start_y = ys - dy[dir], dir = r3[dir]; ans = 0; Move(start_x, start_y, dir); if (ret) vised = 0, Move(start_x, start_y, r3[dir]), --ans; printf(\"%lld\\n\", ans); return 0;} 总结这次考试最大一个问题就是忘了数学那一堆公式。。。。血淋淋的教训告诉我们死记是不会有好的江来的（ 还是要自己证明定理，不然必忘 还有一个问题，调不出来题就先把暴力打了看看下一个，别吊死在一棵树上，最后还没调出来，树倒了。。。。","link":"/2019/09/11/hzoi-CSP-7/"},{"title":"0907����","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/09/11/test0907/"},{"title":"衡中NOIP模拟赛4 反思","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/07/18/hzoi-NOIP-5/"},{"title":"Luogu P2886 [USACO07NOV] Cow Relays","text":"矩阵乘法 f[k][i][j]表示从i到j走k步的最短路，显然得到一个转移方程：$f[k][i][j] = min(f[k - 1][i][t] + a[t][i])$. 这就是一个矩阵乘法的形式，本质上就是邻接矩阵的k次幂，只不过乘法过程中的相加变成了取min。 代码： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;int n, t, s, e, d[10005], cnt;struct Matrix { int a[105][105]; Matrix() { memset(a, 0x3f, sizeof(a)); } friend Matrix operator *(Matrix a, Matrix b) { Matrix c; for (int k = 1; k &lt;= cnt; k++) for (int i = 1; i &lt;= cnt; i++) for (int j = 1; j &lt;= cnt; j++) c.a[i][j] = std::min(a.a[i][k] + b.a[k][j], c.a[i][j]); return c; }}x;Matrix qpow(Matrix m, int b) { Matrix t = m; for (; b; b &gt;&gt;= 1, m = m * m) if (b &amp; 1) t = t * m; return t;}signed main() { scanf(\"%d%d%d%d\", &amp;n, &amp;t, &amp;s, &amp;e); for (int i = 1; i &lt;= t; i++) { int u, v, l; scanf(\"%d%d%d\", &amp;l, &amp;u, &amp;v); if (!d[u]) d[u] = ++cnt; if (!d[v]) d[v] = ++cnt; u = d[u], v = d[v]; x.a[u][v] = x.a[v][u] = std::min(x.a[u][v], l); } s = d[s], e = d[e]; Matrix ans = qpow(x, n - 1); printf(\"%d\\n\", ans.a[s][e]); return 0;}","link":"/2019/07/17/luogu-p2886/"},{"title":"BZOJ 3590 [SNOI 2013] Quare","text":"这和Tarjan有什么关系？为什么在Tarjan专题? 思路：选出无向图中包含所有点的权值和最小的双连通子图。 完全没思路，看了题解才会。。。。。 首先有一条重要的性质：一个双连通图可以拆成一个小双连通图和一条链。 我们首先能想到状压，用集合S表示点集。 那么设f[S]表示点集S构成的双连通图的最小权值和。 此题最大的思维难点来力：再预处理出两个数组g[S][i][j], h[S][i][1/0]. 其中数组g表示以i、j为链端点，链的点集为S，这条链的最小权值。数组h表示从点i到点集S的最短边和次短边。 我们为什么要求这两个数组？由上文性质可以想到状态的转移，一个点集S是从一个更小的点集T和一条链转移来的。而这条链汇入点集T时有两种情况：1.链只有一个点。那么链与T的两条连边就是这个点到T的最小边和次小边。2.链不止一个点，那么连边就是两个端点与T的最小边。 我还没写过这么长的状压DP。。。。。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;bits/stdc++.h&gt;int mx, n, m, t, ecnt, head[15], f[1 &lt;&lt; 13], g[1 &lt;&lt; 13][13][13], h[1 &lt;&lt; 13][13][3], bin[13], cnt[1 &lt;&lt; 13];struct Edge {int to, nxt, val;} e[233333];inline void AddEdge(int f, int to, int val) { e[++ecnt] = {to, head[f], val}, head[f] = ecnt;}signed main() { scanf(\"%d\", &amp;t); for (int i = 1; i &lt; 13; i++) bin[i] = (1 &lt;&lt; (i - 1)); for (int i = 1; i &lt; (1 &lt;&lt; 13); i++) cnt[i] = cnt[i &gt;&gt; 1] + (i &amp; 1); while (t--) { memset(g, 0x10, sizeof(g)); memset(h, 0x10, sizeof(h)); memset(f, 0x10, sizeof(f)); memset(head, 0, sizeof(head)); scanf(\"%d%d\", &amp;n, &amp;m); mx = (1 &lt;&lt; n) - 1; for (int i = 1, x, y, z; i &lt;= m; i++) { scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); AddEdge(x, y, z), AddEdge(y, x, z); } for (int i = 1; i &lt;= n; i++) g[bin[i]][i][i] = 0; for (int x = 1; x &lt;= n; x++) for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) g[bin[x] | bin[y]][x][y] = std::min(g[bin[x] | bin[y]][x][y], e[i].val); for (int S = 1; S &lt;= mx; S++) for (int x = 1; x &lt;= n; x++) for (int y = 1; y &lt;= n; y++) if ((bin[x] &amp; S) &amp;&amp; (bin[y] &amp; S)) for (int i = head[y], z = e[i].to; i; i = e[i].nxt, z = e[i].to) if (!(bin[z] &amp; S)) g[S | bin[z]][x][z] = std::min(g[S | bin[z]][x][z], g[S][x][y] + e[i].val); for (int S = 1; S &lt;= mx; S++) for (int x = 1; x &lt;= n; x++) if (!(S &amp; bin[x])) for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) if (S &amp; bin[y]) { if (e[i].val &lt;= h[S][x][0]) h[S][x][1] = h[S][x][0], h[S][x][0] = e[i].val; else if (e[i].val &lt; h[S][x][1]) h[S][x][1] = e[i].val; } for (int i = 1; i &lt;= n; i++) f[bin[i]] = 0; for (int D = 1; D &lt;= mx; D++) if (cnt[D] &gt;= 2) for (int S = (D - 1) &amp; D, T = D - S; S; S = (S - 1) &amp; D, T = D - S) for (int x = 1; x &lt;= n; x++) for (int y = 1; y &lt;= n; y++) if ((S &amp; bin[x]) &amp;&amp; (S &amp; bin[y])) { if (x == y) f[D] = std::min(f[D], f[T] + g[S][x][x] + h[T][x][0] + h[T][x][1]); else f[D] = std::min(f[D], f[T] + g[S][x][y] + h[T][x][0] + h[T][y][0]); } if (f[mx] &gt;= 0x10101010) puts(\"impossible\"); else printf(\"%d\\n\", f[mx]); } return 0;}","link":"/2019/07/17/bzoj-3590/"},{"title":"LOJ 2587 「APIO2018」铁人两项","text":"据说是圆方树模板题,但我卡了好久（ 开幕感谢学姐Labelray教我这道题（祝她NOI Day2翻盘 本题要找一个三元组&lt;s, c, f&gt;，自然可以想到枚举端点s、f，求有几个中间点，也就是sf所在路径上有几个点。这个过程可以理解为在许多个BCC间走动，也就是在圆方树的方点间走动。 我们把方点的权值设为BCC的大小，方案数就是x到y路径上点的权值和。我们把圆点的权值设为-1，因为它们可能在多个BCC中出现，会重复统计。最后问题转化为求树上任意两点间距离权值和，这是一个树形DP的问题，当然我们也可以不DP，考虑每个点的贡献。 首先要注意的是所有点不一定联通，这可能是一个圆方树森林。因此我们每Tarjan完一次就来求一次答案。 我们设siz[x]为以x为根节点子树有多少圆点。有两种路径，一种是在x子树内两个点经过i，另一种是x子树内一个点与子树外一个点经过点x。 我们再设：y为x子树的根节点，tot为整棵圆方树的圆点数。需要注意的一点是这里的siz[x]是每处理一棵子树再加上去的，是截至目前已经处理过的x子树圆点数。 对于第一种，每个y对答案的贡献为siz[x] * siz[y] * val[x]。对于第二种，x的贡献为siz[x] * (num - siz[x]) * val[x]。这里的siz[x]已经处理完了。 注意只有ans开long long是不行的，右边也要强制转换。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;const int N = 200233;struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1];int head[N], hc[N], ecnt, ccnt, n, m, val[N], siz[N];long long ans;inline void AddEdge(int f, int to) { e[++ecnt] = {to, head[f]}, head[f] = ecnt;}inline void AddC(int f, int to) { c[++ccnt] = {to, hc[f]}, hc[f] = ccnt;}int dfn[N], low[N], stk[N], num, p, tot;void Tarjan(int x) { dfn[x] = low[x] = ++num, stk[++p] = x; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (!dfn[y]) { Tarjan(y), low[x] = std::min(low[x], low[y]); if (low[y] &gt;= dfn[x]) { AddC(++tot, x), AddC(x, tot); int z; val[tot]++; do { z = stk[p--], AddC(tot, z), AddC(z, tot), val[tot]++; } while (y != z); } } else low[x] = std::min(low[x], dfn[y]); }}void dfs(int x, int fa) { if (x &lt;= n) siz[x] = 1; for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) if (y != fa) dfs(y, x), ans += 1LL * siz[x] * siz[y] * val[x], siz[x] += siz[y]; ans += 1LL * siz[x] * (num - siz[x]) * val[x];} signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); AddEdge(x, y), AddEdge(y, x); } tot = n; for (int i = 1; i &lt;= n; i++) val[i] = -1; for (int i = 1; i &lt;= n; i++) if (!dfn[i]) num = 0, Tarjan(i), dfs(i, 0); return !printf(\"%lld\\n\", ans &lt;&lt; 1);}","link":"/2019/07/17/loj-2587/"},{"title":"LOJ 2311「ZJOI2006」物流运输","text":"神题。跪了 思路：这题图论DP结合，绝了 用Dijkstra预处理第i天到第j天从A到B的最短路dis[i][j]，每次ban掉被封锁的码头。 第i天最小成本f[i] = min(f[j] + dis[j + 1][i] * ()) 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;const int N = 23333;struct Edge {int to, nxt, d;} e[N &lt;&lt; 1];int ecnt, head[N], n, m, k, t, f[233], dis[233], dis_to_m[233][233], tim;bool ins[N], ban[50][200];void AddEdge(int f, int to,int d) { e[++ecnt] = (Edge) {to, head[f], d}, head[f] = ecnt;}bool check(int x, int l, int r) { for (int i = l; i &lt;= r; i++) if (ban[x][i]) return 0; return 1;}int Dijkstra(int l, int r) { memset(dis, 0x3f, sizeof(dis)); memset(ins, 0, sizeof(ins)); std::priority_queue&lt;std::pair&lt;int, int&gt; &gt; q; dis[1] = 0; q.push(std::make_pair(0, 1)); while (q.size()) { int x = q.top().second; q.pop(); if (ins[x]) continue; ins[x] = 1; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (dis[y] &gt; dis[x] + e[i].d &amp;&amp; check(y, l, r)) { dis[y] = dis[x] + e[i].d; if (!ins[y]) q.push(std::make_pair(-dis[y], y)); } } } return dis[m];}signed main() { std::ios::sync_with_stdio(0); std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; t; for (int i = 1, x, y, z; i &lt;= t; i++) { std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; z; AddEdge(x, y, z), AddEdge(y, x, z); } std::cin &gt;&gt; t; for (int i = 1, p, a, b; i &lt;= t; i++) { std::cin &gt;&gt; p &gt;&gt; a &gt;&gt; b; for (int i = a; i &lt;= b; i++) ban[p][i] = 1; } for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= i; j++) dis_to_m[j][i] = Dijkstra(j, i); memset(f, 0x3f, sizeof(f)); f[0] = -k; for (int i = 1; i &lt;= n; i++) for (int j = 0; j &lt; i; j++) if (dis_to_m[j + 1][i] != 0x3f3f3f3f) f[i] = std::min(f[j] + dis_to_m[j + 1][i] * (i - j) + k, f[i]); std::cout &lt;&lt; f[n] &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/17/loj-2311/"},{"title":"BZOJ 3331 [BeiJing2013] 压力","text":"圆方树真好用.jpg 思路:显然,每个BCC对答案的贡献为0.因此考虑缩点,但BCC…. 有一种好的数据结构-圆方树! 入门戳这里 圆方树YES 最后只需要统计经过每个圆点的路径数,考虑树上差分.在路径两端点++,LCA—,fa[LCA]—,最后dfs统计. LCA我选择树剖.(因为无脑 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;const int N = 400233;int n, m, q, ecnt, ccnt, p, num, tot, head[N], hc[N], dfn[N], low[N], stk[N], ans[N], delta[N];struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1];inline void AddEdge(int f, int to) { e[++ecnt] = (Edge) {to, head[f]}, head[f] = ecnt;}inline void AddC(int f, int to) { c[++ccnt] = (Edge) {to, hc[f]}, hc[f] = ccnt;}void Tarjan(int x) { dfn[x] = low[x] = ++num, stk[++p] = x; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (!dfn[y]) { Tarjan(y), low[x] = std::min(low[x], low[y]); if (low[y] &gt;= dfn[x]) { AddC(++tot, x), AddC(x, tot); int z; do { z = stk[p--], AddC(tot, z), AddC(z, tot); } while (y != z); } } else low[x] = std::min(low[x], dfn[y]); }}int fa[N], dep[N], siz[N], tp[N], son[N];void dfs1(int x, int f) { fa[x] = f, dep[x] = dep[f] + 1, siz[x] = 1; for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) { if (y != f) { dfs1(y, x), siz[x] += siz[y]; if (siz[y] &gt; siz[son[x]]) son[x] = y; } }}void dfs2(int x, int tpp) { tp[x] = tpp; if (!son[x]) return; dfs2(son[x], tpp); for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) if (y != fa[x] &amp;&amp; y != son[x]) dfs2(y, y);}int GetLCA(int x, int y) { while (tp[x] != tp[y]) { if (dep[tp[x]] &lt; dep[tp[y]]) y = fa[tp[y]]; else x = fa[tp[x]]; } return dep[x] &lt; dep[y] ? x : y;}void dfs(int x) { for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) if (y != fa[x]) dfs(y), delta[x] += delta[y];}signed main() { std::ios::sync_with_stdio(0); std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; q; for (int i = 1, x, y; i &lt;= m; i++) std::cin &gt;&gt; x &gt;&gt; y, AddEdge(x, y), AddEdge(y, x); tot = n; for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); dfs1(1, 0), dfs2(1, 1); while (q--) { int x, y; std::cin &gt;&gt; x &gt;&gt; y; int lca = GetLCA(x, y); ++delta[x], ++delta[y], --delta[lca], --delta[fa[lca]]; } dfs(1); for (int i = 1; i &lt;= n; i++) std::cout &lt;&lt; delta[i] &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/17/bzoj-3331/"},{"title":"LOJ 2255 [SNOI 2017] 炸弹","text":"简化了的线段树优化建图 思路:一个炸弹炸的范围是一个区间,考虑线段树优化建图. 这道题是一个点向一个区间连边,就只需要建一棵线段树了. 建一棵线段树,从上向下连节点.当我们需要用炸弹向爆炸区间连边时,我们从它所对应的线段树叶子节点向线段树的区间连边 对于可以互相炸到的炸弹,我们可以跑一边Tarjan缩个点,方便统计. 统计理论上应该用拓扑,但我脑抽了写了个dfs( 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;#define ll long longconst int N = 5002333, MO = 1000000007;struct Edge {int to, nxt;} e[N &lt;&lt; 3], c[N &lt;&lt; 3];struct SegTree { int l, r, ls, rs;} t[N &lt;&lt; 2];int head[N], ecnt, ccnt, hc[N], tot, pos[N], n, root, f[N], ans, vis[N], tim, cnt;ll x[N], r[N];void AddEdge(int f, int to) { e[++ecnt] = {to, head[f]}, head[f] = ecnt;}void AddC(int f, int to) { c[++ccnt] = {to, hc[f]}, hc[f] = ccnt;}void Build(int &amp;p, int l, int r) { p = ++tot, t[p].l = l, t[p].r = r; if (l == r) {pos[l] = p; return;} int mid = (l + r) &gt;&gt; 1; Build(t[p].ls, l, mid), Build(t[p].rs, mid + 1, r); AddEdge(p, t[p].ls), AddEdge(p, t[p].rs);}void Link(int p, int l, int r, int v) { if (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) { if (pos[v] == p) return; AddEdge(pos[v], p); return; } int mid = (t[p].l + t[p].r) &gt;&gt; 1; if (l &lt;= mid) Link(t[p].ls, l, r, v); if (r &gt; mid) Link(t[p].rs, l, r, v);}int dfn[N], low[N], stk[N], id[N], siz[N], p, num, scc;bool ins[N];void Tarjan(int x) { dfn[x] = low[x] = ++num; stk[++p] = x, ins[x] = 1; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (!dfn[y]) { Tarjan(y), low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (low[x] == dfn[x]) { ++scc; int z; do { z = stk[p--], ins[z] = 0, id[z] = scc; } while (x != z); }}void dfs(int x) { vis[x] = tim, cnt += siz[x]; for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) if (vis[y] != tim) vis[y] = tim, dfs(y);}int Solve(int x) { x = id[pos[x]]; if (f[x]) return f[x]; tim++, cnt = 0; dfs(x); return f[x] = cnt;}signed main() { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) scanf(\"%lld%lld\", &amp;x[i], &amp;r[i]); Build(root, 1, n); for (int i = 1; i &lt;= n; i++) { int L = std::lower_bound(x + 1, x + 1 + n, x[i] - r[i]) - x; int R = std::upper_bound(x + 1, x + 1 + n, x[i] + r[i]) - x - 1; Link(1, L, R, i); } for (int i = 1; i &lt;= n; i++) if (!dfn[pos[i]]) Tarjan(pos[i]); for (int x = 1; x &lt;= tot; x++) for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) if (id[x] != id[y]) AddC(id[x], id[y]); for (int i = 1; i &lt;= n; i++) siz[id[pos[i]]]++; for (int i = 1; i &lt;= n; i++) (ans += (long long) i * (long long) Solve(i) % MO) %= MO; return !printf(\"%d\\n\", ans);}","link":"/2019/07/17/loj-2255/"},{"title":"BZOJ 3073 Journeys","text":"线段树优化建图 思路:$N\\le 500000$,暴力建图$N^2$瞬间暴死,GG. 可以发现都是区间向区间连边,这里就可以用线段树优化建图. 线段树只需要连最多nlogn条边就可以建图,你必活(逃 具体的做法: 建两棵线段树,1号线段树儿子向爸爸连边,作为入点, 0号线段树爸爸向儿子连边,作为出点.0号线段树的每个叶子再向1号线段树对应叶子连边.需要加边时, 从1号线段树对应区间连一个虚点.虚点再连向0号线段树的对应节点. 可以自己手画两棵线段树出来模拟一下,理解一下这么连为什么是对的( 这道题要求最短路,还需要考虑一下边权的问题.除1号线段树与虚点连边的边权为1外,其他边权都为0.这要才能保证每个区间间的路径权为1. 跑最短路时以p节点所对应1号线段树中叶子节点为起点,跑堆优化Dijkstra. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;bits/stdc++.h&gt;inline int Read() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}const int N = 3000005;struct Edge {int to, nxt, val;} e[N &lt;&lt; 3];struct SegTree { int ls, rs, l, r;} tr[N];int head[N], ecnt, tot, pos[N], n, m, p, root_0, root_1;void AddEdge(int f, int to, int val) { e[++ecnt] = (Edge) {to, head[f], val}, head[f] = ecnt;}void Build(int &amp;p, int l, int r, int opt) { p = ++tot, tr[p].l = l, tr[p].r = r; if (l == r) { if (opt) pos[l] = p; //这里记住1号线段树的叶子位置,之后都用得到 return; } int mid = (l + r) &gt;&gt; 1; Build(tr[p].ls, l, mid, opt), Build(tr[p].rs, mid + 1, r, opt); if (opt) AddEdge(tr[p].ls, p, 0), AddEdge(tr[p].rs, p, 0); else AddEdge(p, tr[p].ls, 0), AddEdge(p, tr[p].rs, 0);}void ConnectTheLeaves(int p) { if (tr[p].l == tr[p].r) { AddEdge(p, pos[tr[p].l], 0); return; } ConnectTheLeaves(tr[p].ls); ConnectTheLeaves(tr[p].rs);} /*这个函数就是连接树与虚点了.opt为0表示从虚点向0号线段树连边,1相反.*/void AddOnTree(int p, int l, int r, int v, int opt) { if (tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r) { if (opt) AddEdge(p, v, 1); else AddEdge(v, p, 0); return; } int mid = (tr[p].l + tr[p].r) &gt;&gt; 1; if (l &lt;= mid) AddOnTree(tr[p].ls, l, r, v, opt); if (r &gt; mid) AddOnTree(tr[p].rs, l, r, v, opt);}void Add(int l_1, int r_1, int l_2, int r_2) { AddOnTree(root_1, l_1, r_1, ++tot, 1); AddOnTree(root_0, l_2, r_2, tot, 0);}int dis[N];bool vis[N];void Dijkstra() { memset(dis, 0x3f, sizeof(dis)); std::priority_queue&lt;std::pair&lt;int, int&gt; &gt; q; dis[pos[p]] = 0; q.push(std::make_pair(0, pos[p])); while (q.size()) { int x = q.top().second; q.pop(); if (vis[x]) continue; vis[x] = 1; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (dis[y] &gt; dis[x] + e[i].val) { dis[y] = dis[x] + e[i].val; if (!vis[y]) q.push(std::make_pair(-dis[y], y)); } } }}signed main() { n = Read(), m = Read(), p = Read(); Build(root_1, 1, n, 1), Build(root_0, 1, n, 0), ConnectTheLeaves(root_0); for (int i = 1; i &lt;= m; i++) { int a = Read(), b = Read(), c = Read(), d = Read(); Add(a, b, c, d), Add(c, d, a, b); } Dijkstra(); for (int i = 1; i &lt;= n; i++) std::cout &lt;&lt; dis[pos[i]] &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/17/bzoj-3073/"},{"title":"Luogu P2015 二叉苹果树","text":"树形DP蒟蒻.jpg 思路:蒟蒻树形DP没学好,最近从头开始重学(捂脸 树形DP设计状态的重要方法是f[i][j]i表示以i为根子树,j按照所求去设计. 而转移状态主要就是从儿子向爸爸转移. 回到本题,设f[x][i]为以x为根的子树中保留树枝数量为i的最多苹果数. 状态转移方程:$f[x][i] = max(f[x][i - k] + f[y][k])$. dfs时注意一下对根节点的特判. 代码:123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;const int N = 233;struct Edge {int to, nxt, val;} e[N &lt;&lt; 1];int n, q, f[N][N], head[N], ecnt;inline void AddEdge(int f, int to, int val) { e[++ecnt] = {to, head[f], val}, head[f] = ecnt;}void dfs(int x, int fa) { for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (y == fa) continue; f[y][1] = e[i].val; dfs(y, x); for (int j = q; j &gt;= 1; j--) for (int k = 0; k &lt;= j; k++) if ((j != 1 &amp;&amp; k != j) || x == 1) f[x][j] = std::max(f[x][j], f[x][j - k] + f[y][k]); }}signed main() { scanf(\"%d%d\", &amp;n, &amp;q); for (int i = 1, x, y, z; i &lt; n; i++) { scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); AddEdge(x, y, z), AddEdge(y, x, z); } dfs(1, 0); return !printf(\"%d\\n\", f[1][q]);}","link":"/2019/07/17/luogu-p2015/"},{"title":"衡中NOIP模拟赛4","text":"Please enter the password to read the blog. Incorrect Password! No content to display! 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","link":"/2019/07/16/hzoi-NOIP-4/"},{"title":"BZOJ 3033 太鼓达人","text":"dfs神题（不 思路:当时看题属实懵逼 第一问很简单，每个位置01两种，最后答案$2^k$. 第二问我很好骑。。。是要求所有01串首尾相连形成串的最小值 数据范围又不大，显然起点是全0的串，dfs就完事了（ 最后查了题解，我们其实可以把k-1位的串看成节点，k位串看成边去建图，由于每个点入度等于出度，这是一个欧拉图。 以全0节点为起点，优先走字典序小的边，找欧拉回路，这是正解（ 代码：1234567891011121314151617181920212223#include &lt;bits/stdc++.h&gt;int k, m, ans[(1 &lt;&lt; 12)];bool vis[(1 &lt;&lt; 12)];bool dfs(int x, int k) { if (vis[x]) return 0; if (k == m) return 1; vis[x] = 1; ans[k] = x &amp; 1; if (dfs((x &lt;&lt; 1) &amp; (m - 1), k + 1)) return 1; if (dfs(((x &lt;&lt; 1) | 1) &amp; (m - 1), k + 1)) return 1; return 0;}signed main() { std::cin &gt;&gt; k; std::cout &lt;&lt; (m = (1 &lt;&lt; k)) &lt;&lt; \" \"; dfs(0, 1); for (int i = 1; i &lt;= k - 1; i++) std::cout &lt;&lt; \"0\"; for (int i = 1; i &lt;= m - k + 1; i++) std::cout &lt;&lt; ans[i]; std::cout &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/16/bzoj-3033/"},{"title":"BZOJ 2791 [POI2012] Rendezvous","text":"真实毒瘤题 思路:显然,最后建图结果是一个内向基环树森林 这题就是要大力分类讨论。。。 如果两个点不在同一棵树上，无解，输出-1 -1 如果在同一棵树上，再判断两个点是否都在同一棵子树里。 如果在同一棵子树，我们可以直接求LCA。 如果不在同一棵子树上，我们需要先令两个点都走到环上，最后的答案一定是从一个点走到另一个点路径的较小值。 写这种毒瘤题好烦啊（（（ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;const int N = 500000 + 2333;int n, k, tot, tp, cnt, fa[N][21], color[N], root[N], dep[N], stack[N], siz[N], id[N];bool on_circle[N], vis[N], ins[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}void dfs(int x) { stack[++tp] = x, vis[x] = ins[x] = 1; int f = fa[x][0]; if (ins[f]) { int tmp = 0; color[f] = ++cnt, on_circle[f] = 1, fa[f][0] = 0, root[f] = f, id[f] = tmp; for (int i = tp; stack[i] != f; i--) { on_circle[stack[i]] = 1, color[stack[i]] = cnt, id[stack[i]] = ++tmp; root[stack[i]] = stack[i], fa[stack[i]][0] = 0; } siz[cnt] = tmp + 1, ins[x] = 0; return; } else { if (!vis[f]) dfs(f); ins[x] = 0; if (on_circle[x]) return; color[x] = color[f], dep[x] = dep[f] + 1, root[x] = root[f]; for (int i = 1; i &lt;= 20; i++) fa[x][i] = fa[ fa[x][i - 1] ][i - 1]; }}int LCA(int a, int b){ if (dep[a] &gt; dep[b]) std::swap(a, b); for (int i = 20; i &gt;= 0; --i) if (dep[a] &lt;= dep[b] - (1 &lt;&lt; i)) b = fa[b][i]; if (a == b) return a; for (int i = 20; i &gt;= 0; --i) if (fa[a][i] != fa[b][i]) a = fa[a][i], b = fa[b][i]; return fa[a][0];}signed main() { n = R(), k = R(); for (int i = 1; i &lt;= n; i++) fa[i][0] = R(); for (int i = 1; i &lt;= n; i++) if (!vis[i]) tp = 0, dfs(i); while (k--) { int a, b, x, y; a = R(), b = R(); if (color[a] != color[b]) { puts(\"-1 -1\"); continue; } if (root[a] == root[b]) { int lca = LCA(a, b); x = dep[a] - dep[lca], y = dep[b] - dep[lca]; printf(\"%d %d\\n\", x, y); } else { x = dep[a], y = dep[b], a = root[a], b = root[b], tot = siz[color[a]]; int x_1 = x + (id[a] - id[b] + tot) % tot, y_1 = y; int x_2 = x, y_2 = y + (id[b] - id[a] + tot) % tot; int max_1 = std::max(x_1, y_1), max_2 = std::max(x_2, y_2); int min_1 = std::min(x_1, y_1), min_2 = std::min(x_2, y_2); if (max_1 &lt; max_2 || (max_1 == max_2 &amp;&amp; min_1 &lt; min_2) || (max_1 == max_2 &amp;&amp; min_1 == min_2 &amp;&amp; x_1 &gt;= y_1)) printf(\"%d %d\\n\", x_1, y_1); else printf(\"%d %d\\n\", x_2, y_2); } } return 0;}","link":"/2019/07/16/bzoj-2791/"},{"title":"BZOJ 2654 Tree","text":"开 幕 雷 击 思路:看见要求”恰好”xxx就感到不可做((( 大体思路是先建一棵MST,然后再在它上面修改,使得这棵树有need条白边. 我们去用白边替换MST上的黑边肯定是布星的,改一次就要动一棵子树,难以保证权最小. 没有思路就上厕所((,突然有了一个idea,我们可以改白边的边权再生成MST,使得它的数量等于need. 显然改大了白边就少了,改小了白边就大了,似乎有单调性,珂以二分( 这二分好毒瘤啊,调了好几次 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;const int N = 100000 + 233;struct Edge { int from, to, nxt, val, color; friend bool operator &lt;(Edge a, Edge b) { return a.val != b.val ? a.val &lt; b.val : a.color &lt; b.color; }} e[N &lt;&lt; 1];int ecnt, head[N], v, m, need, fa[N];void AddEdge(int f, int to, int val, int color) { e[++ecnt] = (Edge) {f, to, head[f], val, color}, head[f] = ecnt;}int get(int x) { return x == fa[x] ? x : fa[x] = get(fa[x]);}int check(int delta) { for (int i = 1; i &lt;= v; i++) fa[i] = i; for (int i = 1; i &lt;= m; i++) if (!e[i].color) e[i].val += delta; int tot = 0, ans = 0; std::sort(e + 1, e + 1 + m); for (int i = 1; i &lt;= m; i++) { int x = e[i].from, y = e[i].to; if (get(x) != get(y)) { fa[get(x)] = get(y); if (!e[i].color) ++tot; ans += e[i].val; } } for (int i = 1; i &lt;= m; i++) if (!e[i].color) e[i].val -= delta; return tot &gt;= need ? ans : -1;}signed main() { std::ios::sync_with_stdio(0); std::cin &gt;&gt; v &gt;&gt; m &gt;&gt; need; for (int i = 1, s, t, c, col; i &lt;= m; i++) { std::cin &gt;&gt; s &gt;&gt; t &gt;&gt; c &gt;&gt; col; AddEdge(s + 1, t + 1, c, col); } int l = -300, r = 300, mid, ans = 0; while (l &lt;= r) { mid = (l + r) &gt;&gt; 1; int tmp = check(mid); if (tmp != -1) ans = tmp - need * mid, l = mid + 1; else r = mid - 1; } std::cout &lt;&lt; ans &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/11/bzoj-2654/"},{"title":"初中学业OI水平考试","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/06/20/test0620/"},{"title":"Luogu P1903 [国家集训队]数颜色 / 维护队列","text":"带修莫队板子 Luogu P1903 [国家集训队]数颜色 / 维护队列 思路:区间题显然可以莫队,但这题多了一个修改. 因此就需要用到带修莫队. 带修莫队比起普通莫队多了修改指针的移动,我们记录一下每个询问区间需要进行几次修改,在需要修改时现用现改,如果改多了就往回改.其余与普通莫队一致. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;const int N = 1e6 + 233;int n, m, acnt, ccnt, color[N], block, kind, pos[N], cnt[N], ans[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}struct Ask { int l, r, pre, id; friend bool operator &lt;(Ask a, Ask b) { if (pos[a.l] != pos[b.l]) return a.l &lt; b.l; if (pos[a.r] != pos[b.r]) return a.r &lt; b.r; return a.pre &lt; b.pre; }} ask[N];struct Change { int p, c;} chg[N];inline void Add(int x) {if (++cnt[x] == 1) ++kind;}inline void Del(int x) {if (--cnt[x] == 0) --kind;}inline void CH(int now, int i) { if (chg[now].p &lt;= ask[i].r &amp;&amp; chg[now].p &gt;= ask[i].l) { if (--cnt[color[chg[now].p]] == 0) --kind; if (++cnt[chg[now].c] == 1) ++kind; } std::swap(color[chg[now].p], chg[now].c);}signed main() { //int st = clock() / CLOCKS_PER_SEC; n = R(), m = R(); block = (int) pow(n, 0.66); for (int i = 1; i &lt;= n; ++i) color[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= m; ++i) { char opt[5]; int a, b; scanf(\"%s\", opt); a = R(), b = R(); if (opt[0] == 'Q') ask[++acnt].l = a, ask[acnt].r = b, ask[acnt].pre = ccnt, ask[acnt].id = acnt; else chg[++ccnt].p = a, chg[ccnt].c = b; } std::sort(ask + 1, ask + 1 + acnt); for (int i = 1, l = 1, r = 0, now = 0; i &lt;= acnt; ++i) { while (l &lt; ask[i].l) Del(color[l++]); while (l &gt; ask[i].l) Add(color[--l]); while (r &lt; ask[i].r) Add(color[++r]); while (r &gt; ask[i].r) Del(color[r--]); while (now &lt; ask[i].pre) CH(++now, i); while (now &gt; ask[i].pre) CH(now--, i); ans[ask[i].id] = kind; } for (int i = 1; i &lt;= acnt; ++i) printf(\"%d\\n\", ans[i]); /*int ed = clock() / CLOCKS_PER_SEC; printf(\"\\n%d\\n\", ed - st);*/ return 0;}","link":"/2019/06/15/luogu-p1903/"},{"title":"Luogu P2590 [ZJOI2008]树的统计","text":"挺难搞的数位DP,顺便总结一下 Luogu P4124 [CQOI2016]手机号码 思路:数位DP有递推和记搜两种写法,记搜好想好写. 套路还是比较明显,拆数dfs. 根据需要设计状态, dfs(int pos, int pre, bool lim, ......) 本题需要记录的状态就相当多..所以就记下来,都可以记. 吐槽一下,说好的一定是11位数,怎么数据还有不合法的???O_o 代码:123456789101112131415161718192021222324252627282930313233343536#include &lt;bits/stdc++.h&gt;#define ll long longll L, R, dp[12][12][12][2][2][2];int dig[233], cnt;ll dfs(int pos, int pre1, int pre2, bool lim, bool eight, bool four, bool ok) { if (eight &amp;&amp; four) return 0; if (!pos) return ok; if (!lim &amp;&amp; dp[pos][pre1][pre2][eight][four][ok] != -1) return dp[pos][pre1][pre2][eight][four][ok]; int upper = lim ? dig[pos] : 9; ll ans = 0; for (int i = 0; i &lt;= upper; i++) ans += dfs(pos - 1, i, pre1, lim &amp;&amp; (i == upper), eight || (i == 8), four || (i == 4), ok || (i == pre1 &amp;&amp; i == pre2)); if (!lim) dp[pos][pre1][pre2][eight][four][ok] = ans; return ans;}ll Solve(ll x) { cnt = 0; ll ret = 0; memset(dig, 0, sizeof(dig)); memset(dp, -1, sizeof(dp)); while (x) dig[++cnt] = x % 10, x /= 10; if (cnt != 11) return 0; for (int i = 1; i &lt;= dig[cnt]; i++) ret += dfs(cnt - 1, i, 0, i == dig[cnt], i == 8, i == 4, 0); return ret;}signed main() { scanf(\"%lld%lld\", &amp;L, &amp;R); printf(\"%lld\", Solve(R) - Solve(L - 1)); return 0;}","link":"/2019/06/15/luogu-p2590/"},{"title":"Luogu P4124 [CQOI2016]手机号码","text":"挺难搞的数位DP,顺便总结一下 Luogu P4124 [CQOI2016]手机号码 思路:数位DP有递推和记搜两种写法,记搜好想好写. 套路还是比较明显,拆数dfs. 根据需要设计状态, dfs(int pos, int pre, bool lim, ......) 本题需要记录的状态就相当多..所以就记下来,都可以记. 吐槽一下,说好的一定是11位数,怎么数据还有不合法的???O_o 代码:123456789101112131415161718192021222324252627282930313233343536#include &lt;bits/stdc++.h&gt;#define ll long longll L, R, dp[12][12][12][2][2][2];int dig[233], cnt;ll dfs(int pos, int pre1, int pre2, bool lim, bool eight, bool four, bool ok) { if (eight &amp;&amp; four) return 0; if (!pos) return ok; if (!lim &amp;&amp; dp[pos][pre1][pre2][eight][four][ok] != -1) return dp[pos][pre1][pre2][eight][four][ok]; int upper = lim ? dig[pos] : 9; ll ans = 0; for (int i = 0; i &lt;= upper; i++) ans += dfs(pos - 1, i, pre1, lim &amp;&amp; (i == upper), eight || (i == 8), four || (i == 4), ok || (i == pre1 &amp;&amp; i == pre2)); if (!lim) dp[pos][pre1][pre2][eight][four][ok] = ans; return ans;}ll Solve(ll x) { cnt = 0; ll ret = 0; memset(dig, 0, sizeof(dig)); memset(dp, -1, sizeof(dp)); while (x) dig[++cnt] = x % 10, x /= 10; if (cnt != 11) return 0; for (int i = 1; i &lt;= dig[cnt]; i++) ret += dfs(cnt - 1, i, 0, i == dig[cnt], i == 8, i == 4, 0); return ret;}signed main() { scanf(\"%lld%lld\", &amp;L, &amp;R); printf(\"%lld\", Solve(R) - Solve(L - 1)); return 0;}","link":"/2019/06/15/luogu-p4124/"},{"title":"Luogu P5337 [TJOI2019]甲苯先生的字符串","text":"省选矩阵乘法水题 Luogu P5337 [TJOI2019]甲苯先生的字符串 思路:我们首先可以得到一个显然的转移方程: $f[i][j]$表示写下长度为i字符串,最后一个字符为j的种类数. $f[i][j]=\\sum f[i-1][k]$,若j与k可连. 我们把s1中相邻的字符预处理出来,$w[i][j]$表示i与j是否可连,可连为1不可连为0. 则$f[i][j]=\\sum f[i-1][k]*w[k][j]$. 右半边这不就是矩阵乘法的展开形式嘛…… 用矩阵乘法搞一下就A了((( 代码:123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;#define ll long longconst int MO = 1e9 + 7;ll n, tot; int len; char s[100000 + 233];struct Matrix { ll a[35][35]; Matrix() { memset(a, 0, sizeof(a)); } friend Matrix operator *(Matrix a, Matrix b) { Matrix c; for (int i = 1; i &lt;= 26; ++i) for(int j = 1; j &lt;= 26; ++j) for (int k = 1; k &lt;= 26; ++k) c.a[i][j] = (c.a[i][j] + a.a[i][k] * b.a[k][j]) % MO; return c; }} ans, e, ret, q;signed main() { scanf(\"%lld%s\", &amp;n, s + 1); len = strlen(s + 1); for (int i = 1; i &lt;= 26; ++i) for (int j = 1; j &lt;= 26; ++j) e.a[i][j] = 1; for (int i = 1; i &lt;= 26; ++i) ans.a[1][i] = 1, q.a[i][i] = 1; for (int i = 1; i &lt; len; ++i) e.a[s[i] - 'a' + 1][s[i + 1] - 'a' + 1] = 0; for (int i = 1; i &lt;= 26; ++i) ret.a[i][i] = 1; for (--n ; n; n &gt;&gt;= 1) { if (n &amp; 1) q = q * e; e = e * e; } ans = ans * q; for (int i = 1; i &lt;= 26; ++i) tot = (tot + ans.a[1][i]) % MO; return !printf(\"%lld\\n\", tot);}","link":"/2019/06/15/luogu-p5337/"},{"title":"luogu-p3403","text":"","link":"/2019/06/15/luogu-p3403/"},{"title":"luogu-p3258","text":"","link":"/2019/06/15/luogu-p3258/"},{"title":"luogu-p4315","text":"","link":"/2019/06/15/luogu-p4315/"},{"title":"luogu-p4281","text":"","link":"/2019/06/15/luogu-p4281/"},{"title":"Luogu CF148D Bag of mice","text":"期望DP 思路：学姐说记忆化搜索冗余状态少跑得快（ 主要都是分类讨论，懒得写了（ 代码：123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;int w, b;double f[1005][1005];double dfs(int nw, int nb) { if (!nw) return 0.0; if (!nb) return 1.0; if (f[nw][nb]) return f[nw][nb]; double ret = (double) nw / (nw + nb); if (nb == 2) ret += (double) nb / (nw + nb) * (nb - 1) / (nw + nb - 1) * dfs(nw - 1, nb - 2); else if (nb &gt;= 3) ret += (double) nb / (nw + nb) * (nb - 1) / (nw + nb - 1) * ((double) nw / (nw + nb - 2) * dfs(nw - 1, nb - 2) + (double) (nb - 2) / (nw + nb - 2) * dfs(nw, nb - 3)); return f[nw][nb] = ret;}signed main() { scanf(\"%d%d\", &amp;w, &amp;b); return !printf(\"%.9lf\\n\", dfs(w, b));}","link":"/2019/06/15/luogu-cf148d/"},{"title":"luogu-p1297","text":"","link":"/2019/06/15/luogu-p1297/"},{"title":"luogu-p1365","text":"","link":"/2019/06/15/luogu-p1365/"},{"title":"Luogu P1291 [SHOI2002]百事世界杯之旅","text":"期望DP入门题 思路：这题最大难点在输出格式，我佛了 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;bits/stdc++.h&gt;#define int long longint n;int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b);}struct frac { int p, q; friend frac operator +(const frac a, const frac b) { frac x; x.p = a.p * b.q + b.p * a.q, x.q = a.q * b.q; int g = gcd(x.p, x.q); x.p /= g, x.q /= g; return x; } void print() { if (p % q == 0) { printf(\"%lld\\n\", p / q); return; } else { int g = gcd(p, q); p /= g, q /= g; int inte = p / q, t = q, qlen = 0, ilen = 0; p %= q; while (t) qlen++, t /= 10; t = inte; while (t) ilen++, t /= 10; for (int i = 1; i &lt;= ilen; i++) printf(\" \"); printf(\"%lld\\n\", p); printf(\"%lld\", inte); for (int i = 1; i &lt;= qlen; i++) printf(\"-\"); putchar('\\n'); for (int i = 1; i &lt;= ilen; i++) printf(\" \"); printf(\"%lld\\n\", q); return; } }} ans, tmp;signed main() { scanf(\"%lld\", &amp;n); ans.p = ans.q = tmp.p = tmp.q = 1; for (int i = 2; i &lt;= n; i++) tmp.q = i, ans = ans + tmp; ans.p *= n; ans.print(); return 0;}","link":"/2019/06/15/luogu-p1291/"},{"title":"2019普通高等OIer全团队统一考试","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/06/07/test0607/"},{"title":"六一儿童周考","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/06/01/test0601/"},{"title":"Luogu P4139 上帝与集合的正确用法","text":"教我这题的人一个星期后就退役了QAQ Luogu P4139 上帝与集合的正确用法 思路:人话: $2^{2^{…^{2}}} mod p$. 前置知识: 拓展欧拉定理 当 b >= \\varphi(p),a^b \\equiv a^{b\\mod \\varphi(p) + \\varphi(p)}\\mod p.\\\\ 当 b < \\varphi(p) ,a^b \\equiv a ^ {b \\mod \\varphi(p)} \\mod p.我们对原式不断使用拓欧,发现一直在递归计算$2^{…^2}\\mod \\varphi(p) + \\varphi(p)$, 最终该式会等于0.因此递归计算即可. 欧拉函数算的少,需要的时候爆算就行,不需要筛法. 代码:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;#define ll long longint Phi(int x) { int ret = x; for (int i = 2; i * i &lt;= x; ++i) { if (x % i == 0) { ret -= ret / i; while (x % i == 0) x /= i; } } if (x &gt; 1) ret -= ret / x; return ret;}int Qpow(int a, int b, int p) { int ret = 1; for (; b; b &gt;&gt;= 1, a = (ll) a * a % p) if (b &amp; 1) ret = (ll) ret * a % p; return ret;}int Solve(int p) { return p == 1 ? 0 : Qpow(2, Solve(Phi(p)) + Phi(p), p);}signed main() { int T; scanf(\"%d\", &amp;T); while (T--) { int p; scanf(\"%d\", &amp;p); printf(\"%d\\n\", Solve(p)); } return 0;}","link":"/2019/05/29/luogu-p4139/"},{"title":"Luogu P3674 小清新人渣的本愿","text":"毒瘤lxl QAQ Luogu P3674 小清新人渣的本愿 思路:lxl的题必定分块(不 区间题,看数据范围就可以知道可以莫队. 先看第一个操作:假设区间[l, r]有a, b满足a - b = x.那么a = b + x.这该怎么维护?可以开一个bitset存数列中出现的数,右移x位与一下,如果最后bitset不为空则说明可以满足. 第二个操作与第一个处理方法类似.假设区间[l, r]有a, b满足a + b = x, a = x + (-b).再开一个bitset反向存出现的数,这样就可以起到-b的效果.右移N - x位与第一个bitset与一下. 第三个操作略暴力,直接枚举因数,反正数据范围不大. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define N 100000 + 233int n, m, block;int a[N], pos[N], cnt[N];bool ans[N];std::bitset&lt;N&gt; b1, b2;struct Node { int l, r, id, x, opt; friend bool operator &lt;(Node a, Node b) { if (pos[a.l] != pos[b.l]) return pos[a.l] &lt; pos[b.l]; if (pos[a.l] &amp; 1) return a.r &lt; b.r; else return a.r &gt; b.r; }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline void Add(int x) {if (++cnt[x] == 1) b1[x] = b2[N - x] = 1;}inline void Remove(int x) {if (--cnt[x] == 0) b1[x] = b2[N - x] = 0;}signed main() { n = R(), m = R(), block = (int) sqrt(n); for (int i = 1; i &lt;= n; ++i) a[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= m; ++i) nd[i].opt = R(), nd[i].l = R(), nd[i].r = R(), nd[i].x = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + m); for (int i = 1, l = 1, r = 0; i &lt;= m; ++i) { while (l &lt; nd[i].l) Remove(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Remove(a[r--]); switch (nd[i].opt) { case 1: if ((b1 &amp; (b1 &lt;&lt; nd[i].x)).any()) ans[nd[i].id] = 1; break; case 2: if ((b1 &amp; (b2 &gt;&gt; (N - nd[i].x))).any()) ans[nd[i].id] = 1; break; default: for (int j = 1; j * j &lt;= nd[i].x; ++j) { if (!(nd[i].x % j) &amp;&amp; b1[j] &amp;&amp; b1[nd[i].x / j]) { ans[nd[i].id] = 1; break; } } break; } } for (int i = 1; i &lt;= m; i++) printf(\"%s\\n\", ans[i] ? \"hana\" : \"bi\"); return 0;}","link":"/2019/05/29/luogu-p3674/"},{"title":"Luogu P3901 数列找不同","text":"简单的莫队 Luogu P3901 数列找不同 思路:维护区间[l, r]出现了几种数字, 若出现数等于r - l + 1则数列互不相同,反之则有相同. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;#define N 100000 + 233int n, q, block, kind;int pos[N], a[N], appear[N];bool ans[N];struct Node { int l, r, id; friend bool operator &lt;(Node a, Node b) { return (pos[a.l] ^ pos[b.l]) ? pos[a.l] &lt; pos[b.l] : ((pos[a.l] &amp; 1) ? a.r &lt; b.r : a.r &gt; b.r); }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline void Add(int x) { ++appear[x]; if (appear[x] == 1) ++kind;}inline void Remove(int x) { --appear[x]; if (!appear[x]) --kind;}signed main() { n = R(), q = R(); block = (int) sqrt(n); for (int i = 1; i &lt;= n; i++) a[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= q; i++) nd[i].l = R(), nd[i].r = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + q); for (int i = 1, l = 1, r = 0; i &lt;= q; i++) { while (l &lt; nd[i].l) Remove(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Remove(a[r--]); ans[nd[i].id] = (kind == nd[i].r - nd[i].l + 1); } for (int i = 1; i &lt;= q; i++) printf(\"%s\\n\", ans[i] ? \"Yes\" : \"No\"); return 0;}","link":"/2019/05/29/luogu-p3901/"},{"title":"Luogu P4396 [AHOI2013]作业","text":"可以莫队或CDQ,由于菜不会CDQ QAQ Luogu P4396 [AHOI2013]作业题面：题目描述此时己是凌晨两点，刚刚做了Codeforces的小A掏出了英语试卷。英语作业其实不算多，一个小时刚好可以做完。然后是一个小时可以做完的数学作业，接下来是分别都是一个小时可以做完的化学，物理，语文……小A压力巨大。 这是小A碰见了一道非常恶心的数学题，给定了一个长度为n的数列和若干个询问，每个询问是关于数列的区间表示数列的第l个数到第r个数)，首先你要统计该区间内大于等于a，小于等于b的数的个数，其次是所有大于等于a，小于等于b的，且在该区间中出现过的数值的个数。 小A望着那数万的数据规模几乎绝望，只能向大神您求救，请您帮帮他吧。 输入格式：第一行n,m 接下来n个数表示数列 接下来m行，每行四个数l,r,a,b 输出格式：输出m行，分别对应每个询问，输出两个数，分别为在l到r这段区间中大小在[a,b]中的数的个数，以及大于等于a,小于等于b的，且在该区间中出现过的数值的个数（具体可以参考样例）。 数据范围：N&lt;=100000,M&lt;=100000 思路:求区间[l, r]中在[a, b]间的数的个数和数值的个数. 两问可转化为二维数点和三位数点,CDQ分治易求,但由于我Too Young,不会CDQ,这里使用莫队做法. 我们开两个树状数组,分别维护数的个数和数值的个数,开一个cnt数组来维护数是否存在. 之后跑个莫队,复杂度$O(n\\sqrt nlogn)$,完美TLE 77分. 放弃树状数组直接分块,去掉那个log,可以苟过去. 我犯了个SB错误交了一页:重载运算符的时候把l写成id了 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;#define N 200000 + 23333int n, m, block, pos[N], cnt[N], a[N], f[N], g[N], L[N], ans1[N], ans2[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}struct Node { int l, r, a, b, id; bool operator &lt;(const Node &amp;a) { if (pos[l] != pos[a.l]) return pos[l] &lt; pos[a.l]; if (pos[l] &amp; 1) return r &lt; a.r; else return r &gt; a.r; }} nd[N];inline void Ask(int x) { int l = nd[x].a, r = nd[x].b, id = nd[x].id; if (pos[r] - pos[l] &lt; 2) { for (int i = l; i &lt;= r; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; return; } else { for (int i = l; i &lt; L[pos[l] + 1]; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; for (int i = L[pos[r]]; i &lt;= r; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; for (int i = pos[l] + 1; i &lt; pos[r]; i++) ans1[id] += f[i], ans2[id] += g[i]; }}inline void Modify(int p, int tag) { if (tag) { if (!cnt[p]) g[pos[p]]++; f[pos[p]]++, cnt[p]++; } else { f[pos[p]]--, cnt[p]--; if (!cnt[p]) g[pos[p]]--; }}signed main() { n = R(), m = R(); block = ceil (pow(n, 0.5)); for (register int i = 1; i &lt;= n; i++) { a[i] = R(), pos[i] = (i - 1) / block + 1; if (pos[i] != pos[i - 1]) L[pos[i]] = i; } L[pos[n + 1] = pos[n] + 1] = n + 1; for (register int i = 1; i &lt;= m; i++) nd[i].l = R(), nd[i].r = R(), nd[i].a = R(), nd[i].b = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + m); for (int i = nd[1].l; i &lt;= nd[1].r; i++) Modify(a[i], 1); Ask(1); for (register int i = 2, l = nd[1].l, r = nd[1].r; i &lt;= m; i++) { while (l &lt; nd[i].l) Modify(a[l++], 0); while (l &gt; nd[i].l) Modify(a[--l], 1); while (r &lt; nd[i].r) Modify(a[++r], 1); while (r &gt; nd[i].r) Modify(a[r--], 0); Ask(i); } for (register int i = 1; i &lt;= m; i++) printf(\"%d %d\\n\", ans1[i], ans2[i]); return 0;}","link":"/2019/05/09/luogu-p4396/"},{"title":"Luogu P2709 小B的询问","text":"莫队模板题 Luogu P2709 小B的询问题面：题目描述小B有一个序列，包含N个1~K之间的整数。他一共有M个询问，每个询问给定一个区间[L..R]，求$Sigma(c(i)^2)$的值,其中i的值从1到K，其中c(i)表示数字i在[L..R]中的重复次数。小B请你帮助他回答询问。 输入格式：第一行，三个整数N、M、K。 第二行，N个整数，表示小B的序列。 接下来的M行，每行两个整数L、R。 输出格式：M行，每行一个整数，其中第i行的整数表示第i个询问的答案。 数据范围：对于全部的数据，1&lt;=N、M、K&lt;=50000 思路:询问一个区间每个数字重复次数的平方和,首先大分块肯定可做,但比较麻烦… 这时我们就可以学习一种你没有学过的船新算法:莫队算法 主要思想就是将询问保存并排序,通过移动左右端点维护询问.当我们解决了一个询问后,我们就移动它的左右端点使它成为下一个询问,在移动的过程中维护答案. 合理的排序可以让我们的复杂度更加优秀.移动的越少,跑得就越像HK记者. 为了控制移动的距离,我们使用分块优化.如果左端点属于同一块就按右端点排序,否则按左端点排序.最终的莫队算法复杂度是$O(n\\sqrt n)$. 关于维护,由完全平方公式可得,只需要加减$2 \\times c(i) + 1$. 总的来说,莫队可以解决许多区间维护问题而且比分块更好写. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;#define ll long long#define N 50000 + 233struct Node {int l, r, id;} nd[N];int n, m, k, block, a[N], pos[N];ll tmp, cnt[N], ans[N];bool cmp(const Node &amp;a, const Node &amp;b) { return (pos[a.l] == pos[b.l]) ? a.r &lt; b.r : a.l &lt; b.l;}signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", a + i); for (int i = 1; i &lt;= m; i++) { scanf(\"%d%d\", &amp;nd[i].l, &amp;nd[i].r); nd[i].id = i; } block = (int) sqrt(n); for (int i = 1; i &lt;= n; i++) pos[i] = (i - 1) / block + 1; std::sort(nd + 1, nd + 1 + m, cmp); for (int i = 1, l = 1, r = 0; i &lt;= m; i++) { while (l &gt; nd[i].l) { l--; tmp += 2 * cnt[a[l]] + 1; cnt[a[l]]++; } while (r &lt; nd[i].r) { r++; tmp += 2 * cnt[a[r]] + 1; cnt[a[r]]++; } while (l &lt; nd[i].l) { tmp -= 2 * cnt[a[l]] - 1; cnt[a[l]]--; l++; } while (r &gt; nd[i].r) { tmp -= 2 * cnt[a[r]] - 1; cnt[a[r]]--; r--; } ans[nd[i].id] = tmp; } for (int i = 1; i &lt;= m; i++) printf(\"%lld\\n\", ans[i]); return 0;}","link":"/2019/05/08/luogu-p2709/"},{"title":"Luogu P4168 [Violet]蒲公英","text":"分块是暴力的浪漫 Luogu P4168 [Violet]蒲公英题面：题目描述在乡下的小路旁种着许多蒲公英，而我们的问题正是与这些蒲公英有关。 为了简化起见，我们把所有的蒲公英看成一个长度为n的序列$(a_1,a_2..a_n)$,其中$a_i$为一个正整数，表示第i棵蒲公英的种类编号。 而每次询问一个区间 [l,r]，你需要回答区间里出现次数最多的是哪种蒲公英，如果有若干种蒲公英出现次数相同，则输出种类编号最小的那个。 注意，你的算法必须是在线的. 输入格式：第一行两个整数 n,m ，表示有n株蒲公英，m 次询问。 接下来一行n个空格分隔的整数 $a_i$ ，表示蒲公英的种类 再接下来m行每行两个整数 $l_0,r_0$ ，我们令上次询问的结果为 x（如果这是第一次询问，则 x=0）。 令 $l=(l_0+x-1)\\bmod n + 1,r=(r_0+x-1) \\bmod n + 1$，如果 l&gt;r，则交换 l,r 。 最终的询问区间为[l,r]。 输出格式：输出 m 行。每行一个整数，表示每次询问的结果。 数据范围：对于 20% 的数据，保证 $1\\le n,m \\le 3000$。 对于 100% 的数据，保证 $1\\le n \\le 40000,1\\le m \\le 50000,1\\le a_i \\le 10^9$. 思路:问题转化:求区间众数. $n \\le 40000$,显然可以分块.$a_i \\le 10 ^ 9$,空间接受不能,显然需要离散化. 显然,一个区间里的众数是这个区间包含的块的众数或者是边角上的数. 我们用f[i][j]表示从第i块到第j块的最小众数,这很好求,每个块扫一遍. 当我们得到询问区间后,我们先把它包含的大块的最小众数作为候选答案.然后再扫边角. 为了得到每个数在区间内的出现次数,我们可以开N个vector来存每个数出现的位置.查找时分别在vector二分查找l和r,下标之差即为出现次数. 有个坑:查找r时用std::upper_bound,查找l时用std::lower_bound.如果都用std::lower_bound最后结果会少… 此做法忽略块大小等因素期望复杂度$O(N\\sqrt{nlogn})$.且vector常数巨大,吸氧吧您.艰难卡过. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;bits/stdc++.h&gt;#define N 40005int n, m, block, pos[N], val[N], a[N], f[250][250], L[250], lst, id;std::vector&lt;int&gt; v[N];std::map&lt;int, int&gt; mp;inline void init(int x) { int cnt[N] = {}, mx = 0, ans = 0; for (int i = L[x]; i &lt;= n; i++) { cnt[a[i]]++; if (cnt[a[i]] &gt; mx || (cnt[a[i]] == mx &amp;&amp; val[a[i]] &lt; val[ans])) ans = a[i], mx = cnt[a[i]]; f[x][pos[i]] = ans; }} inline int ask(int l, int r) { int ret, mx; ret = f[pos[l] + 1][pos[r] - 1]; mx = std::upper_bound(v[ret].begin(), v[ret].end(), r) - std::lower_bound(v[ret].begin(), v[ret].end(), l); for (int i = l; i &lt;= std::min(L[pos[l] + 1] - 1, r); i++) { int t = std::upper_bound(v[a[i]].begin(), v[a[i]].end(), r) - std::lower_bound(v[a[i]].begin(), v[a[i]].end(), l); if (t &gt; mx || (t == mx &amp;&amp; val[a[i]] &lt; val[ret])) ret = a[i], mx = t; } if (pos[l] != pos[r]) { for (int i = L[pos[r]]; i &lt;= r; i++) { int t = std::upper_bound(v[a[i]].begin(), v[a[i]].end(), r) - std::lower_bound(v[a[i]].begin(), v[a[i]].end(), l); if (t &gt; mx || (t == mx &amp;&amp; val[a[i]] &lt; val[ret])) ret = a[i], mx = t; } } return ret;}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); //离散化 for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;a[i]); if (mp.find(a[i]) == mp.end()) { mp[a[i]] = ++id; val[id] = a[i]; } a[i] = mp[a[i]]; v[a[i]].push_back(i); } //分块和初始化 block = int(sqrt(n)); for (int i = 1; i &lt;= n; i++) { pos[i] = (i - 1) / block + 1; if (pos[i] != pos[i - 1]) L[pos[i]] = i; } L[pos[n + 1] = pos[n] + 1] = n + 1; for (int i = 1; i &lt;= pos[n]; i++) init(i); //处理询问 for (int i = 1, l, r; i &lt;= m; i++) { scanf(\"%d%d\", &amp;l, &amp;r); l = (l + lst - 1) % n + 1, r = (r + lst - 1) % n + 1; if (l &gt; r) std::swap(l, r); lst = val[ask(l, r)]; printf(\"%d\\n\", lst); } return 0;}","link":"/2019/04/30/luogu-p4168/"},{"title":" Luogu P4879 ycz的妹子","text":"ycz有很多喜欢他的青梅竹马,dky有很多妹子,我没有妹子,我们都有光明的前途. Luogu P4879 ycz的妹子题面：题目描述机房神犇ycz有n个青梅竹马，她们分别住在1~n号城市中。小时候的她们美丽可爱，但是由于女大十八变，有些妹子的颜值发生了变化，但是十分重感情的ycz神犇不忍心抛弃她们，于是记录下来了她们颜值变化的值，我们用C, x, y表示第x个城市的妹子的颜值下降了y。长大之后的ycz非常有魅力，有许多妹子被ycz迷得神魂颠倒，我们用I, x, y表示第x个城市有一个妹子喜欢上了ycz，她的颜值为y（y有可能是负数，但是ycz来者不拒）。但在中途有一些妹子和ycz吵架了，于是就分手了，我们用D, x表示第x个妹子和ycz分手了。 最近神犇ycz要去全国各地找他的妹子们，为了方便计算，我们珂以把ycz的妹子所在的城市当作是一条直线，并且挨在一起。神犇ycz由于忙于和他的妹子们联系此时已经很累了，于是交给你一个这样的任务：他想知道他在某个时间去找他的所有妹子们珂以获得多大的愉悦度，这个愉悦度为他找的妹子的颜值数，你要做的就是求出这个愉悦度之和（注意长大后妹子们的颜值可能为负数/滑稽）。 注意：每个城市只允许有一个妹子，也就是说后来喜欢上ycz的妹子会赶走之前这个城市喜欢ycz的妹子（一城不容二女）。 输入格式：第一行两个正整数n和m (1&lt;=n&lt;=100000)(1&lt;=n&lt;=100000)第二行为n个整数ai，表示小时候ycz的青梅竹马的颜值(1&lt;=ai&lt;=10^9)接下来m行，每行为一条信息，每条信息可能是下面的一种: C, x, y表示第x个城市的妹子的颜值下降了yI, x, y表示在第x个城市有一个颜值为y的妹子迷上了yczD, x表示第x个妹子和ycz分手了 Q表示ycz现在想知道如果现在去找他所有的妹子们珂以获得多大的愉悦度 说明：妹子们居住的城市编号最大为5*10^5 输出格式：对于每一个Q输出一个整数 思路:这道题是在同学的分块课件里的. 但是,我选择线段树 建立一棵线段树,维护从1到MAXN城市的妹子. 只需要注意一下分手的时候是根据cnt来二分的,其他都是板子.. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;#define ll long long#define N 200005struct SegTree { int l, r; ll sum, cnt; #define l(x) tree[x].l #define r(x) tree[x].r #define sum(x) tree[x].sum #define cnt(x) tree[x].cnt #define ls(x) x &lt;&lt; 1 #define rs(x) x &lt;&lt; 1 | 1} tree[N &lt;&lt; 2];int n, m, qaq[N];void pushup(int p) { sum(p) = sum(ls(p)) + sum(rs(p)); cnt(p) = cnt(ls(p)) + cnt(rs(p));}void build(int p, int l, int r) { l(p) = l, r(p) = r, sum(p) = cnt(p) = 0; if (l == r) { sum(p) = qaq[l], cnt(p) = qaq[l] ? 1 : 0; return; } int mid = (l + r) &gt;&gt; 1; build(ls(p), l, mid); build(rs(p), mid + 1, r); pushup(p);}void remove(int p, int l, int r, int x) { if (l == r) { sum(p) = cnt(p) = 0; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= cnt(ls(p))) remove(ls(p), l, mid, x); else remove(rs(p), mid + 1, r, x - cnt(ls(p))); pushup(p);}void change(int p, int l, int r, int x, int v) { if (l == r) { sum(p) -= v; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) change(ls(p), l, mid, x, v); else change(rs(p), mid + 1, r, x, v); pushup(p);}void insert(int p, int l, int r, int x, int v) { if (l == r) { sum(p) = v, cnt(p) = 1; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) insert(ls(p), l, mid, x, v); else insert(rs(p), mid + 1, r, x, v); pushup(p);}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;qaq[i]); build(1, 1, N); for (int i = 1; i &lt;= m; i++) { char s[5]; int x, y; scanf(\"%s\", s); switch (s[0]) { case 'C': scanf(\"%d%d\", &amp;x, &amp;y); change(1, 1, N, x, y); break; case 'I': scanf(\"%d%d\", &amp;x, &amp;y); insert(1, 1, N, x, y); break; case 'D': scanf(\"%d\", &amp;x); remove(1, 1, N, x); break; default: printf(\"%lld\\n\", sum(1)); break; } } return 0;}","link":"/2019/04/29/luogu-p4879/"},{"title":" Luogu P2055 [ZJOI2009]假期的宿舍\t\t","text":"二分图求最大匹配 Luogu P2055 [ZJOI2009]假期的宿舍题面：题目:学校放假了 · · · · · · 有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。 比如 A 和 B 都是学校的学生，A 要回家，而 C 来看B，C 与 A 不认识。我们假设每个人只能睡和自己直接认识的人的床。那么一个解决方案就是 B 睡 A 的床而 C 睡 B 的床。而实际情况可能非常复杂，有的人可能认识好多在校学生，在校学生之间也不一定都互相认识。 我们已知一共有 n 个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。 输入格式：第一行一个数 T 表示数据组数。接下来 T 组数据，每组数据第一行一个数n 表示涉及到的总人数。 接下来一行 n 个数，第 i 个数表示第 i 个人是否是在校学生 (0 表示不是，1 表示是)。再接下来一行 n 个数，第 i 个数表示第 i 个人是否回家 (0 表示不回家，1 表示回家，注意如果第 i 个人不是在校学生，那么这个位置上的数是一个随机的数，你应该在读入以后忽略它)。 接下来 n 行每行 n 个数，第 i 行第 j 个数表示 i 和 j 是否认识 (1 表示认识，0 表示不认识，第 i 行 i 个的值为 0，但是显然自己还是可以睡自己的床)，认识的关系是相互的。 输出格式：对于每组数据，如果存在一个方案则输出 “^_^”(不含引号) 否则输出“T_T”(不含引号)。(注意输出的都是半角字符，即三个符号的 ASCII 码分别为94,84,95) 数据范围：对于 30% 的数据满足 1 ≤ n ≤ 12。 对于 100% 的数据满足 1 ≤ n ≤ 50,1 ≤ T ≤ 20。 思路:很明显,一个学生睡一张床就是二分图匹配. 先读入学生是不是本校学生,在不在家和学生之间的关系. 如果学生是本校学生且不在家,他就可以睡自己的床,连一下自己. 如果i认识j,j是本校生,i就可以睡j的床,连一下i,j.好混乱 然后统计一下有多少人要住宿舍,跑一下匈牙利,看看最大匹配数是不是等于住宿舍人数. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define N 105namespace Gekoo { struct Edge {int to, nxt;} e[N]; int n, T, need, mth; int head[N], ecnt = 1, Home[N], School[N], match[N]; bool vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} bool dfs(int u) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (!vis[v]) { vis[v] = 1; if (!match[v] || dfs(match[v])) { match[v] = u; return 1; } } } return 0; } signed QAQ() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;School[i]); for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;Home[i]); if (!Home[i] &amp;&amp; School[i]) Add(i, i); } for (int i = 1, x; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { scanf(\"%d\", &amp;x); if (x &amp;&amp; School[j]) Add(i, j); } } for (int i = 1; i &lt;= n; i++) { if ((!Home[i] &amp;&amp; School[i]) || !School[i]) { need++; memset(vis, 0, sizeof(vis)); if (dfs(i)) mth++; } } if (mth == need) printf(\"^_^\\n\"); else printf(\"T_T\\n\"); memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); memset(School, 0, sizeof(School)); memset(Home, 0, sizeof(Home)); memset(match, 0, sizeof(match)); need = mth = ecnt = 0; } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/14/luogu-p2055/"},{"title":" Luogu P5058 [ZJOI2004]嗅探器\t\t","text":"警惕思维江（不僵化 Luogu P5058 [ZJOI2004]嗅探器题面：题目:某军搞信息对抗实战演习，红军成功地侵入了蓝军的内部网络，蓝军共有两个信息中心，红军计划在某台中间服务器上安装一个嗅探器，从而能够侦听到两个信息中心互相交换的所有信息，但是蓝军的网络相当的庞大，数据包从一个信息中心传到另一个信息中心可以不止有一条通路。现在需要你尽快地解决这个问题，应该把嗅探器安装在哪个中间服务器上才能保证所有的数据包都能被捕获？ 输入格式：输入文件的第一行一个整数 n，表示蓝军网络中服务器的数目。 接下来若干行是对蓝军网络的拓扑结构描述，每行是两个整数 i , j 表示编号为 i 和编号为 j 的两台服务器间存在连接（显然连接是双向的），服务器的编号从 1 开始，一行两个 0 表示网络的拓补结构描述结束，再接下来是两个整数 a , b 分别表示两个中心服务器的编号。 输出格式：输出编号。如果有多个解输出编号最小的一个，如果找不到任何解，输出 No solution 思路:求出一个点使得删去他后起点和终点不连通. 最开始我是打算求一下割点，然后枚举删割点. 之后郭老师提醒了我数据范围…&lt;100,Tarjan你horse呢QAQ 直接枚举删点跑Dijkstra,不能联通直接输出点,最后输出No Solution. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt, val;} e[N &lt;&lt; 1]; int head[N], ecnt, n, st, ed, dis[N]; bool vis[N]; inline void Add(int f, int to) {e[ecnt].val = 1, e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} bool Dijkstra(int ban) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue &lt;std::pair&lt;int, int&gt; &gt; q; dis[st] = 0; q.push(std::make_pair(0, st)); while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (v == ban) continue; if (dis[v] &gt; dis[u] + val) { dis[v] = dis[u] + val; if (!vis[v]) { q.push(std::make_pair(-dis[v], v)); } } } } return (dis[ed] == 0x3f3f3f3f) ? 0 : 1; } signed QAQ() { scanf(\"%d\", &amp;n); int i, j; while (1) { scanf(\"%d%d\", &amp;i, &amp;j); if (!i &amp;&amp; !j) break; Add(i, j), Add(j, i); } scanf(\"%d%d\", &amp;st, &amp;ed); for (int i = 1; i &lt;= n; i++) { if (i == st || i == ed) continue; if (!Dijkstra(i)) return !printf(\"%d\\n\", i); } return !printf(\"No solution\\n\"); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/14/luogu-p5058/"},{"title":" Luogu P2860 [USACO06JAN]冗余路径Redundant Paths\t\t","text":"Tarjan水题 Luogu P2860 [USACO06JAN]冗余路径Redundant Paths题面：题目:为了从F(1≤F≤5000)个草场中的一个走到另一个，贝茜和她的同伴们有时不得不路过一些她们讨厌的可怕的树．奶牛们已经厌倦了被迫走某一条路，所以她们想建一些新路，使每一对草场之间都会至少有两条相互分离的路径，这样她们就有多一些选择． 每对草场之间已经有至少一条路径．给出所有R(F-1≤R≤10000)条双向路的描述，每条路连接了两个不同的草场，请计算最少的新建道路的数量, 路径由若干道路首尾相连而成．两条路径相互分离，是指两条路径没有一条重合的道路．但是，两条分离的路径上可以有一些相同的草场． 对于同一对草场之间，可能已经有两条不同的道路，你也可以在它们之间再建一条道路，作为另一条不同的道路． 输入格式：第一行两个整数 f, r. 接下来r行每行两个整数u，v表示u到v有边. 输出格式：输出一个数tot,为修建道路数. 思路:显然,一个边双内必然有两条不同的道路.(可以从两边绕嘛) 于是就先缩点ning干.我们就要添加最少边使整个图变成边双. 我们可以发现把叶子节点连起来就行.所以连边数为叶子节点数/2向上取整. 另:此题有重边.因为数据范围小,我直接开了个bool数组((( 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int n, m; int head[N], ecnt = 1, hc[N], ccnt = 1, deg[N], ans; bool vis[5002][5002]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} int dfn[N], low[N], stack[N], id[N], p, num, dcc; void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (y == fa) continue; if (!dfn[y]) { Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++dcc; int y; do { y = stack[p--]; id[y] = dcc; } while(x != y); } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); if (vis[x][y]) continue; vis[x][y] = vis[y][x] = 1; Add(x, y), Add(y, x); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i, 0); for (int i = 2; i &lt;= ecnt; i += 2) { int x = e[i ^ 1].to, y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); deg[id[x]]++, deg[id[y]]++; } for (int i = 1; i &lt;= dcc; i++) if (deg[i] == 1) ans++; printf(\"%d\\n\", (ans + 1) &gt;&gt; 1); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/13/luogu-p2860/"},{"title":" Luogu P2783 有机化学之神偶尔会做作弊\t\t","text":"郭老师强力推荐 Luogu P2783 有机化学之神偶尔会做作弊题面：题目:XS中学化学竞赛组教练是一个酷爱炉石的人。 有一天他一边搓炉石一边监考，而你作为一个信息竞赛的大神也来凑热闹。 然而你的化竞基友却向你求助了。 “第1354题怎么做”&lt;—手语 他问道。 你翻到那一题：给定一个烃，只含有单键（给初中生的一个理解性解释：就是一堆碳用横线连起来，横线都是单条的）。 然后炎魔之王拉格纳罗斯用他的火焰净化了一切环（？？？）。所有的环状碳都变成了一个碳。如图所示。 然后指定多组碳，求出它们之间总共有多少碳。如图所示（和上图没有关系）。 但是因为在考试，所以你只能把这个答案用手语告诉你的基友。你决定用二进制来表示最后的答案。 输入格式：第一行两个整数n,m.表示有n个点，m根键 接下来m行每行两个整数u，v表示u号碳和v号碳有一根键 接下来一个整数tot表示询问次数 接下来tot行每行两个整数，a,b表示询问的两个碳的编号 输出格式：共tot行 每行一个二进制数 数据范围：1&lt;n&lt;=10000,1&lt;m&lt;=50000 （两个碳不成环） 思路:题意翻译:给一无向图,去掉所有的环,求两点树上距离. 去掉环很简单,跑一遍Tarjan缩掉边双即可. 很简单? 不!QAQ 踩了个巨坑:我第一次是用LYD的写法缩边双的,然后: 就WA了 _就WA了_ 就WA了 第一版写法: 12345678910111213141516171819202122void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y, i); low[x] = std::min(low[x], low[y]); if (low[y] &gt; dfn[x]) bridge[i] = bridge[i ^ 1] = 1; } else if (i != (fa ^ 1)) low[x] = std::min(low[x], dfn[y]); }}void dfs(int x) { id[x] = cnt; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[y] || bridge[i]) continue; dfs(y); }} 更改为郭老师写法就畅快AC: 12345678910111213141516171819void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { if(y == fa) continue; Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++cnt; int y; do { y = stack[p--]; id[y] = cnt; } while (x != y); }} 原因未知….引以为戒QAQ 求树上距离是很简单的.如下图的树: 比如说我们要求12和13之间的距离,可以先跑一次树链剖分,求出12和13的深度. 显然,12与13之间的距离就等于dep[12] + dep[13] - 2 * dep[3] + 1. 任意两点x, y在树上的距离就是:dep[x] + dep[y] - 2 * dep[LCA] + 1. 二进制随便写个函数输出一下就行了 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;bits/stdc++.h&gt;#define N 50005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int n, m, s; int ecnt = 1, head[N], ccnt = 1, hc[N], cnt, ask; int dep[N], fa[N], siz[N], son[N], tp[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} int dfn[N], low[N], stack[N], id[N], root, p, num; bool bridge[N &lt;&lt; 1]; void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if(y == fa) continue; if (!dfn[y]) { Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++cnt; int y; do { y = stack[p--]; id[y] = cnt; } while (x != y); } } void dfs1(int u) { siz[u] = 1; for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (dep[v]) continue; dep[v] = dep[u] + 1, fa[v] = u; dfs1(v); siz[u] += siz[v]; if (!son[u] || siz[son[u]] &lt; siz[v]) son[u] = v; } } void dfs2(int u, int t) { tp[u] = t; if (!son[u]) return; dfs2(son[u], t); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (v == fa[u]) continue; if (v != son[u]) dfs2(v, v); } } void Write(int x) { int a[1005] = {}, pt = 0; do { a[++pt] = (x &amp; 1); x &gt;&gt;= 1; }while (x != 0); for (int i = pt; i &gt;= 1; i--) printf(\"%d\", a[i]); puts(\"\"); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); Add(x, y), Add(y, x); } scanf(\"%d\", &amp;ask); for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i, 0); for (int i = 2; i &lt;= ecnt; i++) { int x = e[i ^ 1].to, y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); } dep[1] = 1; dfs1(1), dfs2(1, 1); for (int i = 1, a, b; i &lt;= ask; i++) { scanf(\"%d%d\", &amp;a, &amp;b); a = id[a], b = id[b]; int ans = 0; ans += dep[a] + dep[b]; while (tp[a] != tp[b]) { if (dep[tp[a]] &lt; dep[tp[b]]) b = fa[tp[b]]; else a = fa[tp[a]]; } ans -= 2 * std::min(dep[a], dep[b]) - 1; Write(ans); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/12/luogu-p2783/"},{"title":" Luogu P3225 [HNOI2012]矿场搭建\t\t","text":"调了好久QAQ Luogu P3225 [HNOI2012]矿场搭建题面：题目描述煤矿工地可以看成是由隧道连接挖煤点组成的无向图。为安全起见，希望在工地发生事故时所有挖煤点的工人都能有一条出路逃到救援出口处。于是矿主决定在某些挖煤点设立救援出口，使得无论哪一个挖煤点坍塌之后，其他挖煤点的工人都有一条道路通向救援出口。 请写一个程序，用来计算至少需要设置几个救援出口，以及不同最少救援出口的设置方案总数。 输入格式：输入文件有若干组数据，每组数据的第一行是一个正整数 N（N&lt;=500），表示工地的隧道数，接下来的 N 行每行是用空格隔开的两个整数 S 和 T，表示挖 S 与挖煤点 T 由隧道直接连接。输入数据以 0 结尾。 输出格式：输入文件中有多少组数据，输出文件 output.txt 中就有多少行。每行对应一组输入数据的 结果。其中第 i 行以 Case i: 开始（注意大小写，Case 与 i 之间有空格，i 与:之间无空格，: 之后有空格），其后是用空格隔开的两个正整数，第一个正整数表示对于第 i 组输入数据至少需 要设置几个救援出口，第二个正整数表示对于第 i 组输入数据不同最少救援出口的设置方案总 数。输入数据保证答案小于 2^64。输出格式参照以下输入输出样例。 思路:v-DCC删去一点后其内部必然仍互相连通,在一个v-DCC中最多只需要建一个出口.所以可以先缩点,缩成一棵树,记录每个节点的大小. 以这个比母亲还要见得多的图(雾 为例,缩点后就变成了: 仔细观察,非叶节点不用建出口,出事了往叶子节点跑就完事了.叶子节点必须建出口,不然割点炸了就完了. 所以需要建的出口个数就是叶子节点的个数,而出口方案数,通过乘法原理,将叶子节点的大小乘起来即即可. 然而如果缩完点后就剩一个点了就不用这么多事了.显然只需要建两个点(如果一个被炸了另一个还能跑),方案数为$C_{size}^2$. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include &lt;bits/stdc++.h&gt;#define N 300005#define ll long longnamespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, m, num, cnt, cas, root, n, ans1; int stack[N], dfn[N], low[N], id[N], new_id[N], size[N]; bool cut[N], vis[N]; ll ans2 = 1; std::vector&lt;int&gt; dcc[N], leaf; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x; if (x == root &amp;&amp; !head[x]) { dcc[++cnt].push_back(x); return ; } int flg = 0; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); if (low[y] &gt;= dfn[x]) { if (++flg &gt; 1 || x != root) cut[x] = 1; int z; cnt++; do { z = stack[p--]; dcc[cnt].push_back(z); size[cnt]++; } while (y != z); dcc[cnt].push_back(x); } } else low[x] = std::min(low[x], dfn[y]); } } void DFS(int u) { int flg = 0; for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (!vis[v]) { vis[v] = 1; flg++; DFS(v); } } if (!flg) leaf.push_back(u); } void init() { memset(e, 0, sizeof(e)); memset(c, 0, sizeof(c)); memset(head, 0, sizeof(head)); memset(hc, 0, sizeof(hc)); memset(stack, 0, sizeof(stack)); memset(dfn, 0, sizeof(dfn)); memset(low, 0, sizeof(low)); memset(id, 0, sizeof(id)); memset(new_id, 0, sizeof(new_id)); memset(size, 0, sizeof(size)); memset(cut, 0, sizeof(cut)); memset(vis, 0, sizeof(vis)); for (int i = 1; i &lt;= cnt; i++) dcc[i].clear(); leaf.clear(); ecnt = ccnt = p = n = num = cnt = root = 0; ans2 = 1; } signed QAQ() { while (1) { cas++; scanf(\"%d\", &amp;m); if (!m) return 0; for (int i = 1, s, t; i &lt;= m; i++) { scanf(\"%d%d\", &amp;s, &amp;t); Add(s, t), Add(t, s); n = std::max(n, std::max(s, t)); } for (int i = 1; i &lt;= n; i++) { if (!dfn[i]) root = i, Tarjan(i); } int t = cnt; for (int i = 1; i &lt;= n; i++) if (cut[i]) new_id[i] = ++t; for (int i = 1; i &lt;= cnt; i++) { for (std::vector&lt;int&gt;::iterator it = dcc[i].begin(); it != dcc[i].end(); ++it) { if (cut[*it]) AddC(i, new_id[*it]), AddC(new_id[*it], i); else id[*it] = i; } } DFS(1); if ((int) leaf.size() == 1) { int s = size[leaf[0]] + 1; ans2 = s * (s - 1) / 2; ans1 = 2; } else { ans1 = leaf.size(); for (std::vector&lt;int&gt;::iterator it = leaf.begin(); it != leaf.end(); ++it) { ans2 *= size[*it]; } } printf(\"Case %d: %d %lld\\n\", cas, ans1, ans2); init(); } }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p3225/"},{"title":" Luogu P1262 间谍网络\t\t","text":"ning干 题面：题目描述由于外国间谍的大量渗入，国家安全正处于高度的危机之中。如果A间谍手中掌握着关于B间谍的犯罪证据，则称A可以揭发B。有些间谍收受贿赂，只要给他们一定数量的美元，他们就愿意交出手中掌握的全部情报。所以，如果我们能够收买一些间谍的话，我们就可能控制间谍网中的每一分子。因为一旦我们逮捕了一个间谍，他手中掌握的情报都将归我们所有，这样就有可能逮捕新的间谍，掌握新的情报。 我们的反间谍机关提供了一份资料，包括所有已知的受贿的间谍，以及他们愿意收受的具体数额。同时我们还知道哪些间谍手中具体掌握了哪些间谍的资料。假设总共有n个间谍(n不超过3000)，每个间谍分别用1到3000的整数来标识。 请根据这份资料，判断我们是否有可能控制全部的间谍，如果可以，求出我们所需要支付的最少资金。否则，输出不能被控制的一个间谍。 输入格式：第一行只有一个整数n。 第二行是整数p。表示愿意被收买的人数，1≤p≤n。 接下来的p行，每行有两个整数，第一个数是一个愿意被收买的间谍的编号，第二个数表示他将会被收买的数额。这个数额不超过20000。 紧跟着一行只有一个整数r，1≤r≤8000。然后r行，每行两个正整数，表示数对(A, B)，A间谍掌握B间谍的证据。 输出格式：如果可以控制所有间谍，第一行输出YES，并在第二行输出所需要支付的贿金最小值。否则输出NO，并在第二行输出不能控制的间谍中，编号最小的间谍编号。 思路:显然,同一个SCC里的间谍会互相出卖.因此,先缩点,记录每个SCC里的最小特工编号和贿赂费用. 思考后可以发现,只要我们控制了所有入度为0的特工,整个图就都可以被控制. 直接寻找一下所有入度为0的点,如果该点不能被贿赂,就无法控制所有间谍,此时记录编号最小的间谍,反之将贿金加给ans. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; int ecnt, ccnt, head[N], hc[N], p, n, m, MO, num, cnt, ans = 0, cant = 0x3f3f3f3f; int stack[N], dfn[N], low[N], id[N], ind[N], val[N]; int mn[N], cost[N]; bool ins[N], flg; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, ins[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], ins[y] = 0; id[y] = cnt; if (cost[y] &gt; 0) val[cnt] = std::min(val[cnt], cost[y]); mn[cnt] = std::min(mn[cnt], y); } while (x != y); } } signed QAQ() { memset(val, 0x3f, sizeof(val)); memset(mn, 0x3f, sizeof(mn)); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); cost[a] = b; } int r; scanf(\"%d\", &amp;r); for (int i = 1; i &lt;= r; i++) { int a, b; scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (id[u] != id[v]) AddC(id[u], id[v]), ind[id[v]]++; } } for (int i = 1; i &lt;= cnt; i++) { if (!ind[i]) { if (val[i] == 0x3f3f3f3f) { flg = 1; cant = std::min(cant, mn[i]); } else { ans += val[i]; } } } if (!flg) return !printf(\"YES\\n%d\\n\", ans); else return !printf(\"NO\\n%d\\n\", cant); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p1262/"},{"title":" Luogu P2272 [ZJOI2007]最大半连通子图\t\t","text":"Tarjan总是和DAGDP紧密结合呢 Luogu P2272 [ZJOI2007]最大半连通子图题面：题目描述一个有向图G=(V,E)称为半连通的(Semi-Connected)，如果满足：?u,v∈V，满足u→v或v→u，即对于图中任意两点u，v,存在一条u到v的有向路径或者从v到u的有向路径。若G’=(V’,E’)满足V’?V，E’是E中所有跟V’有关的边，则称G’是G的一个导出子图。若G’是G的导出子图，且G’半连通，则称G’为G的半连通子图。若G’是G所有半连通子图中包含节点数最多的，则称G’是G的最大半连通子图。给定一个有向图G，请求出G的最大半连通子图拥有的节点数K，以及不同的最大半连通子图的数目C。由于C可能比较大，仅要求输出C对X的余数。 输入格式：第一行包含两个整数N，M，X。N，M分别表示图G的点数与边数，X的意义如上文所述接下来M行，每行两个正整数a, b，表示一条有向边(a, b)。图中的每个点将编号为1,2,3…N，保证输入中同一个(a,b)不会出现两次。 输出格式：应包含两行，第一行包含一个整数K。第二行包含整数C Mod X. 数据范围：对于100%的数据，$N \\\\le 100000, M \\\\le 1000000, X \\\\le 10^8$ 思路:简化题意:给定一个有向图，若u，v两点，只要u-v可达或者v-u可达，则称u，v半联通.求半联通子图中点数最多的个数和方案数. 显然又是DAGDP…先跑Tarjan缩点,记录一下每个连通块的大小,再拓扑跑DP. 问题主要在第二问,缩点会有重边,势必会影响方案数统计.所以要去重边. 如何去重? 开一边集数组,先记录所有缩点后的边,再按起始点sort一下.建图时检查一下,如果E[i].from == E[i - 1].from &amp;&amp; E[i].to == E[i - 1].to,说明为重边,直接continue. 其他没什么了. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;bits/stdc++.h&gt;#define M 1000005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; struct EdgeC { int from, to; bool operator &lt;(const EdgeC &amp;a) const { return (from == a.from) ? to &lt; a.to : from &lt; a.from; } }EDGE[N]; int ecnt, ccnt, head[N], hc[N], p, n, m, MO, num, scc, cnt, t, ans = -114514, ans2; int stack[N], dfn[N], low[N], id[N], ind[N], val[N], f[N], g[N]; bool ins[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, ins[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], ins[y] = 0; id[y] = cnt; val[cnt]++; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; for (int i = 1; i &lt;= cnt; i++) if (!ind[i]) q.push(i), f[i] = val[i], g[i] = 1; while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (f[v] &lt; f[u] + val[v]) { f[v] = f[u] + val[v]; g[v] = g[u]; } else if (f[v] == f[u] + val[v]) { g[v] = (g[v] + g[u]) % MO; } if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) if (f[i] &gt; ans) ans = f[i]; for (int i = 1; i &lt;= cnt; i++) if (f[i] == ans) ans2 = (ans2 + g[i]) % MO; } signed QAQ() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;MO); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt;= n; x++) { for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] != id[y]) EDGE[++t].from = id[x], EDGE[t].to = id[y]; } } std::sort(EDGE + 1, EDGE + t + 1); for (int i = 1; i &lt;= t; i++) { if (EDGE[i].from == EDGE[i - 1].from &amp;&amp; EDGE[i].to == EDGE[i - 1].to) continue; AddC(EDGE[i].from, EDGE[i].to), ++ind[EDGE[i].to]; } TopSort(); printf(\"%d\\n%d\\n\", ans, ans2); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p2272/"},{"title":" Luogu P3627 [APIO2009]抢掠计划\t\t","text":"与缩点模板题惊人的相似… Luogu P3627 [APIO2009]抢掠计划题面：题目描述Siruseri 城中的道路都是单向的。不同的道路由路口连接。按照法律的规定， 在每个路口都设立了一个 Siruseri 银行的 ATM 取款机。令人奇怪的是，Siruseri 的酒吧也都设在路口，虽然并不是每个路口都设有酒吧。 Banditji 计划实施 Siruseri 有史以来最惊天动地的 ATM 抢劫。他将从市中心 出发，沿着单向道路行驶，抢劫所有他途径的 ATM 机，最终他将在一个酒吧庆 祝他的胜利。 使用高超的黑客技术，他获知了每个 ATM 机中可以掠取的现金数额。他希 望你帮助他计算从市中心出发最后到达某个酒吧时最多能抢劫的现金总数。他可 以经过同一路口或道路任意多次。但只要他抢劫过某个 ATM 机后，该 ATM 机 里面就不会再有钱了。 例如，假设该城中有 6 个路口，道路的连接情况如下图所示： 市中心在路口 1，由一个入口符号→来标识，那些有酒吧的路口用双圈来表示。每个 ATM 机中可取的钱数标在了路口的上方。在这个例子中，Banditji 能抢 劫的现金总数为 47，实施的抢劫路线是：1-2-4-1-2-3-5。 输入格式：第一行包含两个整数 N、M。N 表示路口的个数，M 表示道路条数。接下来 M 行，每行两个整数，这两个整数都在 1 到 N 之间，第 i+1 行的两个整数表示第 i 条道路的起点和终点的路口编号。接下来 N 行，每行一个整数，按顺序表示每 个路口处的 ATM 机中的钱数。接下来一行包含两个整数 S、P，S 表示市中心的 编号，也就是出发的路口。P 表示酒吧数目。接下来的一行中有 P 个整数，表示 P 个有酒吧的路口的编号。 输出格式：输出一个整数，表示 Banditji 从市中心开始到某个酒吧结束所能抢劫的最多 的现金总数。 数据范围：50%的输入保证 N, M&lt;=3000。所有的输入保证 N, M&lt;=500000。每个 ATM 机中可取的钱数为一个非负整数且不超过 4000。 输入数据保证你可以从市中心 沿着 Siruseri 的单向的道路到达其中的至少一个酒吧。 思路:此题是要在图中求经过点权最大的路径所经过的点权和. 然后我们就可以发现它与缩点模板题惊人的相似… 我们可以先缩点,将图转化为DAG,之后在DAG上拓扑跑DP即可. 本题有一大坑!(图片来自洛谷评论区) 当出现如图这种情况,若1为起点,5的入度为2,在拓扑过程中由于4不可达,5无法入队.我们可以发现,只需要研究可达的点就够了.所以在跑Tarjan和建新图的时候都只需要跑与起点联通的点.Tarjan只需要从起点跑,建图是特判dfn是否等于0. #3#11卡WA了解一下? 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, n, m, num, scc, cnt, ans = -114514, S, P, SPlace; int stack[N], dfn[N], low[N], id[N], ind[N], pv[N], val[N], f[N]; bool bridge[N], vis[N], bar[N], Bar[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], vis[y] = 0; id[y] = cnt; val[cnt] += pv[y]; if (bar[y]) Bar[cnt] = 1; if (y == S) SPlace = cnt; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; q.push(id[S]); f[id[S]] = val[SPlace]; while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; f[v] = std::max(f[v], f[u] + val[v]); if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) if (Bar[i]) ans = std::max(ans, f[i]); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;pv[i]); scanf(\"%d%d\", &amp;S, &amp;P); for (int i = 1, x; i &lt;= P; i++) scanf(\"%d\", &amp;x), bar[x] = 1; Tarjan(S); for (int x = 1; x &lt;= n; x++) { if (!dfn[x]) continue; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); ind[id[y]]++; } } TopSort(); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/08/luogu-p3627/"},{"title":"Luogu P2746 [USACO5.3]校园网Network of Schools\t\t","text":"缩点ning干 P2746 [USACO5.3]校园网Network of Schools题面：题目:一些学校连入一个电脑网络。那些学校已订立了协议：每个学校都会给其它的一些学校分发软件（称作“接受学校”）。注意即使 B 在 A 学校的分发列表中， A 也不一定在 B 学校的列表中。 你要写一个程序计算，根据协议，为了让网络中所有的学校都用上新软件，必须接受新软件副本的最少学校数目（子任务 A）。更进一步，我们想要确定通过给任意一个学校发送新软件，这个软件就会分发到网络中的所有学校。为了完成这个任务，我们可能必须扩展接收学校列表，使其加入新成员。计算最少需要增加几个扩展，使得不论我们给哪个学校发送新软件，它都会到达其余所有的学校（子任务 B）。一个扩展就是在一个学校的接收学校列表中引入一个新成员。 输入格式：输入文件的第一行包括一个整数 N：网络中的学校数目（2 &lt;= N &lt;= 100）。学校用前 N 个正整数标识。 接下来 N 行中每行都表示一个接收学校列表（分发列表）。第 i+1 行包括学校 i 的接收学校的标识符。每个列表用 0 结束。空列表只用一个 0 表示。 输出格式：你的程序应该在输出文件中输出两行。 第一行应该包括一个正整数：子任务 A 的解。 第二行应该包括子任务 B 的解。 数据范围：n &lt;= 100 思路:缩点ning干(逃 先缩点,记录一下入度和出度.显然,问题A的答案就是入度为0的点的个数. 问题B的答案也比较显然,是入度为0和出度为0的点的个数的较大值. 注意特判,当缩成只有一个点的时候问题B答案为0. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;bits/stdc++.h&gt;#define N 5000005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; int ecnt, ccnt, hc[N], head[N], ind[N], outd[N], n, Aans, Bans; int dfn[N], low[N], s[N], id[N], num, p, cnt; bool vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; s[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = s[p--], vis[y] = 0; id[y] = cnt; } while (x != y); } } signed QAQ() { //Input scanf(\"%d\", &amp;n); for (int u = 1, v; u &lt;= n; u++) { while (1) { scanf(\"%d\", &amp;v); if (!v) break; Add(u, v); } } //Shrink for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (id[u] == id[v]) continue; AddC(id[u], id[v]); ind[id[v]]++, outd[id[u]]++; } } //Task A for (int i = 1; i &lt;= cnt; i++) if (!ind[i]) Aans++; //Task B for (int i = 1; i &lt;= cnt; i++) if (!outd[i]) Bans++; Bans = std::max(Bans, Aans); if (cnt == 1) Bans = 0; //Output printf(\"%d\\n%d\\n\", Aans, Bans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/07/luogu-p2746/"},{"title":" Luogu P3387 【模板】缩点\t\t","text":"为什么缩点模板还有DAGDP(半恼 Luogu P3387 【模板】缩点题面：题目:给定一个n个点m条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。 允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。 输入格式：第一行，n,m 第二行，n个整数，依次代表点权 第三至m+2行，每行两个整数u,v，表示u-&gt;v有一条有向边 输出格式：共一行，最大的点权之和。 数据范围：n&lt;=10^4,m&lt;=10^5,点权&lt;=1000 思路:首先先求出scc,之后缩点 (缩点板子要缩点不是显然 缩点后可以得到一个DAG,求最大点权的转移方程显然:f[v] = max(f[v], f[u] + val[v]). 但是有后效性.为了解决后效性,进行一次拓扑排序,在拓扑排序过程中DP. 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, n, m, num, scc, cnt, ans = -114514; int stack[N], dfn[N], low[N], id[N], ind[N], pv[N], val[N], f[N]; bool bridge[N], vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], vis[y] = 0; id[y] = cnt; val[cnt] += pv[y]; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; for (int i = 1; i &lt;= cnt; i++) if(!ind[i]) f[i] = val[i], q.push(i); while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; f[v] = std::max(f[v], f[u] + val[v]); if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) ans = std::max(ans, f[i]); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;pv[i]); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt;= n; x++) { for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); ind[id[y]]++; } } TopSort(); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/07/luogu-p3387/"},{"title":" Luogu P3469 [POI2008]BLO-Blockade\t\t","text":"poi~~~ Luogu P3469 [POI2008]BLO-Blockade题面：题目LYD翻译版:Byteotia 城市有 n 个城镇, m 条双向道路, 其中 $ n \\\\le 10 ^ 5, m \\\\le 5 * 10 ^ 5$.每条道路连接两个不同的城镇,没有重复的道路,所有城镇联通.把城镇看作节点,把道路看作边.容易发现,整个城市构成一张无向图. 你需要输出 n 个整数,其中第 i 个整数表示把与节点 i 关联的所有边去掉之后(不去掉节点 i 本身),无向图中有多少有序点对 (x, y), 满足 x 和 y 不联通. 输入格式：第一行读入n，m，分别是城镇数目和道路数目 城镇编号1~n 接下来m行每行两个数字a,b，表示a和b之间有一条无向边 输出格式：输出n行，每行一个数字，为第i个城镇被锁时不能发生的访问的数量。 数据范围：$ 1\\\\le n\\\\le 100,000, 1\\\\le m\\\\le 500,000 $. 思路:首先,如果 i 是割点,去掉 i 后其余城市仍然联通, ans[i] = 2 * (i - 1).(点对是有序的) 若 i 不是割点,显然,原图会裂成多个联通块. 1.i自己就是一个联通块 2.i的子树上的联通块 3.不在i子树的联通块 分开求和即可. 但分别去求复杂度过高,无法承受.可以在Tarjan过程中求出每个子树的大小,计算时直接使用. 注释里还有丶东西 代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define N 500005#define ll long longnamespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1]; int ecnt, head[N], n, m, num, cnt; int dfn[N], low[N], size[N]; ll ans[N]; bool cut[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num, size[x] = 1; int flg = 0, vis = 0; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); size[x] += size[y]; //计算子树大小 if (low[y] &gt;= dfn[x]) { ans[x] += (ll) size[y] * (n - size[y]); vis += size[y]; if (++flg &gt; 1 || x != 1) cut[x] = 1; } } else low[x] = std::min(low[x], dfn[y]); } if (!cut[x]) ans[x] = 2 * (n - 1);//是割点QwQ else ans[x] += (ll) (n - vis - 1) * (vis + 1) + n - 1; //不在子树上的联通块和自身的联通块 } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b), Add(b, a); } Tarjan(1); for (int i =1; i &lt;= n; i++) { printf(\"%lld\\n\", ans[i]); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/06/luogu-p3469/"},{"title":" Luogu P1726 上白泽慧音\t\t","text":"车 万 厨 大 欢 喜 Luogu P1726 上白泽慧音题面：题目描述在幻想乡，上白泽慧音是以知识渊博闻名的老师。春雪异变导致人间之里的很多道路都被大雪堵塞，使有的学生不能顺利地到达慧音所在的村庄。因此慧音决定换一个能够聚集最多人数的村庄作为新的教学地点。人间之里由N个村庄（编号为1..N）和M条道路组成，道路分为两种一种为单向通行的，一种为双向通行的，分别用1和2来标记。如果存在由村庄A到达村庄B的通路，那么我们认为可以从村庄A到达村庄B，记为(A,B)。当(A,B)和(B,A)同时满足时，我们认为A,B是绝对连通的，记为。绝对连通区域是指一个村庄的集合，在这个集合中任意两个村庄X,Y都满足。现在你的任务是，找出最大的绝对连通区域，并将这个绝对连通区域的村庄按编号依次输出。若存在两个最大的，输出字典序最小的，比如当存在1,3,4和2,5,6这两个最大连通区域时，输出的是1,3,4。 输入格式：第1行：两个正整数N,M 第2..M+1行：每行三个正整数a,b,t, t = 1表示存在从村庄a到b的单向道路，t = 2表示村庄a,b之间存在双向通行的道路。保证每条道路只出现一次。 输出格式：第1行： 1个整数，表示最大的绝对连通区域包含的村庄个数。 第2行：若干个整数，依次输出最大的绝对连通区域所包含的村庄编号。 数据范围：对于60%的数据：N &lt;= 200且M &lt;= 10,000 对于100%的数据：N &lt;= 5,000且M &lt;= 50,000 思路:求图中最大SCC. 基本就是板子(((( 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;bits/stdc++.h&gt;#define N 50005namespace Gekoo { struct Edge { int to, nxt; } e[N &lt;&lt; 1]; int head[N], dfn[N], low[N], c[N], s[N &lt;&lt; 1], ecnt, n, m, num, p, cnt, ans = 1; bool vis[N]; std::vector &lt;int&gt; scc[N]; void Add(int f, int to) { e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt; } void Tarjan(int x) { dfn[x] = low[x] = ++num; s[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int v = e[i].to; if (!dfn[v]) { Tarjan(v); low[x] = std::min(low[x], low[v]); } else if (vis[v]) { low[x] = std::min(low[x], dfn[v]); } } if (dfn[x] == low[x]) { cnt++; int y; do { y = s[p--], vis[y] = 0; c[y] = cnt; scc[cnt].push_back(y); } while (x != y); } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, t; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;t); Add(a, b); if (t == 2) Add(b, a); } for (int i = 1; i &lt;= n; i++) { if (!dfn[i]) Tarjan(i); } for (int i = 1; i &lt;= cnt; i++) { if (scc[i].size() &gt; scc[ans].size()) ans = i; } printf(\"%d\\n\", (int) scc[ans].size()); std::sort(scc[ans].begin(), scc[ans].end()); for (std::vector&lt;int&gt;::iterator it = scc[ans].begin(); it != scc[ans].end(); ++it) { printf(\"%d \", *it); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/05/luogu-p1726/"},{"title":" Luogu P3275 [SCOI2011]糖果\t\t","text":"差分约束 Luogu P3275 [SOI2011]糖果题面：题目描述幼儿园里有 N 个小朋友，lxhgww 老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不希望小红分到的糖果比他的多，于是在分配糖果的时候，lxhgww 需要满足小朋友们的 K 个要求。幼儿园的糖果总是有限的，lxhgww 想知道他至少需要准备多少个糖果，才能使得每个小朋友都能够分到糖果，并且满足小朋友们所有的要求。 输入格式：输入的第一行是两个整数 N，K。接下来 K 行，表示这些点需要满足的关系，每行 3 个数字，X，A，B。 如果 X=1， 表示第 A 个小朋友分到的糖果必须和第 B 个小朋友分到的糖果一样多； 如果 X=2， 表示第 A 个小朋友分到的糖果必须少于第 B 个小朋友分到的糖果； 如果 X=3， 表示第 A 个小朋友分到的糖果必须不少于第 B 个小朋友分到的糖果； 如果 X=4， 表示第 A 个小朋友分到的糖果必须多于第 B 个小朋友分到的糖果； 如果 X=5， 表示第 A 个小朋友分到的糖果必须不多于第 B 个小朋友分到的糖果； 输出格式：输出一行，表示 lxhgww 老师至少需要准备的糖果数，如果不能满足小朋友们的所有要求，就输出 -1。 数据范围：对于 30% 的数据，保证 N≤100 对于 100% 的数据，保证 N≤100000 对于所有的数据，保证 K≤100000,1≤X≤5,1≤A,B≤N 思路:事一道差分约束。 差分约束就是把形如$a - b \\le x$的不等式组通过三角形不等式，用SPFA等算法解决问题。 分类讨论： x = 1: $a = b$.等价于 $a - b \\le 0 \\&amp;\\&amp; b - a \\le 0$. 建边(a, b, 0),(b, a, 0). x = 2: $a &lt; b$.由于差分约束的要求，转化为$a - b \\le 1$. 建边(a, b, 1). x = 3: $b \\le a$.转化为 $b - a \\le 0$. 建边(b, a, 0). * x = 4: $a &gt; b$.由于差分约束的要求，转化为$b - a \\le 1$.建边(b, a, 1). x = 5: $a \\le b$.转化为$a - b \\le 0$.建边(a, b, 0). 注意几个点： 读入时特判一下自相矛盾的情况. 数据歹毒,从0建边时反着建可有效防止T飞 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt, val;} e[N]; int ecnt, head[N], n, k, dis[N]; long long ans; bool vis[N]; inline void Add(int f, int to, int val) {e[++ecnt].to = to, e[ecnt].val = val, e[ecnt].nxt = head[f], head[f] = ecnt;} bool SPFA(int u) { vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (dis[v] &lt; dis[u] + val) { dis[v] = dis[u] + val; if (vis[v] || !SPFA(v)) return 0; } } vis[u] = 0; return 1; } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;k); for (int i = 1; i &lt;= k; i++) { int x, a, b; scanf(\"%d%d%d\", &amp;x, &amp;a, &amp;b); switch (x) { case 1: Add(a, b, 0); Add(b, a, 0); break; case 2: if (a == b) return !puts(\"-1\"); else Add(a, b, 1); break; case 3: Add(b, a, 0); break; case 4: if (a == b) return !puts(\"-1\"); else Add(b, a, 1); break; default : Add(a, b, 0); break; } } for (int i = n; i &gt;= 1; i--) Add(0, i, 1); dis[0] = 0; if (SPFA(0)) { for (int i = 1; i &lt;= n; i++) ans += dis[i]; return !printf(\"%lld\\n\", ans); } else return !puts(\"-1\"); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/05/luogu-p3275/"},{"title":" POJ 1734 Sightseeing trip\t\t","text":"Floyd求最小环 POJ 1734 Sightseeing trip题面人话ver：给一无向图，求最小环。 思路:Floyd求最小环板子（（（ 没啥好多说的zzz 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#define INF 0x3f3f3f3fnamespace Gekoo { int n, m, mp[105][105], dis[105][105], pre[105][105], mincircle = INF; std::vector&lt;int&gt; path; void GetPath(int x, int y) { if(pre[x][y] == 0) return ; GetPath(x, pre[x][y]); path.push_back(pre[x][y]); GetPath(pre[x][y], y); } void Floyd() { for (int k = 1; k &lt;= n; k++) { for (int i = 1; i &lt; k; i++) { for (int j = i + 1; j &lt; k; j++) { if ((long long)dis[i][j] + mp[i][k] + mp[k][j] &lt; mincircle) { mincircle = dis[i][j] + mp[i][k] + mp[k][j]; path.clear(); path.push_back(i); GetPath(i, j); path.push_back(j); path.push_back(k); } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (dis[i][j] &gt; dis[i][k] + dis[k][j]) { dis[i][j] = dis[i][k] + dis[k][j]; pre[i][j] = k; } } } } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); memset(mp, 0x3f, sizeof(mp)); memset(dis, 0x3f, sizeof(dis)); for (int i = 1; i &lt;= n; i++) mp[i][i] = 0; for (int i = 1, a, b ,c; i &lt;= m; i++) { scanf(\"%d%d%d\", &amp;a, &amp;b ,&amp;c); mp[a][b] = mp[b][a] = dis[a][b] = dis[b][a] = std::min(mp[a][b], c); } Floyd(); if (mincircle == INF) { puts(\"No solution.\"); return 0; } for (std::vector&lt;int&gt;::iterator it = path.begin(); it != path.end(); ++it) { printf(\"%d \", *it); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/04/poj-1734/"},{"title":" Luogu P1841 [JSOI2007] 重要的城市\t\t","text":"Floyd变种，水题赛T3 Luogu P1841 [JSOI2007] 重要的城市题面：题目描述参加 JSOI 冬令营的同学最近发现，由于南航校内修路截断了原来通向计算中心的路，导致去的路程比原先增加了近一公里。而食堂门前施工虽然也截断了原来通向计算中心的路，却没有使路程增加，因为可以找到同样长度的路作替代。其实，问题的关键在于，路截断的地方是交通要点。 同样的情况也出现在城市间的交通中。某些城市如果出了问题，可能会引起其他很多城市的交通不便。另一些城市则影响不到别的城市的交通。jsoi冬令营的同学发现这是一个有趣的问题，于是决定研究这个问题。 他们认为这样的城市是重要的：如果一个城市c被破坏后，存在两个不同的城市a和b（a, b均不等于c），a到b的最短距离增长了（或不通），则城市c是重要的。 JSOI冬令营的同学面对着一张教练组交给他们的城市间交通图，他们希望能找出所有重要的城市。现在就请你来解决这个问题。 输入格式：第一行两个整数N,M,N为城市数，M为道路数 接下来M行，每行三个整数，表示两个城市之间的无向边，以及之间的路的长度 输出格式：一行，按递增次序输出若干的数，表示重要的城市。 数据范围：30%的数据：N ≤ 20； 60%的数据：N ≤ 100； 100%的数据：N ≤ 200,M ≤ N × (N − 1) / 2, 0 &lt; c ≤ 10000。c即路的长度。 保证不出现重边和自环 如果没有点的话需要输出一行 “No important cities.” 去掉引号 思路:日常翻译： 若u，v最短路上一点去掉后最短路长度改变，则该点为重要点，输出重要点。 N ≤ 200，无脑Floyd（逃 显然在Floyd过程中若进行了一次松弛,则k为f[i][j]对应的一个关键点.若出现f[i][j]=f[i][k]+f[k][j],说明该关键点无效,删去. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;utility&gt;#include &lt;cstdlib&gt;#include &lt;cctype&gt;#include &lt;queue&gt;#define N 205namespace Gekoo { int f[N][N], n, m, imp[N][N]; bool used[N], flg; signed QAQ() { freopen(\"city.in\", \"r\", stdin); freopen(\"city.out\", \"w\", stdout); memset(f, 0x3f, sizeof(f)); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, c; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c); f[a][b] = f[b][a] = std::min(f[a][b], c); } for (int k = 1; k &lt;= n; k++) { for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (i == k || j == i || j == k) continue; if (f[i][j] &gt; f[i][k] + f[k][j]) { f[i][j] = f[i][k] + f[k][j]; imp[i][j] = k; } else if (f[i][j] == f[i][k] + f[k][j]) { imp[i][j] = 0; } } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (imp[i][j]) { flg = 1; used[imp[i][j]] = 1; } } } if (!flg) { puts(\"No important cities.\"); return 0; } for (int i = 1; i &lt;= n; i++) { if (used[i]) printf(\"%d \", i); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/04/luogu-p1841/"},{"title":" Luogu P1073 最优贸易","text":"虚假的Dijkstra 题面：题目描述C 国有 n 个大城市和 m 条道路，每条道路连接这 n 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 m 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 1 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 n 个城市的标号从 1~ n，阿龙决定从 1 号城市出发，并最终在 n 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 n 个城市。阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品――水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 现在给出 n 个城市的水晶球价格，m 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式：第一行包含 2 个正整n 和 m ，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 n 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 n 个城市的商品价格。 接下来 m 行，每行有 3 个正整数 x, y, z，每两个整数之间用一个空格隔开。如果 = 1，表示这条道路是城市 x 到城市 y 之间的单向道路；如果 z = 2，表示这条道路为城市 x 和城市 y 之间的双向道路。 输出格式：一个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 0。 数据范围：输入数据保证 1 号城市可以到达 n 号城市。 对于 10% 的数据，1 ≤ n ≤ 6。 对于 30% 的数据，1 ≤ n ≤ 100。 对于 50% 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市。 对于 100% 的数据，1 ≤ n ≤ 100000，1 ≤ m ≤ 500000，1 ≤ x, y ≤ n，1 ≤ z ≤ 2，1 ≤ 各城市 水晶球价格 ≤ 100. 思路:问题转化为求1-n的一条路径使得途径点的最大点权与最小点权的差最大. 建原图和反图，先在正图上跑“Dijkstra”得到1到各点最小值，再在反图上跑“Dijkstra”得到n到各点最大值。 枚举1 - n，维护$ans=max(ans,E[i]-G[i])$. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], g[N &lt;&lt; 1]; int ecnt, gcnt, ehead[N], ghead[N], n, m, p[N], E[N], G[N], ans; bool vis[N]; inline void AddE(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = ehead[f], ehead[f] = ecnt;} inline void AddG(int f, int to) {g[++gcnt].to = to, g[gcnt].nxt = ghead[f], ghead[f] = gcnt;} signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;p[i]); for (int i = 1; i &lt;= m; i++) { int x , y , z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); AddE(x, y); AddG(y, x); if (z == 2) { AddE(y, x); AddG(x, y); } } //Dijkstra memset(vis, 0, sizeof(vis)); memset(E, 0x3f, sizeof(E)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; q; q.push(std::make_pair(-p[1], 1)); E[1] = p[1]; while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = ehead[u]; i; i = e[i].nxt) { int v = e[i].to; E[v] = std::min(E[u], p[v]); q.push(std::make_pair(-E[v], v)); } } memset(G, -0x3f, sizeof(G)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; Q; Q.push(std::make_pair(p[n], n)); G[n] = p[n]; while (!Q.empty()) { int u = Q.top().second; Q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = ghead[u]; i; i = g[i].nxt) { int v = g[i].to; G[v] = std::max(G[u], p[v]); Q.push(std::make_pair(G[v], v)); } } //枚举节点 for (int i = 1; i &lt;= n; i++) ans = std::max(ans, G[i] - E[i]); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/01/luogu-p1073/"},{"title":" POJ 1135 Domino Effect\t\t","text":"最短路 POJ1135 Domino Effect人话版题面：给一无向图,从节点1开始推骨牌,骨牌运动速度为1m/s,求出最后一个骨牌的落地时间. 思路:先求最短路,找出最短路中最大值,即为落在节点上的最长时间. 再枚举落在边上的最长时间,画图手推可得,落在边$(u,v)$上的时间为$\\\\frac{dis(u)+dis(v)+val}{2}$. 最后比较一下大小对应输出. 由于我不良的代码习惯导致一直WA,我忏悔 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;deque&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;utility&gt;#include &lt;vector&gt;#define N 500005namespace Gekoo { struct Edge { int to, nxt, val; }e[N &lt;&lt; 1]; int n, m, ecnt, head[N], dis[N], cnt; bool vis[N]; inline void AddEdge(int f, int to, int val) { e[++ecnt].to = to, e[ecnt].val = val, e[ecnt].nxt = head[f], head[f] = ecnt; } void Dijkstra(int s) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; q; q.push(std::make_pair(0, 1)); dis[1] = 0; while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (dis[v] &gt; dis[u] + val) { dis[v] = dis[u] + val; q.push(std::make_pair(-dis[v], v)); } } } } void init() { ecnt = 0; memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); } signed QAQ() { while (1) { scanf(\"%d%d\", &amp;n, &amp;m); if (!n &amp;&amp; !m) break; init(); for (int i = 1; i &lt;= m; i++) { int a, b, l; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;l); AddEdge(a, b, l); AddEdge(b, a, l); } Dijkstra(1); double mx_pt = 0.0; int pt = 0; for (int i = 1; i &lt;= n; i++) { if (dis[i] &gt;= mx_pt) { mx_pt = dis[i]; pt = i; } } double mx_e = 0.0; int lpt = 0, rpt = 0; for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (mx_e &lt;= (double) (dis[u] + dis[v] + val) / 2.0) { mx_e = (double) (dis[u] + dis[v] + val) / 2.0; lpt = std::min(u, v), rpt = std::max(u, v); } } } printf(\"System #%d\\n\", ++cnt); if (mx_pt &gt;= mx_e) { printf(\"The last domino falls after %.1f seconds, at key domino %d.\\n\", mx_pt, pt); } else { printf(\"The last domino falls after %.1f seconds, between key dominoes %d and %d.\\n\", mx_e, lpt, rpt); } puts(\"\"); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/02/28/poj-1135/"},{"title":" POJ 3463 Sightseeing\t\t","text":"最短路与次短路 POJ3463 Sightseeing题意：求图中最短路和比最短路长度大1的路径数总和 思路:先求出最短路数和次短路数，如果次短路长度 = 最短路长度，那么输出路径数和，否则输出最短路数。 求次短路数也非常简单，在Dijkstra过程中分类讨论即可。 代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;cctype&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;ctime&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;deque&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;string&gt;#include &lt;utility&gt;#include &lt;vector&gt;#define N 100005namespace Gekoo { struct Edge { int to, nxt, val; }e[N]; struct Node { int val, u, is_first; Node(int a, int b, int c) {u = a, val = b, is_first = c;} bool operator &lt;(const Node &amp;a) const { return val &gt; a.val; } }; int ecnt, head[N], T, dis[N][2], cnt[N][2]; bool vis[N][2]; void AddEdge(int f, int to, int val) { e[++ecnt].to = to; e[ecnt].val = val; e[ecnt].nxt = head[f]; head[f] = ecnt; } void Dijkstra(int s) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); memset(cnt, 0, sizeof(cnt)); dis[s][0] = dis[s][1] = 0; cnt[s][0] = cnt[s][1] = 1; std::priority_queue&lt;Node&gt; q; q.push(Node(s, 0, 0)); while (!q.empty()) { int u = q.top().u, is_f = q.top().is_first; q.pop(); if (vis[u][is_f]) continue; vis[u][is_f] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (val + dis[u][is_f] &lt; dis[v][0]) { dis[v][1] = dis[v][0]; dis[v][0] = val + dis[u][is_f]; cnt[v][1] = cnt[v][0]; cnt[v][0] = cnt[u][is_f]; q.push(Node(v, dis[v][0], 0)); q.push(Node(v, dis[v][1], 1)); } else if (val + dis[u][is_f] == dis[v][0]) { cnt[v][0] += cnt[u][is_f]; } else if (val + dis[u][is_f] &gt; dis[v][0] &amp;&amp; val + dis[u][is_f] &lt; dis[v][1]) { dis[v][1] = val + dis[u][is_f]; cnt[v][1] = cnt[u][is_f]; q.push(Node(v, dis[v][1], 1)); } else if (val + dis[u][is_f] == dis[v][1]) { cnt[v][1] += cnt[u][is_f]; } } } } signed QAQ() { scanf(\"%d\", &amp;T); while (T--) { ecnt = 0; memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); int n, m, s, f; scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, l; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;l); AddEdge(a, b, l); } scanf(\"%d%d\", &amp;s, &amp;f); Dijkstra(s); if (dis[f][1] == dis[f][0] + 1) cnt[f][0] += cnt[f][1]; printf(\"%d\\n\", cnt[f][0]); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/02/28/poj-3463/"},{"title":" Luogu P2051 [AHOI2009] 中国象棋\t\t","text":"DP Luogu P2051 [AHOI2009] 中国象棋题面：题目描述这次小可可想解决的难题和中国象棋有关，在一个N行M列的棋盘上，让你放若干个炮（可以是0个），使得没有一个炮可以攻击到另一个炮，请问有多少种放置方法。大家肯定很清楚，在中国象棋中炮的行走方式是：一个炮攻击到另一个炮，当且仅当它们在同一行或同一列中，且它们之间恰好 有一个棋子。你也来和小可可一起锻炼一下思维吧！ 输入格式：一行包含两个整数N，M，之间由一个空格隔开。 输出格式：总共的方案数，由于该值可能很大，只需给出方案数模9999973的结果。 数据范围：100%的数据中N和M均不超过100 50%的数据中N和M至少有一个数不超过8 30%的数据中N和M均不超过6 思路:把题面翻译成人话:n*n的棋盘，每行每列最多放两枚棋子,求方案数. 可以用$f[i][j][k]$来描述在前i行j列有1个棋子,k列有2个棋子. 接下来对放棋进行分类讨论. Ⅰ.不放棋.直接继承上一次的方案数.显然可得:$f[i][j][k]+=f[i-1][j][k]$. Ⅱ.放一枚棋.①.放在有一枚棋子的一列.放置棋子后会使j减少1,k增加1,这种方案共有$ j-1$种,因此可以得到: $f[i][j][k]+=f[i-1][j+1][k-1]\\\\times (j+1)$. ②.放在没有棋子的一列.放置棋子后会使j增加1,k不变,这种方案共有$(m-(j-1)-k)$种.因此可以得到: $f[i][j][k] += f[i - 1][j - 1][k] \\\\times (m - j - k + 1)$. Ⅲ.放两枚棋.①.都放在有一枚棋子的两列.放置棋子后会使j减少2,k增加2. 而显然,这种方案数为$C^2_{j+2}$.化简该式,$C^2_{j+2}=\\\\frac{(j+2)!}{2!\\\\times j!}=\\\\frac{j!\\\\times (j+1)\\\\times (j +2)}{2!\\\\times j!}=\\\\frac{(j+1)(j+2)}{2}$. 可得:$ f[i][j][k] += f[i - 1][j + 2][k - 2] \\\\times (j + 2) \\\\times (j + 1) / 2$ ②.都放在没有棋子的两列.放置后会使j增加2,k不变.而这种方案数也是很显然的,为$C^2_{m-(j-2)-k}$. 化简该式:$C^2_{m-(j-2)-k}=\\\\frac{(m-j-k+2)!}{2!\\\\times (m-j-k)!}=\\\\frac{(m-j-k)!\\\\times (m-j-k+1)\\\\times (m-j-k+2)}{2!\\\\times(m-j-k)!}=\\\\frac{(m-j-k+1)\\\\times (m-j-k+2)}{2}$. 可得:$ f[i][j][k] += f[i - 1][j - 2][k] \\\\times (m - j - k + 1) \\\\times (m - j - k + 2) / 2$ ③.分别放在有一枚棋子和没有棋子两列.放置棋子在有棋子列后会使j减少1,k增加1,放置棋子在无棋子列后会使j增加1,k不变.最终其实j没有改变,只是k增加了1. 根据乘法原理,方案数显然,为$[m-j-(k-1)]\\\\times j$种. 可得:$ f[i][j][k] += f[i - 1][j][k - 1] \\\\times (m - j - k + 1) \\\\times j $. 最后统计答案,这道题就结束了. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;#define N 105#define MO 9999973#define ll long longnamespace Gekoo { int n, m; ll f[N][N][N], ans;//f[行][有几列放了1个棋子][有几列放了两个棋子] void QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); f[0][0][0] = 1; for (int i = 1; i &lt;= n; i++) { for (int j = 0; j &lt;= m; j++) { for (int k = 0; k &lt;= m - j; k++) { //下棋时分三种情况. //1.放0个棋子 (f[i][j][k] += f[i - 1][j][k]) %= MO;//直接加上之前的 //2.放1个棋子 if (k &gt;= 1) (f[i][j][k] += f[i - 1][j + 1][k - 1] * (j + 1)) %= MO;//(1)放在有棋子的一列 if (j &gt;= 1) (f[i][j][k] += f[i - 1][j - 1][k] * (m - j - k + 1)) %= MO;//(2)放在没棋子的一列 //3.2个棋子 if (j &gt;= 2) (f[i][j][k] += f[i - 1][j - 2][k] * (m - j - k + 1) * (m - j - k + 2) / 2) %= MO;//(1)0 and 0 if (k &gt;= 1) (f[i][j][k] += f[i - 1][j][k - 1] * (m - j - k + 1) * j) %= MO;//(2)0 and 1 if (k &gt;= 2) (f[i][j][k] += f[i - 1][j + 2][k - 2] * (j + 2) * (j + 1) / 2) %= MO;//(3)1 and 1 } } } for (int j = 0; j &lt;= m; j++) { for (int k = 0; k &lt;= m; k++) { (ans += f[n][j][k]) %= MO; } } printf(\"%lld\\n\", (ans + MO) % MO); }}using namespace Gekoo;signed main() { QAQ(); return 0;}","link":"/2019/02/28/luogu-p2051/"},{"title":" Luogu P4503 [CTSC2014] 企鹅QQ\t\t","text":"正经A掉的第一道紫题?? Luogu P4503 [CTSC2014] 企鹅QQ题面：题目描述:小Q是PenguinQQ网站的管理员，他最近在进行一项有趣的研究——哪些账户是同一个人注册的。经过长时间的分析，小Q发现同一个人注册的账户名称总是很相似的，例如Penguin1，Penguin2，Penguin3……于是小Q决定先对这种相似的情形进行统计。 小Q定义，若两个账户名称是相似的，当且仅当这两个字符串等长且恰好只有一位不同。例如“Penguin1”和“Penguin2”是相似的，但“Penguin1”和“2Penguin”不是相似的。而小Q想知道，在给定的n 个账户名称中，有多少对是相似的。 为了简化你的工作，小Q给你的N 个字符串长度均等于L ，且只包含大小写字母、数字、下划线以及‘@’共64种字符，而且不存在两个相同的账户名称。 输入格式：第一行包含三个正整数N ，L ，S 。其中N 表示账户名称数量，L 表示账户名称长度，S 用来表示字符集规模大小，它的值只可能为2或64。 若S 等于2，账户名称中只包含字符‘0’和‘1’共2种字符； 若S 等于64，账户名称中可能包含大小写字母、数字、下划线以及‘@’共64种字符。 随后N 行，每行一个长度为L 的字符串，用来描述一个账户名称。数据保证N 个字符串是两两不同的。 输出格式：仅一行一个正整数，表示共有多少对相似的账户名称。 数据范围：$N \\\\le 30000, L \\\\le 200$ 思路:S可以直接无视（（（ 把题目转换为人话：给一堆字符串，找出只有一个字符不同的字符串对数。 由于L的范围非常小，所以我们可以枚举不同字符的位置。 先预处理字符串从左往右的hash和从右往左的hash，然后在枚举时将左右两边的hash再hash一遍，把相同hash的去重并统计一下，输出对数就OK。 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//请无视S.H.I.T.一样的变量命名(逃#include &lt;bits/stdc++.h&gt;using namespace std;#define ll long long#define base1 13131#define base2 1313131#define MOD 23333333333333333namespace Gekoo { int n, l, s, cwy; char QQ[30005][205]; ll gou[30005][205], li[30005][205], nmsl[30005]; void QAQ() { scanf(\"%d%d%d\", &amp;n, &amp;l, &amp;s); for (int i = 1; i &lt;= n; i++) { scanf(\"%s\", QQ[i] + 1); for (int j = 1; j &lt;= l; j++) { gou[i][j] = (gou[i][j - 1] * base1 + QQ[i][j]) % MOD; } for (int j = l; j &gt;= 1; j--) { li[i][j] = (li[i][j + 1] * base2 + QQ[i][j]) % MOD; } } for (int mid = 1; mid &lt;= l; mid++) { for (register int i = 1; i &lt;= n; i++) { nmsl[i] = (gou[i][mid - 1]* base1 + li[i][mid + 1]) % MOD; } sort(nmsl + 1, nmsl + 1 + n); int dky = 1; for (register int i = 1; i &lt;= n; i++) { if (nmsl[i] == nmsl[i - 1]) { cwy += dky; dky++; } else { dky = 1; } } } printf(\"%d\\n\", cwy); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p4503/"},{"title":" Luogu P3166 [CQOI2014]数三角形\t\t","text":"喜闻乐见的数学题 Luogu P3166 [CQOI2014]数三角形题面：题目描述给定一个$n \\\\times m$的网格，请计算三点都在格点上的三角形共有多少个。注意三角形的三点不能共线。 输入格式：输入一行，包含两个空格分隔的正整数m和n。 输出格式：输出一个正整数，为所求三角形数量。 数据范围：1&lt;=m,n&lt;=1000 思路:$n\\\\times m$的网格中共有$(n+1)(m+1)$个点,其中选3个点的方法数共有$C_{(n + 1)(m + 1)}^3$种.为构成三角形,须除去三点共线的情况.横向和纵向共线数很显然,为$mC_{n+1}^3+nC_{m+1}^3$种.而斜向就比较复杂. 首先,斜向共有两个方向,我们只研究一个就行,将结果×2. 然后仔细思考可以发现每条落在格点上的直线必然是由最短的一条线段延伸,设这条线段的端点为(0,0),(x,y),xy必然互素.而之后直线在格点上的点的横纵坐标必然为(kx,ky).稍加整理后显然可得斜向共线情况数为: $\\\\sum_{i=1}^m\\\\sum_{j=1}^n(gcd(i,j)-1)\\\\times(m-i+1)\\\\times(n-j+1)\\\\times 2$. 最终,$ans=C_{(n + 1)(m + 1)}^3-mC_{n+1}^3-nC_{m+1}^3-\\\\sum_{i=1}^m\\\\sum_{j=1}^n(gcd(i,j)-1)\\\\times(m-i+1)\\\\times(n-j+1)\\\\times 2$ 代码:12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;#define ll long longnamespace Gekoo { int m, n; ll ans; ll C(int n, int m) { ll ret = 1; for (int i = 1; i &lt;= m; i++) ret = ret * (ll) (n - m + i) / i; return ret; } inline int GCD(int a, int b) {return b == 0 ? a : GCD(b, a % b);} void QAQ() { scanf(\"%d%d\", &amp;m, &amp;n); ans = C((m + 1) * (n + 1), 3) - (n + 1) * C((m + 1), 3) - (m + 1) * C((n + 1), 3); for (int i = 1; i &lt;= m; i++) { for (int j = 1; j &lt;= n; j++) { ans -= (ll) (GCD(i, j) - 1) * (m - i + 1) * (n - j + 1) * 2; } } printf(\"%lld\\n\", ans); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p3166/"},{"title":" Luogu P1967 货车运输\t\t","text":"可怕的普及组 Luogu P1967 货车运输题面：题目描述A国有n座城市,编号从1到n,城市之间有m条双向道路.每一条道路对车辆都有重量限制,简称限重.现在有q辆货车在运输货物,司机们想知道每辆车在不超过车辆限重的情况下,最多能运多重的货物. 输入格式：第一行有两个用一个空格隔开的整数n,m,表示A国有n座城市和m条道路。 接下来m行每行3个整数 x,y,z 每两个整数之间用一个空格隔开,表示从x号城市到y号城市有一条限重为z的道路.注意: x$\\\\ne$y,两座城市之间可能有多条道路. 接下来一行有一个整数,表示有q辆货车需要运货. 接下来q行,每行两个整数x,y,之间用一个空格隔开,表示一辆货车需要从x城市运输货物到y城市,注意:x$\\\\ne$y . 输出格式：共有q行,每行一个整数,表示对于每一辆货车,它的最大载重是多少.如果货车不能到达目的地,输出−1. 数据范围：对于30%的数据,0 &lt; n &lt; 1,000, 0 &lt; m &lt; 10,000, 0 &lt; q&lt; 1,000； 对于60%的数据,0 &lt; n &lt; 1,000, 0 &lt; m &lt; 50,000, 0 &lt; q&lt; 1,000； 对于100%的数据,0 &lt; n &lt; 10,000, 0 &lt; m &lt; 50,000, 0 &lt; q&lt; 30,000, 0 ≤ z ≤ 100,000. 思路:这题真难,居然是普及组…(我差点被普及组的题卡了 首先,沟通每个城市之间的道路若想边权最大,必定形成了一棵最大生成树,这个可以通过Kruskal完成.但这题还有一个坑,最后树不一定是一棵,可能是树林. 之后就不用管图了,研究树就行了.沟通两个城市之间的道路可以通过LCA实现,求最大载重就是求这几条边的最大值,通过ST表实现.ST表和LCA的初始化可以放一块进行. 当两个城市不在同一棵树上时,货车无法到达. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include &lt;bits/stdc++.h&gt;using namespace std;#define N 100005namespace Gekoo { inline int read () { int a = 1, b = 0; char c; do{c = getchar(); if (c == '-') a = -1;} while (c &lt; '0' || c &gt; '9'); do{b = b * 10 + c - '0'; c = getchar();} while (c &gt;= '0' &amp;&amp; c &lt;='9'); return a * b; } struct Edge { int from, to, nxt, val; }e[1000005]; struct Tree { int x, y, z; bool operator &lt; (const Tree &amp;x) { return z &gt; x.z; } }t[1000005]; int ecnt, head[N], n, m, fa[N], q, f[N][25], w[N][25], dep[N], tcnt, s; bool vis[N]; void Add_Edge (int f, int to, int v) { e[++ecnt].to = to; e[ecnt].val = v; e[ecnt].nxt = head[f]; head[f] = ecnt; } int Get (int x) { if (x == fa[x]) return x; return fa[x] = Get(fa[x]); } void Tree_data (int u) { vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (!dep[v]) { dep[v] = dep[u] + 1; f[v][0] = u; w[v][0] = e[i].val; Tree_data(v); } } return ; } void init () { for (int j = 1; (1 &lt;&lt; j) &lt;= tcnt; j++) { for (int i = 1; i &lt;=tcnt; i++) { f[i][j] = f[ f[i][j-1] ][j-1]; w[i][j] = min(w[i][j-1], w[ f[i][j-1] ][j-1]); } } } void LCA (int a, int b) { if (Get(a) != Get(b)) { printf(\"-1\\n\"); return ; } int ans = (1 &lt;&lt; 30); if (dep[a] &lt; dep[b]) swap(a, b); int i = 0; for (; (1 &lt;&lt; i) &lt;= dep[a]; i++); for (int j = i; j &gt;= 0; j--) { if (dep[a] - (1 &lt;&lt; j) &gt;= dep[b]){ ans = min(ans, w[a][j]); a = f[a][j]; } } if (a == b) { printf(\"%d\\n\",ans); return ; } for (int j = i; j &gt;= 0; j--) { if (f[a][j] &amp;&amp; f[a][j] != f[b][j]) { ans = min(ans, min(w[a][j], w[b][j])); a = f[a][j], b = f[b][j]; } } ans = min(ans, min(w[a][0], w[b][0])); printf(\"%d\\n\",ans); return ; } void main() { n = read(), m = read(); for (int i = 1; i &lt;=n; i++) { fa[i] = i; } for (int i = 1, x, y, z; i &lt;= m; i++) { x = read(), y = read(), z = read(); t[++tcnt].x = x, t[tcnt].y = y, t[tcnt].z = z; t[++tcnt].x = y, t[tcnt].y = x, t[tcnt].z = z; } //Kruskal sort(t + 1, t + 1 + tcnt); for (int i = 1; i &lt;= tcnt; i++) { int x = t[i].x, y = t[i].y, z = t[i].z; if (Get(x) != Get(y)) { Add_Edge(x, y, z); Add_Edge(y, x, z); fa[Get(x)] = Get(y); } } for (int i = 1; i &lt;= n; i++) { //树林!被坑过一次QAQ if (!vis[i]) { dep[i] = 1; f[1][0] = 1; Tree_data(i); w[i][0] = (1 &lt;&lt; 30); } } init(); q = read(); for (int i = 1; i &lt;= q; i++) { LCA(read(), read()); } }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p1967/"},{"title":" Luogu P1306 斐波那契公约数\t\t","text":"矩阵乘法板子题 Luogu P1306 斐波那契公约数题面：题目描述对于Fibonacci数列:1,1,2,3,5,8,13……大家应该很熟悉吧~~~但是现在有一个很“简单”问题:第n项和第m项的最大公约数是多少？ 输入格式：两个正整数n和m.($n,m\\\\le 10^9$). 注意:数据很大. 输出格式：Fn和Fm的最大公约数. 由于看了大数字就头晕,所以只要输出最后的8位数字就可以了. 思路:通过打表可以得到一条显然的结论:$gcd(f(n),f(m))=f(gcd(n,m))$. 那么求就vans了.不过数据很大,那么就必须使用矩阵优化了. 所以这是矩阵乘法板子题 求一哈中间矩阵: $\\\\begin {bmatrix} f(i-1), f(i)\\\\\\end{bmatrix}=\\\\begin {bmatrix} f(i-2),f(i-1)\\\\end{bmatrix}\\\\times\\\\begin{bmatrix}0,1\\\\1,1\\\\end{bmatrix}$ 最后:不开long long见祖宗! 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;bits/stdc++.h&gt;using namespace std;#define MO 100000000#define ll long longnamespace Gekoo { ll t, p; struct Mat { ll x[3][3]; Mat() { memset(x, 0, sizeof(x)); } inline void build_x () { memset(x, 0, sizeof(x)); for (int i = 1; i &lt;= 2; i++) x[i][i] = 1; } inline void build_A () { memset(x, 0, sizeof(x)); x[1][2] = x[2][1] = x[2][2] = 1; } }x, A; Mat operator * (const Mat &amp;a, const Mat &amp;b) { Mat z; memset(z.x, 0, sizeof(z)); for (int k = 1; k &lt;= 2; k++) for (int i = 1; i &lt;= 2; i++) for (int j = 1; j &lt;= 2; j++) z.x[i][j] += (a.x[i][k] % MO) * (b.x[k][j] % MO), z.x[i][j] %= MO; return z; } Mat qpow (Mat a, ll b) { Mat ans = x; for (; b; b &gt;&gt;= 1) { if (b &amp; 1) ans = ans * A; A = A * A; } return ans; } ll gcd(ll a, ll b) { return (b == 0) ? a : gcd(b, a % b); } void main () { A.build_A(); x.build_x(); scanf(\"%d%d\", &amp;t, &amp;p); Mat ans = qpow(x, gcd(t, p) - 1); printf(\"%d\\n\", (ans.x[1][1] + ans.x[1][2]) % MO); }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p1306/"},{"title":" Luogu P1108 低价购买\t\t","text":"变种LIS 题面：题目描述“低价购买”这条建议是在奶牛股票市场取得成功的一半规则。要想被认为是伟大的投资者，你必须遵循以下的问题建议:“低价购买；再低价购买”。每次你购买一支股票,你必须用低于你上次购买它的价格购买它。买的次数越多越好!你的目标是在遵循以上建议的前提下，求你最多能购买股票的次数。你将被给出一段时间内一支股票每天的出售价($2^{16} $范围内的正整数)，你可以选择在哪些天购买这支股票。每次购买都必须遵循“低价购买；再低价购买”的原则。写一个程序计算最大购买次数。 这里是某支股票的价格清单： 日期 $ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8, 9 ,10 ,11, 12$ 价格 $68 ,69 ,54, 64,68 ,64 ,70 ,67 ,78 ,62, 98, 87 $ 最优秀的投资者可以购买最多4次股票，可行方案中的一种是： 日期 $2 , 5 , 6 ,10 $ 价格 $69, 68 ,64 ,62 $ 输入格式：第1行: $ N(1 \\\\le N \\\\le 5000) $，股票发行天数 第2行: $ N$个数，是每天的股票价格。 输出格式：两个数: 最大购买次数和拥有最大购买次数的方案数($ \\\\le 2^{31} $)当二种方案“看起来一样”时（就是说它们构成的价格队列一样的时候）,这2种方案被认为是相同的。 思路:第一问ez,由下次购买价格低于上次,求最大购买次数可转化为LIS. 思考点主要在第二问,求出最大购买次数方案数. 事实上可以显然地求出最大购买次数方案数的状态转移方程: c\\[i\\]_{j:1\\\\rightarrow i}= \\\\left{ \\\\begin{aligned} 1,if(f\\[i\\]=1)\\ c\\[i\\]+c\\[j\\],if(f\\[i\\]=f\\[j\\]+1,a\\[i\\]","link":"/2019/02/28/luogu-p1108/"},{"title":" Luogu P1313 计算系数\t\t","text":"NOIP最简单的数论题 Luogu P1313 计算系数题面：题目描述给定一个多项式 $ (by+ax)^k $ ,请求出多项式展开后 $x^n \\\\times y^m $项的系数. 输入格式：共一行,包含5个整数,分别为a,b,k,n,m,每两个整数之间用一个空格隔开. 输出格式：共1行,包含一个整数,表示所求的系数,这个系数可能很大,输出对10007取模后的结果. 数据范围：对于30% 的数据,有0 ≤ k ≤10 ； 对于50%的数据,有a = 1,b = 1； 对于100%的数据,有0 ≤ k ≤ 1,000, 0 ≤ n , m ≤ k,且 n + m = k , 0 ≤ a , b ≤1,000,000. 来自NOIP 2011 TG D2T1. 思路:刺激数论! 根据二项式定理:$ (by + ax)^k =\\\\Sigma_{r=0}^{k}C^r_n(by)^{k-r}(ax)^r=\\\\Sigma_{r=0}^{k}C^r_k(a^rb^{k-r})(x^ry^{k-r})$. $ n + m = k$.所以第n项: $(C^n_ka^nb^{m})(x^ny^{m})$. 由组合数的性质:$C^n_ka^nb^{m}=C_k^pa^pb^{k-p},p=min(n,m)$. 最后将问题转化为求$C^p_k\\\\times a^pb^{k-p}$. $ a^pb^{k-p}$通过快速幂求解. $C^n_k$通过组合数递推公式:$C^m_n=C^m_{n-1}+C^{m-1}_{n-1}$求解. 代码:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;using namespace std;#define MO 10007namespace Gekoo { int a, b, k, n, m, C[1005][1005], p; long long ans; int qpow(int a, int b) { int ans = 1 % MO; for (; b; b &gt;&gt;= 1) { if (b &amp; 1) ans = (ans * a) % MO; a = (a * a) % MO; } return ans; } void QAQ() { scanf(\"%d%d%d%d%d\", &amp;a, &amp;b, &amp;k, &amp;n, &amp;m); p = min(n, m), a %= MO, b %= MO; ans = (qpow(a, n) * qpow(b, m)) % MO; for (int i = 0; i &lt;= k; i++) C[i][0] = C[i][i] = 1; for (int i = 2; i &lt;= k; i++) { for (int j = 1; j &lt;= p; j++) { C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MO; } } ans = (ans * C[k][p]) % MO; printf(\"%lld\\n\",ans); }}int main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p1313/"},{"title":" Luogu P1731 生日蛋糕\t\t","text":"搜索 and 超神剪枝 Luogu P1731 生日蛋糕题面：题目描述7月17日是Mr.W的生日，ACM-THU为此要制作一个体积为Nπ的M层 生日蛋糕，每层都是一个圆柱体。 设从下往上数第i(1&lt;=i&lt;=M)层蛋糕是半径为Ri, 高度为Hi的圆柱。当iR_{i+1}$ 且$ H_i&gt;H_{i+1} $. 由于要在蛋糕上抹奶油，为尽可能节约经费，我们希望蛋糕外表面（最下一层的下底面除外）的面积Q最小。 令Q= Sπ 请编程对给出的N和M，找出蛋糕的制作方案（适当的Ri和Hi的值），使S最小。 （除Q外，以上所有数据皆为正整数） 输入格式：有两行，第一行为N（N&lt;=20000），表示待制作的蛋糕的体积为Nπ；第二行为M(M&lt;=15)，表示蛋糕的层数为M。 输出格式：仅一行，是一个正整数S（若无解则S=0）。 思路:主体是暴力DFS.主要加了3个剪枝. 体积超过限制后剪枝 表面积超过最优解剪枝 玄(数)学剪枝 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;#define N 25namespace Gekoo { int n, m, r[N], h[N], ans = (1 &lt;&lt; 30); void dfs(int s, int v, int lv) { if (lv == m + 1) { if (v == n) ans = std::min(ans, s + r[1] * r[1]); return ; } if (v &gt; n || s + r[1] * r[1] &gt;= ans) { //体积超出限制 || 表面积超出最优解 return ; } //此题最坑的玄(数)学剪枝 if (2 * (n - v) / r[lv - 1] + s &gt; ans) return ; for (int i = r[lv - 1] - 1; i &gt;= m - lv + 1; i--) { //枚举r for (int j = h[lv - 1] - 1; j &gt;= m - lv + 1; j--) { //枚举h r[lv] = i; h[lv] = j; dfs(s + 2 * i * j, v + i * i * j, lv + 1); r[lv] = 0; h[lv] = 0; } } } void QAQ(){ scanf(\"%d%d\", &amp;n, &amp;m); r[0] = (int) sqrt(n); h[0] = (int) sqrt(n); dfs(0, 0, 1); ans = (ans == (1 &lt;&lt; 30)) ? 0 : ans; printf(\"%d\\n\", ans); }}using namespace Gekoo;signed main() { QAQ(); return 0;}","link":"/2019/02/28/luogu-p1731/"},{"title":" Luogu P2024 [NOI2001]食物链\t\t","text":"并查集 Luogu P2024 [NOI2001]食物链题面：题目描述动物王国中有三类动物 A , B , C , 这三类动物的食物链构成了有趣的环形. A 吃 B , B 吃 C , C 吃 A. 现有 N 个动物,以 1 － N 编号.每个动物都是 A , B , C 中的一种,但是我们并不知道 它到底是哪一种. 有人用两种说法对这 N 个动物所构成的食物链关系进行描述: 第一种说法是“1 X Y”，表示 X 和 Y 是同类. 第二种说法是“2 X Y”，表示 X 吃 Y . 此人对 N 个动物,用上述两种说法,一句接一句地说出 K 句话,这 K 句话有的是真 的,有的是假的.当一句话满足下列三条之一时,这句话就是假话,否则就是真话. 当前的话与前面的某些真的话冲突,就是假话 当前的话中 X 或 Y 比 N 大,就是假话 当前的话表示 X 吃 X,就是假话 你的任务是根据给定的 N 和 K 句话,输出假话的总数. 输入格式：第一行两个整数 , N , K , 表示有 N 个动物, K 句话. 第二行开始每行一句话. 输出格式：一行,一个整数,表示假话的总数. 数据范围：1 ≤ N ≤ 5 ∗ 10^4 1 ≤ K ≤ 10^5 思路:事拓展域并查集.将每个动物分成同类食物和敌人三个域. 设每句话第一个数为a, 矛盾的几种情况: $x &gt; n || y &gt; n$ $a = 1,x_{self} = y_{eat}$ $a = 1, x_{eat} = y_{self}$ $a = 2, x_{self} = y_{self}$ $a = 2, x_{self} = y_{eat}$ $a = 2, x = y$ 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;bits/stdc++.h&gt;using namespace std;namespace Gekoo { const int N = 50005; int n, k, fa[N*3], ans;//1~n事同类,n~2n事食物,2n~3n事敌人. int get(int x) { if (x == fa[x]) return x; return fa[x] = get(fa[x]); } void main() { printf(\"%d%d\", &amp;n, &amp;k); for(int i = 1; i &lt;= n * 3; i++) { fa[i] = i; } for(int i = 1; i &lt;= k; i++) { int a, x, y; scanf(\"%d%d%d\", &amp;a, &amp;x, &amp;y); if (x &gt; n || y &gt; n) { ++ans; continue; } int x_self = x, x_eat = x + n, x_enemy = x + 2 * n; int y_self = y, y_eat = y + n, y_enemy = y + 2 * n; if (a == 1) { if (get(x_self) == get(y_eat) || get(x_eat) == get(y_self)) { ++ans; continue; } else { fa[get(x_self)] = get(y_self); fa[get(x_eat)] = get(y_eat); fa[get(x_enemy)] = get(y_enemy); } } else { if (get(x_self) == get(y_self) || get(x_self) == get(y_eat) || x == y) { ++ans; continue; } else { fa[get(x_self)] = get(y_enemy); fa[get(x_eat)] = get(y_self); fa[get(x_enemy)] = get(y_eat); } } } printf(\"%d\\n\", ans); }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p2024/"},{"title":" Luogu P2880 Balanced Lineup\t\t","text":"ST表 Luogu P2880 Balanced Lineup题面：题目描述每天,农夫 John 的N(1 &lt;= N &lt;= 50,000)头牛总是按同一序列排队. 有一天, John 决定让一些牛们玩一场飞盘比赛. 他准备找一群在对列中为置连续的牛来进行比赛. 但是为了避免水平悬殊,牛的身高不应该相差太大. John 准备了Q (1 &lt;= Q &lt;= 180,000) 个可能的牛的选择和所有牛的身高 (1 &lt;= 身高 &lt;= 1,000,000). 他想知道每一组里面最高和最低的牛的身高差别. 输入格式：第1行：N,Q 第2到N+1行：每头牛的身高 第N+2到N+Q+1行：两个整数A和B，表示从A到B的所有牛。（1&lt;=A&lt;=B&lt;=N） 输出格式：输出每行一个数，为最大数与最小数的差 思路:开两个数组f和g，分别存最大值和最小值就行了 蓝题++这怎么是蓝题的 代码:123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;using namespace std;#define N 50005#define r(x) x=read();inline int read(){ int a=1,b=0;char c; do{c=getchar();if(c=='-') a=-1;}while(c&lt;'0'||c&gt;'9'); do{b=b*10+c-'0';c=getchar();}while(c&gt;='0'&amp;&amp;c&lt;='9'); return a*b;}int n,q,a[N],f[N][25],g[N][25];void ST_pre(){ for(int i=1;i&lt;=n;i++) f[i][0]=g[i][0]=a[i]; int t=log2(n)+1; for(int j=1;j&lt;t;j++){ for(int i=1;i&lt;=n-(1&lt;&lt;j)+1;i++){ f[i][j]=max(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]); g[i][j]=min(g[i][j-1],g[i+(1&lt;&lt;(j-1))][j-1]); } }}int ST_q(int l,int r){ int t=log2(r-l+1); return max(f[l][t],f[r-(1&lt;&lt;t)+1][t])-min(g[l][t],g[r-(1&lt;&lt;t)+1][t]);}int main(){ r(n);r(q); for(int i=1;i&lt;=n;i++){ r(a[i]); } ST_pre(); for(int i=1,a,b;i&lt;=q;i++){ r(a);r(b); printf(\"%d\\n\",ST_q(a,b)); } return 0;}","link":"/2019/02/28/luogu-p2880/"}],"tags":[{"name":"二分","slug":"二分","link":"/tags/二分/"},{"name":"最小生成树","slug":"最小生成树","link":"/tags/最小生成树/"},{"name":"基环树","slug":"基环树","link":"/tags/基环树/"},{"name":"LCA","slug":"LCA","link":"/tags/LCA/"},{"name":"欧拉回路","slug":"欧拉回路","link":"/tags/欧拉回路/"},{"name":"考试","slug":"考试","link":"/tags/考试/"},{"name":"KMP","slug":"KMP","link":"/tags/KMP/"},{"name":"圆方树","slug":"圆方树","link":"/tags/圆方树/"},{"name":"2-pointers","slug":"2-pointers","link":"/tags/2-pointers/"},{"name":"最短路","slug":"最短路","link":"/tags/最短路/"},{"name":"Dijkstra","slug":"Dijkstra","link":"/tags/Dijkstra/"},{"name":"线段树优化建图","slug":"线段树优化建图","link":"/tags/线段树优化建图/"},{"name":"状压DP","slug":"状压DP","link":"/tags/状压DP/"},{"name":"Tarjan","slug":"Tarjan","link":"/tags/Tarjan/"},{"name":"BCC","slug":"BCC","link":"/tags/BCC/"},{"name":"树上差分","slug":"树上差分","link":"/tags/树上差分/"},{"name":"欧拉路","slug":"欧拉路","link":"/tags/欧拉路/"},{"name":"并查集","slug":"并查集","link":"/tags/并查集/"},{"name":"暴力","slug":"暴力","link":"/tags/暴力/"},{"name":"数学","slug":"数学","link":"/tags/数学/"},{"name":"DP","slug":"DP","link":"/tags/DP/"},{"name":"树形DP","slug":"树形DP","link":"/tags/树形DP/"},{"name":"期望DP","slug":"期望DP","link":"/tags/期望DP/"},{"name":"记忆化搜索","slug":"记忆化搜索","link":"/tags/记忆化搜索/"},{"name":"SCC","slug":"SCC","link":"/tags/SCC/"},{"name":"图论","slug":"图论","link":"/tags/图论/"},{"name":"缩点","slug":"缩点","link":"/tags/缩点/"},{"name":"矩阵乘法","slug":"矩阵乘法","link":"/tags/矩阵乘法/"},{"name":"DFS","slug":"DFS","link":"/tags/DFS/"},{"name":"莫队","slug":"莫队","link":"/tags/莫队/"},{"name":"带修莫队","slug":"带修莫队","link":"/tags/带修莫队/"},{"name":"生成树","slug":"生成树","link":"/tags/生成树/"},{"name":"Floyd","slug":"Floyd","link":"/tags/Floyd/"},{"name":"二分图","slug":"二分图","link":"/tags/二分图/"},{"name":"匈牙利","slug":"匈牙利","link":"/tags/匈牙利/"},{"name":"数位DP","slug":"数位DP","link":"/tags/数位DP/"},{"name":"拓扑排序","slug":"拓扑排序","link":"/tags/拓扑排序/"},{"name":"分块","slug":"分块","link":"/tags/分块/"},{"name":"DCC","slug":"DCC","link":"/tags/DCC/"},{"name":"树链剖分","slug":"树链剖分","link":"/tags/树链剖分/"},{"name":"RMQ","slug":"RMQ","link":"/tags/RMQ/"},{"name":"ST表","slug":"ST表","link":"/tags/ST表/"},{"name":"SPFA","slug":"SPFA","link":"/tags/SPFA/"},{"name":"差分约束","slug":"差分约束","link":"/tags/差分约束/"},{"name":"割点","slug":"割点","link":"/tags/割点/"},{"name":"bitset","slug":"bitset","link":"/tags/bitset/"},{"name":"离散化","slug":"离散化","link":"/tags/离散化/"},{"name":"数论","slug":"数论","link":"/tags/数论/"},{"name":"拓展欧拉定理","slug":"拓展欧拉定理","link":"/tags/拓展欧拉定理/"},{"name":"Hash","slug":"Hash","link":"/tags/Hash/"},{"name":"树状数组","slug":"树状数组","link":"/tags/树状数组/"},{"name":"线段树","slug":"线段树","link":"/tags/线段树/"},{"name":"比赛","slug":"比赛","link":"/tags/比赛/"},{"name":"快速幂","slug":"快速幂","link":"/tags/快速幂/"},{"name":"前缀和","slug":"前缀和","link":"/tags/前缀和/"},{"name":"背包","slug":"背包","link":"/tags/背包/"},{"name":"BFS","slug":"BFS","link":"/tags/BFS/"},{"name":"����","slug":"����","link":"/tags/����/"},{"name":"DP�Ż�","slug":"DP�Z�","link":"/tags/DP�Z�/"},{"name":"��̬�����߶���","slug":"��̬�����߶���","link":"/tags/��̬�����߶���/"},{"name":"��״����","slug":"��״����","link":"/tags/��״����/"},{"name":"EXGCD","slug":"EXGCD","link":"/tags/EXGCD/"},{"name":"CRT","slug":"CRT","link":"/tags/CRT/"},{"name":"EXLucas","slug":"EXLucas","link":"/tags/EXLucas/"},{"name":"模拟","slug":"模拟","link":"/tags/模拟/"},{"name":"矩阵快速幂","slug":"矩阵快速幂","link":"/tags/矩阵快速幂/"},{"name":"组合计数","slug":"组合计数","link":"/tags/组合计数/"},{"name":"树上启发式合并","slug":"树上启发式合并","link":"/tags/树上启发式合并/"},{"name":"动态开点线段树","slug":"动态开点线段树","link":"/tags/动态开点线段树/"},{"name":"状压","slug":"状压","link":"/tags/状压/"},{"name":"贪心","slug":"贪心","link":"/tags/贪心/"},{"name":"分治","slug":"分治","link":"/tags/分治/"}],"categories":[{"name":"题解","slug":"题解","link":"/categories/题解/"}]}