{"pages":[{"title":"about","text":"关于我这里Gekoo,是弱省的一个蒟蒻WAer…目前正在文化课倒数与OI间苦苦挣扎喜欢的话就坚持8 友链本Blog首席合作伙伴:中华人民共和国政府 https://www.gov.cn 同届生:AKUOI DKY https://baka.online素质电竞 HHY https://oierhhy.top阳光男孩 TKJ https://oiertkj.top压行鬼才 宇興 https://www.cnblogs.com/yu-xing勤奋巨神 Chloris https://www.cnblogs.com/chloris物理很菜 AQSfer https://www.cnblogs.com/qxyzili--24不知写啥 OIerGLH https://www.cnblogs.com/oierglh儒雅随和 SIN_XIII https://www.cnblogs.com/SINXIII 学长/姐:邦邦人 Labelray http://labelray.top恶心肥宅 ErkkiErkko https://www.cnblogs.com/ErkkiErkko游戏开发者 Floatiy https://www.cnblogs.com/floatiy 校外朋友:ACCPET https://zhehao.topYorkWu http://yueyangwu.cn","link":"/about/index.html"}],"posts":[{"title":"BZOJ 2791 [POI2012] Rendezvous","text":"真实毒瘤题 思路:显然,最后建图结果是一个内向基环树森林 这题就是要大力分类讨论。。。 如果两个点不在同一棵树上，无解，输出-1 -1 如果在同一棵树上，再判断两个点是否都在同一棵子树里。 如果在同一棵子树，我们可以直接求LCA。 如果不在同一棵子树上，我们需要先令两个点都走到环上，最后的答案一定是从一个点走到另一个点路径的较小值。 写这种毒瘤题好烦啊（（（ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;const int N = 500000 + 2333;int n, k, tot, tp, cnt, fa[N][21], color[N], root[N], dep[N], stack[N], siz[N], id[N];bool on_circle[N], vis[N], ins[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}void dfs(int x) { stack[++tp] = x, vis[x] = ins[x] = 1; int f = fa[x][0]; if (ins[f]) { int tmp = 0; color[f] = ++cnt, on_circle[f] = 1, fa[f][0] = 0, root[f] = f, id[f] = tmp; for (int i = tp; stack[i] != f; i--) { on_circle[stack[i]] = 1, color[stack[i]] = cnt, id[stack[i]] = ++tmp; root[stack[i]] = stack[i], fa[stack[i]][0] = 0; } siz[cnt] = tmp + 1, ins[x] = 0; return; } else { if (!vis[f]) dfs(f); ins[x] = 0; if (on_circle[x]) return; color[x] = color[f], dep[x] = dep[f] + 1, root[x] = root[f]; for (int i = 1; i &lt;= 20; i++) fa[x][i] = fa[ fa[x][i - 1] ][i - 1]; }}int LCA(int a, int b){ if (dep[a] &gt; dep[b]) std::swap(a, b); for (int i = 20; i &gt;= 0; --i) if (dep[a] &lt;= dep[b] - (1 &lt;&lt; i)) b = fa[b][i]; if (a == b) return a; for (int i = 20; i &gt;= 0; --i) if (fa[a][i] != fa[b][i]) a = fa[a][i], b = fa[b][i]; return fa[a][0];}signed main() { n = R(), k = R(); for (int i = 1; i &lt;= n; i++) fa[i][0] = R(); for (int i = 1; i &lt;= n; i++) if (!vis[i]) tp = 0, dfs(i); while (k--) { int a, b, x, y; a = R(), b = R(); if (color[a] != color[b]) { puts(\"-1 -1\"); continue; } if (root[a] == root[b]) { int lca = LCA(a, b); x = dep[a] - dep[lca], y = dep[b] - dep[lca]; printf(\"%d %d\\n\", x, y); } else { x = dep[a], y = dep[b], a = root[a], b = root[b], tot = siz[color[a]]; int x_1 = x + (id[a] - id[b] + tot) % tot, y_1 = y; int x_2 = x, y_2 = y + (id[b] - id[a] + tot) % tot; int max_1 = std::max(x_1, y_1), max_2 = std::max(x_2, y_2); int min_1 = std::min(x_1, y_1), min_2 = std::min(x_2, y_2); if (max_1 &lt; max_2 || (max_1 == max_2 &amp;&amp; min_1 &lt; min_2) || (max_1 == max_2 &amp;&amp; min_1 == min_2 &amp;&amp; x_1 &gt;= y_1)) printf(\"%d %d\\n\", x_1, y_1); else printf(\"%d %d\\n\", x_2, y_2); } } return 0;}","link":"/2019/07/16/bzoj-2791/"},{"title":"BZOJ 3073 Journeys","text":"线段树优化建图 思路:$N\\le 500000$,暴力建图$N^2$瞬间暴死,GG. 可以发现都是区间向区间连边,这里就可以用线段树优化建图. 线段树只需要连最多nlogn条边就可以建图,你必活(逃 具体的做法: 建两棵线段树,1号线段树儿子向爸爸连边,作为入点, 0号线段树爸爸向儿子连边,作为出点.0号线段树的每个叶子再向1号线段树对应叶子连边.需要加边时, 从1号线段树对应区间连一个虚点.虚点再连向0号线段树的对应节点. 可以自己手画两棵线段树出来模拟一下,理解一下这么连为什么是对的( 这道题要求最短路,还需要考虑一下边权的问题.除1号线段树与虚点连边的边权为1外,其他边权都为0.这要才能保证每个区间间的路径权为1. 跑最短路时以p节点所对应1号线段树中叶子节点为起点,跑堆优化Dijkstra. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;bits/stdc++.h&gt;inline int Read() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}const int N = 3000005;struct Edge {int to, nxt, val;} e[N &lt;&lt; 3];struct SegTree { int ls, rs, l, r;} tr[N];int head[N], ecnt, tot, pos[N], n, m, p, root_0, root_1;void AddEdge(int f, int to, int val) { e[++ecnt] = (Edge) {to, head[f], val}, head[f] = ecnt;}void Build(int &amp;p, int l, int r, int opt) { p = ++tot, tr[p].l = l, tr[p].r = r; if (l == r) { if (opt) pos[l] = p; //这里记住1号线段树的叶子位置,之后都用得到 return; } int mid = (l + r) &gt;&gt; 1; Build(tr[p].ls, l, mid, opt), Build(tr[p].rs, mid + 1, r, opt); if (opt) AddEdge(tr[p].ls, p, 0), AddEdge(tr[p].rs, p, 0); else AddEdge(p, tr[p].ls, 0), AddEdge(p, tr[p].rs, 0);}void ConnectTheLeaves(int p) { if (tr[p].l == tr[p].r) { AddEdge(p, pos[tr[p].l], 0); return; } ConnectTheLeaves(tr[p].ls); ConnectTheLeaves(tr[p].rs);} /*这个函数就是连接树与虚点了.opt为0表示从虚点向0号线段树连边,1相反.*/void AddOnTree(int p, int l, int r, int v, int opt) { if (tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r) { if (opt) AddEdge(p, v, 1); else AddEdge(v, p, 0); return; } int mid = (tr[p].l + tr[p].r) &gt;&gt; 1; if (l &lt;= mid) AddOnTree(tr[p].ls, l, r, v, opt); if (r &gt; mid) AddOnTree(tr[p].rs, l, r, v, opt);}void Add(int l_1, int r_1, int l_2, int r_2) { AddOnTree(root_1, l_1, r_1, ++tot, 1); AddOnTree(root_0, l_2, r_2, tot, 0);}int dis[N];bool vis[N];void Dijkstra() { memset(dis, 0x3f, sizeof(dis)); std::priority_queue&lt;std::pair&lt;int, int&gt; &gt; q; dis[pos[p]] = 0; q.push(std::make_pair(0, pos[p])); while (q.size()) { int x = q.top().second; q.pop(); if (vis[x]) continue; vis[x] = 1; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (dis[y] &gt; dis[x] + e[i].val) { dis[y] = dis[x] + e[i].val; if (!vis[y]) q.push(std::make_pair(-dis[y], y)); } } }}signed main() { n = Read(), m = Read(), p = Read(); Build(root_1, 1, n, 1), Build(root_0, 1, n, 0), ConnectTheLeaves(root_0); for (int i = 1; i &lt;= m; i++) { int a = Read(), b = Read(), c = Read(), d = Read(); Add(a, b, c, d), Add(c, d, a, b); } Dijkstra(); for (int i = 1; i &lt;= n; i++) std::cout &lt;&lt; dis[pos[i]] &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/17/bzoj-3073/"},{"title":"BZOJ 2654 Tree","text":"开 幕 雷 击 思路:看见要求”恰好”xxx就感到不可做((( 大体思路是先建一棵MST,然后再在它上面修改,使得这棵树有need条白边. 我们去用白边替换MST上的黑边肯定是布星的,改一次就要动一棵子树,难以保证权最小. 没有思路就上厕所((,突然有了一个idea,我们可以改白边的边权再生成MST,使得它的数量等于need. 显然改大了白边就少了,改小了白边就大了,似乎有单调性,珂以二分( 这二分好毒瘤啊,调了好几次 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;const int N = 100000 + 233;struct Edge { int from, to, nxt, val, color; friend bool operator &lt;(Edge a, Edge b) { return a.val != b.val ? a.val &lt; b.val : a.color &lt; b.color; }} e[N &lt;&lt; 1];int ecnt, head[N], v, m, need, fa[N];void AddEdge(int f, int to, int val, int color) { e[++ecnt] = (Edge) {f, to, head[f], val, color}, head[f] = ecnt;}int get(int x) { return x == fa[x] ? x : fa[x] = get(fa[x]);}int check(int delta) { for (int i = 1; i &lt;= v; i++) fa[i] = i; for (int i = 1; i &lt;= m; i++) if (!e[i].color) e[i].val += delta; int tot = 0, ans = 0; std::sort(e + 1, e + 1 + m); for (int i = 1; i &lt;= m; i++) { int x = e[i].from, y = e[i].to; if (get(x) != get(y)) { fa[get(x)] = get(y); if (!e[i].color) ++tot; ans += e[i].val; } } for (int i = 1; i &lt;= m; i++) if (!e[i].color) e[i].val -= delta; return tot &gt;= need ? ans : -1;}signed main() { std::ios::sync_with_stdio(0); std::cin &gt;&gt; v &gt;&gt; m &gt;&gt; need; for (int i = 1, s, t, c, col; i &lt;= m; i++) { std::cin &gt;&gt; s &gt;&gt; t &gt;&gt; c &gt;&gt; col; AddEdge(s + 1, t + 1, c, col); } int l = -300, r = 300, mid, ans = 0; while (l &lt;= r) { mid = (l + r) &gt;&gt; 1; int tmp = check(mid); if (tmp != -1) ans = tmp - need * mid, l = mid + 1; else r = mid - 1; } std::cout &lt;&lt; ans &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/11/bzoj-2654/"},{"title":"BZOJ 3033 太鼓达人","text":"dfs神题（不 思路:当时看题属实懵逼 第一问很简单，每个位置01两种，最后答案$2^k$. 第二问我很好骑。。。是要求所有01串首尾相连形成串的最小值 数据范围又不大，显然起点是全0的串，dfs就完事了（ 最后查了题解，我们其实可以把k-1位的串看成节点，k位串看成边去建图，由于每个点入度等于出度，这是一个欧拉图。 以全0节点为起点，优先走字典序小的边，找欧拉回路，这是正解（ 代码：1234567891011121314151617181920212223#include &lt;bits/stdc++.h&gt;int k, m, ans[(1 &lt;&lt; 12)];bool vis[(1 &lt;&lt; 12)];bool dfs(int x, int k) { if (vis[x]) return 0; if (k == m) return 1; vis[x] = 1; ans[k] = x &amp; 1; if (dfs((x &lt;&lt; 1) &amp; (m - 1), k + 1)) return 1; if (dfs(((x &lt;&lt; 1) | 1) &amp; (m - 1), k + 1)) return 1; return 0;}signed main() { std::cin &gt;&gt; k; std::cout &lt;&lt; (m = (1 &lt;&lt; k)) &lt;&lt; \" \"; dfs(0, 1); for (int i = 1; i &lt;= k - 1; i++) std::cout &lt;&lt; \"0\"; for (int i = 1; i &lt;= m - k + 1; i++) std::cout &lt;&lt; ans[i]; std::cout &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/16/bzoj-3033/"},{"title":"BZOJ 3331 [BeiJing2013] 压力","text":"圆方树真好用.jpg 思路:显然,每个BCC对答案的贡献为0.因此考虑缩点,但BCC…. 有一种好的数据结构-圆方树! 入门戳这里 圆方树YES 最后只需要统计经过每个圆点的路径数,考虑树上差分.在路径两端点++,LCA—,fa[LCA]—,最后dfs统计. LCA我选择树剖.(因为无脑 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;const int N = 400233;int n, m, q, ecnt, ccnt, p, num, tot, head[N], hc[N], dfn[N], low[N], stk[N], ans[N], delta[N];struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1];inline void AddEdge(int f, int to) { e[++ecnt] = (Edge) {to, head[f]}, head[f] = ecnt;}inline void AddC(int f, int to) { c[++ccnt] = (Edge) {to, hc[f]}, hc[f] = ccnt;}void Tarjan(int x) { dfn[x] = low[x] = ++num, stk[++p] = x; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (!dfn[y]) { Tarjan(y), low[x] = std::min(low[x], low[y]); if (low[y] &gt;= dfn[x]) { AddC(++tot, x), AddC(x, tot); int z; do { z = stk[p--], AddC(tot, z), AddC(z, tot); } while (y != z); } } else low[x] = std::min(low[x], dfn[y]); }}int fa[N], dep[N], siz[N], tp[N], son[N];void dfs1(int x, int f) { fa[x] = f, dep[x] = dep[f] + 1, siz[x] = 1; for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) { if (y != f) { dfs1(y, x), siz[x] += siz[y]; if (siz[y] &gt; siz[son[x]]) son[x] = y; } }}void dfs2(int x, int tpp) { tp[x] = tpp; if (!son[x]) return; dfs2(son[x], tpp); for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) if (y != fa[x] &amp;&amp; y != son[x]) dfs2(y, y);}int GetLCA(int x, int y) { while (tp[x] != tp[y]) { if (dep[tp[x]] &lt; dep[tp[y]]) y = fa[tp[y]]; else x = fa[tp[x]]; } return dep[x] &lt; dep[y] ? x : y;}void dfs(int x) { for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) if (y != fa[x]) dfs(y), delta[x] += delta[y];}signed main() { std::ios::sync_with_stdio(0); std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; q; for (int i = 1, x, y; i &lt;= m; i++) std::cin &gt;&gt; x &gt;&gt; y, AddEdge(x, y), AddEdge(y, x); tot = n; for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); dfs1(1, 0), dfs2(1, 1); while (q--) { int x, y; std::cin &gt;&gt; x &gt;&gt; y; int lca = GetLCA(x, y); ++delta[x], ++delta[y], --delta[lca], --delta[fa[lca]]; } dfs(1); for (int i = 1; i &lt;= n; i++) std::cout &lt;&lt; delta[i] &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/17/bzoj-3331/"},{"title":"BZOJ 3590 [SNOI 2013] Quare","text":"这和Tarjan有什么关系？为什么在Tarjan专题? 思路：选出无向图中包含所有点的权值和最小的双连通子图。 完全没思路，看了题解才会。。。。。 首先有一条重要的性质：一个双连通图可以拆成一个小双连通图和一条链。 我们首先能想到状压，用集合S表示点集。 那么设f[S]表示点集S构成的双连通图的最小权值和。 此题最大的思维难点来力：再预处理出两个数组g[S][i][j], h[S][i][1/0]. 其中数组g表示以i、j为链端点，链的点集为S，这条链的最小权值。数组h表示从点i到点集S的最短边和次短边。 我们为什么要求这两个数组？由上文性质可以想到状态的转移，一个点集S是从一个更小的点集T和一条链转移来的。而这条链汇入点集T时有两种情况：1.链只有一个点。那么链与T的两条连边就是这个点到T的最小边和次小边。2.链不止一个点，那么连边就是两个端点与T的最小边。 我还没写过这么长的状压DP。。。。。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;bits/stdc++.h&gt;int mx, n, m, t, ecnt, head[15], f[1 &lt;&lt; 13], g[1 &lt;&lt; 13][13][13], h[1 &lt;&lt; 13][13][3], bin[13], cnt[1 &lt;&lt; 13];struct Edge {int to, nxt, val;} e[233333];inline void AddEdge(int f, int to, int val) { e[++ecnt] = {to, head[f], val}, head[f] = ecnt;}signed main() { scanf(\"%d\", &amp;t); for (int i = 1; i &lt; 13; i++) bin[i] = (1 &lt;&lt; (i - 1)); for (int i = 1; i &lt; (1 &lt;&lt; 13); i++) cnt[i] = cnt[i &gt;&gt; 1] + (i &amp; 1); while (t--) { memset(g, 0x10, sizeof(g)); memset(h, 0x10, sizeof(h)); memset(f, 0x10, sizeof(f)); memset(head, 0, sizeof(head)); scanf(\"%d%d\", &amp;n, &amp;m); mx = (1 &lt;&lt; n) - 1; for (int i = 1, x, y, z; i &lt;= m; i++) { scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); AddEdge(x, y, z), AddEdge(y, x, z); } for (int i = 1; i &lt;= n; i++) g[bin[i]][i][i] = 0; for (int x = 1; x &lt;= n; x++) for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) g[bin[x] | bin[y]][x][y] = std::min(g[bin[x] | bin[y]][x][y], e[i].val); for (int S = 1; S &lt;= mx; S++) for (int x = 1; x &lt;= n; x++) for (int y = 1; y &lt;= n; y++) if ((bin[x] &amp; S) &amp;&amp; (bin[y] &amp; S)) for (int i = head[y], z = e[i].to; i; i = e[i].nxt, z = e[i].to) if (!(bin[z] &amp; S)) g[S | bin[z]][x][z] = std::min(g[S | bin[z]][x][z], g[S][x][y] + e[i].val); for (int S = 1; S &lt;= mx; S++) for (int x = 1; x &lt;= n; x++) if (!(S &amp; bin[x])) for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) if (S &amp; bin[y]) { if (e[i].val &lt;= h[S][x][0]) h[S][x][1] = h[S][x][0], h[S][x][0] = e[i].val; else if (e[i].val &lt; h[S][x][1]) h[S][x][1] = e[i].val; } for (int i = 1; i &lt;= n; i++) f[bin[i]] = 0; for (int D = 1; D &lt;= mx; D++) if (cnt[D] &gt;= 2) for (int S = (D - 1) &amp; D, T = D - S; S; S = (S - 1) &amp; D, T = D - S) for (int x = 1; x &lt;= n; x++) for (int y = 1; y &lt;= n; y++) if ((S &amp; bin[x]) &amp;&amp; (S &amp; bin[y])) { if (x == y) f[D] = std::min(f[D], f[T] + g[S][x][x] + h[T][x][0] + h[T][x][1]); else f[D] = std::min(f[D], f[T] + g[S][x][y] + h[T][x][0] + h[T][y][0]); } if (f[mx] &gt;= 0x10101010) puts(\"impossible\"); else printf(\"%d\\n\", f[mx]); } return 0;}","link":"/2019/07/17/bzoj-3590/"},{"title":"hzoi-CSP-10","text":"越考越烂，感觉药丸 感觉考试策略和心态出了大问题 Problem A:辣鸡这是一道以我的名字命名的题目，我很自豪。 看了题没啥思路，开始看数据点。 第一个数据点只有一个矩形，看出来了单矩形内的式子$2 (x_2 - x_1) (y_2 - y_1)$.5pts get 继续读题，还是没啥思路，去上厕所（ 回来后继续想，只能想出$O(N^2)$的暴力，因为我想不到什么方法去处理不同矩形间的关系。 码码码，昨天写插头DP的后遗症显现出来了，写了一堆IF。。。。 晚上没睡好没关空调被冻醒，调试进度缓慢，写完T1考试过了一半了。。。 考完看题解，我×，真是$O(N^2)$的大暴力？？？？ 不过加了一个优化：把矩形按照左下角坐标排序，这样，只要两个矩形相离就可以直接break掉。 这个我在考试的时候其实写了，但是脑抽在提交时注释掉了。。。。 这分丢的真实丢人 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define ll long longll n, x_1, x_2, y_1, y_2, ans;struct Node { ll x_1, y_1, x_2, y_2; friend bool operator &lt;(Node a, Node b) { if (a.x_1 == b.x_1) return a.y_1 &lt; b.y_1; return a.x_1 &lt; b.x_1; }} nd[100005]; bool In(ll x, ll y, Node a) { return a.x_1 &lt;= x &amp;&amp; a.x_2 &gt;= x &amp;&amp; a.y_1 &lt;= y &amp;&amp; a.y_2 &gt;= y;}namespace case5 { signed QAQ() { for (int i = 1; i &lt;= n; i++) scanf(\"%lld%lld%lld%lld\", &amp;x_1, &amp;y_1, &amp;x_2, &amp;y_2), nd[i] = {x_1, y_1, x_2, y_2}, ans += (x_2 - x_1) * (y_2 - y_1) * 2; std::sort(nd + 1, nd + 1 + n); for (int i = 1; i &lt;= n; i++) { for (int j = i + 1; j &lt;= n; j++) { if (nd[j].x_1 &gt; nd[i].x_2 + 1) break; if ((nd[j].x_1 == nd[i].x_2 + 1 || nd[j].x_2 == nd[i].x_1 - 1) &amp;&amp; (nd[j].y_1 == nd[i].y_2 + 1 || nd[j].y_2 == nd[i].y_1 - 1)) ++ans; else if (nd[j].x_1 == nd[i].x_2 + 1 || nd[j].x_2 == nd[i].x_1 - 1) { ll x = std::min(nd[i].y_2, nd[j].y_2), y = std::max(nd[i].y_1, nd[j].y_1); if (x &gt;= y) { ans += 2ll * (x - y); if (nd[i].y_2 != nd[j].y_2) ++ans; if (nd[i].y_1 != nd[j].y_1) ++ans; } } else if (nd[j].y_1 == nd[i].y_2 + 1 || nd[j].y_2 == nd[i].y_1 - 1) { ll x = std::min(nd[i].x_2, nd[j].x_2), y = std::max(nd[i].x_1, nd[j].x_1); if (x &gt;= y) { ans += 2ll * (x - y); if (nd[i].x_2 != nd[j].x_2) ++ans; if (nd[i].x_1 != nd[j].x_1) ++ans; } } } } return !printf(\"%lld\\n\", ans); }}signed main() { scanf(\"%lld\", &amp;n); return case5::QAQ();} Problem B:模板wdnmd真模板啊都 第一眼读错题以为树上差分，再仔细看，应该是每个节点开个动态开点线段树，然后线段树合并。 问题来了，这玩意我都不会啊。。。 跳了 最开始以为是线段树合并，结果邓鸽鸽说线段树合并必死，布星。 热情的邓鸽鸽向我传授了我没有学习过的船新算法 树上启发式合并 学完之后发现就是很普通的启发式合并用到了树上而已 先说做法，给每个节点按时间轴开个动态开点线段树，节点保存种类和球数。易于发现每个点的球与它的子树有关。先把修改操作保存起来，开始处理整棵树。对于每个节点，我们需要判断这个球有没有出现在桶，因为这影响了我们对于种类的统计。于是再开一个数组存每个球最早出现的时间，只有最早出现的球才是有贡献的。 这道题的瓶颈在于答案的统计。可以发现我们算的每个点的答案都是子树答案的叠加，暴力的做法是遍历所有子树，这个复杂度是$O(N^2)$的，是30分暴力。 这太暴力力，，，于是就有了树上启发式合并，它没有某谷日报说的那么玄乎，其实和普通的启发式合并差不多。直接说优化方法：我们暴力算出轻儿子的答案，期间都清空辅助数组，只保留答案。重儿子我们就不用清空辅助数组了，算出答案，这样子节点的答案都算出来了，就差父亲的了。我们把轻儿子的答案直接合并到重儿子的答案，就得到了父节点的答案。 放在这道题，每次轻儿子计算后清空记小球出现时间的那个数组，然后算重儿子，之后将轻儿子上的线段树都启发式合并到重儿子的线段树上，父节点直接继承这棵线段树，不断递归这个过程。这个做法复杂度是$O(Nlog^2N)$级别的，就可以过了。 真难写，调了好久。 这道题学到的东西蛮多的。首先我之前一直没看动态开点线段树，学前置芝士的时候直接学了。然后我经常口胡启发式合并，但从来没写过，码力不足，这次也真的写了一次。第三，好久没写过这么复杂的题了，属实锻炼码力。 说句闲话，我之前一直WA40，一看Query没return，默认return了堆栈的top。败RP啊。。。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142#include &lt;bits/stdc++.h&gt;const int N = 1e5 + 233;int n, k[N], m, q, ecnt, head[N], color[N], disc[N];int early[N], stk[N * 200], tp, ans[N], root[N];struct Edge { int to, nxt;} e[N &lt;&lt; 1];int ls[N * 200], rs[N * 200], siz[N * 200], val[N * 200];std::vector&lt;int&gt; op[N];inline void add_edge(int f, int to) { e[++ecnt] = {to, head[f]}, head[f] = ecnt;}int fa[N], sz[N], son[N];void dfs1(int x, int f) { fa[x] = f, sz[x] = 1 + (int) op[x].size(); for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (y != f) { dfs1(y, x); sz[x] += sz[y]; if (sz[y] &gt; sz[son[x]]) son[x] = y; } }}int tot, rbin[N * 200], rbin_top;int new_node() { if (tot + 1 &lt; N * 200) return ++tot; else return rbin[rbin_top--];}void del_node(int x) { rbin[++rbin_top] = x;}void pushup(int p) { siz[p] = siz[ls[p]] + siz[rs[p]]; val[p] = val[ls[p]] + val[rs[p]];}void change(int &amp;p, int L, int R, int x, int y) { if (!p) p = new_node(); if (L == R) { siz[p] = 1; if (y != -1) val[p] = y; return; } int mid = (L + R) &gt;&gt; 1; if (x &lt;= mid) change(ls[p], L, mid, x, y); else change(rs[p], mid + 1, R, x, y); pushup(p);}void merge(int p, int &amp;root, int L, int R) { if (!p) return; if (L == R) { if (early[color[L]] &gt; L) { change(root, 1, m, early[color[L]], 0); change(root, 1, m, L, 1); early[color[L]] = L; } else if (early[color[L]] == 0) { change(root, 1, m, L, 1); early[color[L]] = L; stk[++tp] = color[L]; } else { change(root, 1, m, L, -1); } del_node(p); } int mid = (L + R) &gt;&gt; 1; merge(ls[p], root, L, mid); merge(rs[p], root, mid + 1, R);}int query(int p, int L, int R, int bucket) { if (!bucket || !p) return 0; if (siz[p] &lt;= bucket) return val[p]; int mid = (L + R) &gt;&gt; 1, ret = 0; if (siz[ls[p]] &lt; bucket) { ret += val[ls[p]]; ret += query(rs[p], mid + 1, R, bucket - siz[ls[p]]); } else { ret += query(ls[p], L, mid, bucket); } return ret;}void clear() { while (tp &gt; 0) early[stk[tp--]] = 0;}void solve(int x) { for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) if (y != son[x] &amp;&amp; y != fa[x]) solve(y), clear(); //先解决轻儿子的答案 if (son[x]) solve(son[x]); root[x] = root[son[x]]; for (unsigned int i = 0; i &lt; op[x].size(); i++) { int co = color[op[x][i]]; if (early[co] == 0) { change(root[x], 1, m, op[x][i], 1); early[co] = op[x][i]; stk[++tp] = co; } else if (early[co] &gt; op[x][i]) { change(root[x], 1, m, early[co], 0); change(root[x], 1, m, op[x][i], 1); early[co] = op[x][i]; } else { change(root[x], 1, m, op[x][i], -1); } } for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (y != fa[x] &amp;&amp; y != son[x]) { merge(root[y], root[x], 1, m); } } ans[x] = query(root[x], 1, m, k[x]);}signed main() { scanf(\"%d\", &amp;n); for (int i = 1, x, y; i &lt;= n - 1; i++) scanf(\"%d%d\", &amp;x, &amp;y), add_edge(x, y), add_edge(y, x); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", k + i); scanf(\"%d\", &amp;m); for (int i = 1, x, y; i &lt;= m; i++) scanf(\"%d%d\", &amp;x, &amp;y), disc[i] = color[i] = y, op[x].push_back(i); std::sort(disc + 1, disc + 1 + m); int QwQ = std::unique(disc + 1, disc + 1 + m) - (disc + 1); for (int i = 1; i &lt;= m; i++) color[i] = std::lower_bound(disc + 1, disc + 1 + QwQ, color[i]) - disc; scanf(\"%d\", &amp;q); dfs1(1, 0); solve(1); for (int i = 1, x; i &lt;= q; i++) scanf(\"%d\", &amp;x), printf(\"%d\\n\", ans[x]); return 0;} Problem C:大佬这是一道以我的同桌的名字命名的题目，我的同桌很自豪。 读完题感觉这是假期望（这是错误的万恶之源） 然而其实我此时读错题了（这是fa[万恶之源]） 总方案数不就是$m^n$嘛，求出所有方案和不就行了嘛！ DP不能！别问！问就是DFS！干就完事了！ 干个头啊，cwy你分没了（哭 区间的长度是k不是n，总方案数是$m^k$不是$m^n$（错误1） 题目要求的是算t较大的w，不是最大w的t（错误2）（终极弱智错误） DFS不能后我开始尝试DP。我设计f[i][j]表示第i天最大难度j的方案数。（错误3） 首先基于错误2我的转移方程全是错的。其次，这么设置状态有后效性，DP不能。 官方题解看不懂，邓鸽鸽方法跑得快还好懂。 我们先求出来每个区间最大难度值为i的劳累期望。 所有区间的概率的分母：$\\frac{1}{m^k}$.正确认识是k不是n是你AC的重要基础（捂脸，因为区间长度是k。 在看分子部分，也就是有多少情况的i是有贡献的，也就是区间的最大值。从1-k中选数，区间能产生$i^k$种序列，刨掉最大值不是i的序列，有$(i - 1) ^ k$种。 所以每个区间的劳累期望为$\\sum \\limits _{i = 1} ^ m ( i^k - (i - 1) ^k ) m^{-k} w_i$. 然后激动的cwy输入了样例，挂掉了。 这是一个区间，别忘了乘个区间数。。。 最终答案$(n - k + 1) \\sum \\limits _{i = 1} ^ m (i^k - (i - 1) ^k) m^{-k} w_i$. 这题很坑，数据有k &gt; n的，要特判掉。 123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;#define ll long longconst int MOD = 1000000007;ll n, m, k, ans, w;ll qpow(ll x, ll b) { ll ret = 1; for (; b; b &gt;&gt;= 1, x = x * x % MOD) if (b &amp; 1) ret = ret * x % MOD; return ret;}signed main() { scanf(\"%lld%lld%lld\", &amp;n, &amp;m, &amp;k); if (n &lt; k) return !printf(\"0\\n\"); for (int i = 1; i &lt;= m; i++) scanf(\"%lld\", &amp;w), ans = (ans + w * (qpow(i, k) - qpow(i - 1, k)) % MOD * qpow(m, k * (MOD - 2)) % MOD) % MOD; printf(\"%lld\\n\", ans * (n - k + 1) % MOD); return 0;}","link":"/2019/09/11/hzoi-CSP-10/"},{"title":"hzoi-CSP-8","text":"HZ怎么老考试啊23333 考试前一天占个坑。给自己的忠告：想不出正解就别想了，暴力打满Rank就不会难看QaQ —-华丽的分割线—- 考完了，Rank14，我又boomboomboom了orz 最后T3的暴力还是没打出来，我就是个想不出正解还要ning想的DD T1:匹配我是Sb 一眼KMP，刚正不阿的cwy不会忘记了看猫片，果断$O(N^2)$暴力走人（ 后来一看正解居然是蛤希，我草了，，，早知道就ning干力QAQ 考场上现推KMP估计还是能推出来的，如果能多想想就好了 简直对不起图巨 而且想不到KMP为啥不想想别的啊。。。懊悔中 复习下KMP： $nxt[i]$表示了$S[,i]$的前缀最长border的位置，当我们要匹配一个新的字母，我们设定一个指针p = nxt[i - 1]，如果S[i] = S[p+1]说明匹配大成功，p+1就是$S[,i]$的前缀最长border的位置，否则p指针一直往回跳，最恶情况就是无法匹配，一直跳到了1。 123456789101112131415161718192021222324#include &lt;bits/stdc++.h&gt;const int N = 300000 + 233;int T, la, lb, nxt[N];char a[N], b[N], add[5];signed main() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d%d\", &amp;la, &amp;lb); scanf(\"%s%s\", a + 1, add); a[la + 1] = '$', ++la; for (int i = 1; i &lt;= lb; i++) a[i + la] = a[i]; a[la + lb + 1] = add[0]; for (int i = 2; a[i]; i++) { int p = nxt[i - 1]; while (p &amp;&amp; a[i] != a[p + 1]) p = nxt[p]; if (a[i] == a[p + 1]) nxt[i] = p + 1; } printf(\"%d\\n\", nxt[la + lb + 1]); memset(nxt, 0, sizeof(nxt)); } return 0;} T2:回家我离AC只差一个90w的数组 一眼求割点，速码开T3。T3写完，二眼好像不对，割点不一定在1-n路径上。于是赶回来修锅，建个圆方树，dfs求出1-n经过的圆点。 然后就MLE了？？？？红太阳GMK说他数组开小了，我跟风给常数乘个10. 然后我就A了？？？ 这题还是挺显然的，思路秒出 考试时候千万别吝啬空间，够开就开，QAQ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;const int N = 2000000 + 233;int T, n, m, ans;struct Edge {int to, nxt;} e[N &lt;&lt; 2], c[N &lt;&lt; 2];int ecnt, head[N], ccnt, hc[N], tot;bool yes[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}int low[N], dfn[N], num, stk[N], p;inline void AddEdge(int f, int to) { e[++ecnt] = {to, head[f]}, head[f] = ecnt;}inline void AddC(int f, int to) { c[++ccnt] = {to, hc[f]}, hc[f] = ccnt;}void Tarjan(int x) { dfn[x] = low[x] = ++num; stk[++p] = x; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); if (dfn[x] == low[y]) { AddC(x, ++tot), AddC(tot, x); int z; do { z = stk[p--], AddC(z, tot), AddC(tot, z); } while (y != z); } } else low[x] = std::min(low[x], dfn[y]); }}void dfs(int x, int fa) { for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) { if (y != fa) { dfs(y, x); if (y == n) return (void) (yes[x] = 1); else if (yes[y]) yes[x] = 1; } }}signed main() { T = R(); while (T--) { n = R(), m = R(), tot = n; for (int i = 1, x, y; i &lt;= m; i++) x = R(), y = R(), AddEdge(x, y), AddEdge(y, x); Tarjan(1); dfs(1, 0); for (int i = 2; i &lt; n; i++) if (yes[i]) ans++; printf(\"%d\\n\", ans); for (int i = 2; i &lt; n; i++) if (yes[i]) printf(\"%d \", i); if (ans) printf(\"\\n\"); memset(head, 0, sizeof(head)); memset(low, 0, sizeof(low)); memset(dfn, 0, sizeof(dfn)); memset(hc, 0, sizeof(hc)); memset(stk, 0, sizeof(stk)); memset(yes, 0, sizeof(yes)); num = ecnt = ccnt = ans = p = 0; } return 0;} T3:寿司开始想着会不会是一个类似与Data Backup的贪心思路，推了一段时间开码，码完发现不对，完全失败，这时发现T2有问题去修锅。 修完锅继续想，zzz，想不出来，好像只会打暴力DFS，码码码，没码完到点了，GG 考完看题解，发现我过于Noob，无法看出出题人的显然性质。 我们看到环很自然就破环为链，这时我们枚举从上头选个环的断点。 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;const int N = 2000000 + 233;int T, n; long long sbl[N], sbr[N], srl[N], srr[N], sl[N], sr[N], ans = 0x3f3f3f3f3f3f3f3f;char sushi[N];inline long long calc(int l, int r, int p) { return sl[p] - sl[l - 1] - sbl[l - 1] * (srl[p] - srl[l - 1]) + sr[p + 1] - sr[r + 1] - sbr[r + 1] * (srr[p + 1] - srr[r + 1]);}signed main() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%s\", sushi + 1); n = strlen(sushi + 1); for (int i = 1; i &lt;= n; i++) sushi[i + n] = sushi[i]; sbl[0] = srl[0] = sl[0] = sbr[2 * n + 1] = srr[2 * n + 1] = sr[2 * n + 1] = 0; for (int i = 1; i &lt;= 2 * n; i++) { sl[i] = sl[i - 1], sbl[i] = sbl[i - 1], srl[i] = srl[i - 1]; if (sushi[i] == 'B') sbl[i]++; else srl[i]++, sl[i] += sbl[i]; } for (int i = 2 * n; i &gt;= 1; i--) { sr[i] = sr[i + 1], sbr[i] = sbr[i + 1], srr[i] = srr[i + 1]; if (sushi[i] == 'B') sbr[i]++; else srr[i]++, sr[i] += sbr[i]; } for (int i = 1, j = 1; i &lt;= n; i++) { while (calc(i, i + n - 1, j) &gt;= calc(i, i + n - 1, j + 1)) ++j; ans = std::min(ans, calc(i, i + n, j)); } printf(\"%lld\\n\", ans); ans = 0x3f3f3f3f3f3f3f3f; } return 0;}","link":"/2019/09/11/hzoi-CSP-8/"},{"title":"hzoi-CSP-14","text":"以前的坑，填一下。 写在前面的：以后我的考试感想将主要写自己的反思，题解之类的就略写了，主要能让我自己回忆起来就行。 想看详细题解点这里 https://www.cnblogs.com/Gkeng，比我写的不知高到哪里去了。 Problem A:旋转子段一对点反转后可以成为固定点，满足$a_i + i = a_j + j$.$a_i + i$可以确定一个反转区间的中心。 我们把每个$a_i + i$扔到桶里，这里用vector。枚举区间中心，按区间长度把每个桶内排序，扫一遍用区间内固定点个数更新答案。 这题没啥问题，实名谴责出题人假数据范围。 123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;const int N = 1000005;int n, ori[N &lt;&lt; 2], ans, sum[N &lt;&lt; 2], pos;std::vector&lt;int&gt; v[N &lt;&lt; 2];bool cmp(int x, int y) { return abs(pos - (x &lt;&lt; 1)) &lt; abs(pos - (y &lt;&lt; 1));}signed main() { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;ori[i]); sum[i] = sum[i - 1] + (ori[i] == i); v[i + ori[i]].push_back(i); } for (int i = 2; i &lt;= (n &lt;&lt; 1); i++) { if (v[i].empty()) continue; pos = i; std::sort(v[i].begin(), v[i].end(), cmp); int j = 1; for (auto k : v[i]) { int l = k, r = i - k; if (l &gt; r) std::swap(l, r); ans = std::max(ans, sum[l - 1] + sum[n] - sum[r] + j), j++; } } return !printf(\"%d\\n\", ans);} Problem B:走格子初看以为就是BFS，发现限制很多。 Portal可以直接等价于跑到离得最近的墙，建立Portal，就可以前往四个方向的任意一个墙。 想到暴力建图跑最短路。预处理墙的位置更好做一点。 本次考试以及OI生涯最大失误：把数据生成器错交到了OJ上。。。。。 我都不知道我的脑子里都在想点啥。。。。。。。。 以后提交之前必须check一下，100分白丢太痛苦，Rank 2 -&gt; Rank 35 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include &lt;bits/stdc++.h&gt;#define id(x, y) ((x - 1) * m + y)const int N = 500005, M = 505;int n, m, ecnt, head[N], st, ed, step[M][M], dis[N];int wall_l[M][M], wall_r[M][M], wall_u[M][M], wall_d[M][M];const int dx[4] = {1, -1, 0, 0}, dy[4] = {0, 0, 1, -1};char matrix[M][M];struct Edge {int to, nxt, val;} e[N &lt;&lt; 3];std::queue&lt;std::pair&lt;int, int&gt; &gt; q;bool vis[N];inline void addedge(int f, int to, int val) { e[++ecnt] = {to, head[f], val}, head[f] = ecnt;}void link(int x, int y) { if (matrix[x][y] != '.') return; if (matrix[x][y + 1] == '.') addedge(id(x, y), id(x, y + 1), 1), addedge(id(x, y + 1), id(x, y), 1);; if (matrix[x + 1][y] == '.') addedge(id(x, y), id(x + 1, y), 1), addedge(id(x + 1, y), id(x, y), 1); if (wall_l[x][y] != id(x, y)) addedge(id(x, y), wall_l[x][y], step[x][y]); if (wall_r[x][y] != id(x, y)) addedge(id(x, y), wall_r[x][y], step[x][y]); if (wall_u[x][y] != id(x, y)) addedge(id(x, y), wall_u[x][y], step[x][y]); if (wall_d[x][y] != id(x, y)) addedge(id(x, y), wall_d[x][y], step[x][y]);}void Dij() { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt;std::pair&lt;int, int&gt; &gt; que; dis[st] = 0; que.push(std::make_pair(0, st)); while (!que.empty()) { int x = que.top().second; que.pop(); if (vis[x]) continue; vis[x] = 1; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (dis[y] &gt; dis[x] + e[i].val) { dis[y] = dis[x] + e[i].val; if (!vis[y]) que.push(std::make_pair(-dis[y], y)); } } }}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) { scanf(\"%s\", matrix[i] + 1); for (int j = 1; j &lt;= m; j++) { if (matrix[i][j] == 'C') matrix[i][j] = '.', st = id(i, j); else if (matrix[i][j] == 'F') matrix[i][j] = '.', ed = id(i, j); else if (matrix[i][j] == '#') q.push(std::make_pair(i, j)); } } while (!q.empty()) { int x = q.front().first, y = q.front().second; q.pop(); for (int i = 0; i &lt;= 3; i++) { int xx = x + dx[i], yy = y + dy[i]; if (matrix[xx][yy] == '.' &amp;&amp; !step[xx][yy]) { step[xx][yy] = step[x][y] + 1; q.push(std::make_pair(xx, yy)); } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= m; j++) { if (matrix[i][j] != '.') continue; if (matrix[i][j - 1] == '#') wall_l[i][j] = id(i, j); else wall_l[i][j] = wall_l[i][j - 1]; if (matrix[i - 1][j] == '#') wall_u[i][j] = id(i, j); else wall_u[i][j] = wall_u[i - 1][j]; } } for (int i = n; i &gt;= 1; i--) { for (int j = m; j &gt;= 1; j--) { if (matrix[i][j] != '.') continue; if (matrix[i][j + 1] == '#') wall_r[i][j] = id(i, j); else wall_r[i][j] = wall_r[i][j + 1]; if (matrix[i + 1][j] == '#') wall_d[i][j] = id(i, j); else wall_d[i][j] = wall_d[i + 1][j]; } } for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= m; j++) link(i, j); Dij(); if (dis[ed] == 0x3f3f3f3f) puts(\"no\"); else printf(\"%d\\n\", dis[ed]); return 0;} Problem C:柱状图$O(N^3)$暴力很好想，枚举位置，枚举高度，暴力计算，考场时间剩太少&amp;贪正解，甚至这玩意都没打。 $O(N^2)$需要动动脑子：我们要得到一个等差数列，可以直接给每一项减掉一个等差数列，再把它填平。可以想到填到处理后的中位数是最优的。 它过不去。瓶颈在于答案的计算。可以去打那个树状数组的正解，把内层的N优化到log，我直接用退火优化掉了外层的N，优化到O(玄学)。 一些人对退火有争议，我无法理解。用退火也没有什么问题，它和三分二分一样都是优化复杂度的工具，不存在什么骗AC的事情。而且本题答案(你原来要二分的那个东西，不是退火退的那个东西)必定单谷，这势必保证了退火实际效率能够吊打正解。 爱说啥说啥吧，hhh。 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;bits/stdc++.h&gt;#define ll long longconst double eps = 0.1;const int N = 100005;int n;ll x[N], tmp[N], tmppos, nowpos, tmpans, nowans = 0x3f3f3f3f3f3f3f3f;double T = 100000;ll calc(int pos) { ll mx = std::max(n - pos, pos - 1); for (int i = 1; i &lt;= n; i++) tmp[i] = x[i] - mx + abs(i - pos); int mid = (1 + n) &gt;&gt; 1; ll ret = 0, mdzz = 0; std::nth_element(tmp + 1, tmp + mid, tmp + n + 1); mdzz = tmp[mid] &gt; 0 ? tmp[mid] : 1; for (int i = 1; i &lt;= n; i++) ret += abs(mdzz - tmp[i]); return ret;}signed main() { srand(clock() + time(0)); scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;x[i]); while (T &gt; eps) { tmppos = ((int) (nowpos + (int) (T * ((double) rand()/ (double) RAND_MAX) * (rand() % 2 ? 1 : -1)) % n + n)) % n + 1; tmpans = calc(tmppos); ll delta = tmpans - nowans; if (delta &lt; 0) nowans = tmpans, nowpos = tmppos; else if (exp((double) -delta / T) * RAND_MAX &gt; rand()) nowpos = tmppos; T *= 0.976; } printf(\"%lld\\n\", nowans); return 0;}","link":"/2019/09/11/hzoi-CSP-14/"},{"title":" Luogu P1073 最优贸易","text":"虚假的Dijkstra 题面：题目描述C 国有 n 个大城市和 m 条道路，每条道路连接这 n 个城市中的某两个城市。任意两个城市之间最多只有一条道路直接相连。这 m 条道路中有一部分为单向通行的道路，一部分为双向通行的道路，双向通行的道路在统计条数时也计为 1 条。 C 国幅员辽阔，各地的资源分布情况各不相同，这就导致了同一种商品在不同城市的价格不一定相同。但是，同一种商品在同一个城市的买入价和卖出价始终是相同的。 商人阿龙来到 C 国旅游。当他得知同一种商品在不同城市的价格可能会不同这一信息之后，便决定在旅游的同时，利用商品在不同城市中的差价赚回一点旅费。设 C 国 n 个城市的标号从 1~ n，阿龙决定从 1 号城市出发，并最终在 n 号城市结束自己的旅行。在旅游的过程中，任何城市可以重复经过多次，但不要求经过所有 n 个城市。阿龙通过这样的贸易方式赚取旅费：他会选择一个经过的城市买入他最喜欢的商品――水晶球，并在之后经过的另一个城市卖出这个水晶球，用赚取的差价当做旅费。由于阿龙主要是来 C 国旅游，他决定这个贸易只进行最多一次，当然，在赚不到差价的情况下他就无需进行贸易。 现在给出 n 个城市的水晶球价格，m 条道路的信息（每条道路所连接的两个城市的编号以及该条道路的通行情况）。请你告诉阿龙，他最多能赚取多少旅费。 输入格式：第一行包含 2 个正整n 和 m ，中间用一个空格隔开，分别表示城市的数目和道路的数目。 第二行 n 个正整数，每两个整数之间用一个空格隔开，按标号顺序分别表示这 n 个城市的商品价格。 接下来 m 行，每行有 3 个正整数 x, y, z，每两个整数之间用一个空格隔开。如果 = 1，表示这条道路是城市 x 到城市 y 之间的单向道路；如果 z = 2，表示这条道路为城市 x 和城市 y 之间的双向道路。 输出格式：一个整数，表示最多能赚取的旅费。如果没有进行贸易，则输出 0。 数据范围：输入数据保证 1 号城市可以到达 n 号城市。 对于 10% 的数据，1 ≤ n ≤ 6。 对于 30% 的数据，1 ≤ n ≤ 100。 对于 50% 的数据，不存在一条旅游路线，可以从一个城市出发，再回到这个城市。 对于 100% 的数据，1 ≤ n ≤ 100000，1 ≤ m ≤ 500000，1 ≤ x, y ≤ n，1 ≤ z ≤ 2，1 ≤ 各城市 水晶球价格 ≤ 100. 思路:问题转化为求1-n的一条路径使得途径点的最大点权与最小点权的差最大. 建原图和反图，先在正图上跑“Dijkstra”得到1到各点最小值，再在反图上跑“Dijkstra”得到n到各点最大值。 枚举1 - n，维护$ans=max(ans,E[i]-G[i])$. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], g[N &lt;&lt; 1]; int ecnt, gcnt, ehead[N], ghead[N], n, m, p[N], E[N], G[N], ans; bool vis[N]; inline void AddE(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = ehead[f], ehead[f] = ecnt;} inline void AddG(int f, int to) {g[++gcnt].to = to, g[gcnt].nxt = ghead[f], ghead[f] = gcnt;} signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;p[i]); for (int i = 1; i &lt;= m; i++) { int x , y , z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); AddE(x, y); AddG(y, x); if (z == 2) { AddE(y, x); AddG(x, y); } } //Dijkstra memset(vis, 0, sizeof(vis)); memset(E, 0x3f, sizeof(E)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; q; q.push(std::make_pair(-p[1], 1)); E[1] = p[1]; while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = ehead[u]; i; i = e[i].nxt) { int v = e[i].to; E[v] = std::min(E[u], p[v]); q.push(std::make_pair(-E[v], v)); } } memset(G, -0x3f, sizeof(G)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; Q; Q.push(std::make_pair(p[n], n)); G[n] = p[n]; while (!Q.empty()) { int u = Q.top().second; Q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = ghead[u]; i; i = g[i].nxt) { int v = g[i].to; G[v] = std::max(G[u], p[v]); Q.push(std::make_pair(G[v], v)); } } //枚举节点 for (int i = 1; i &lt;= n; i++) ans = std::max(ans, G[i] - E[i]); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/01/luogu-p1073/"},{"title":"衡中NOIP模拟赛4 反思","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/07/18/hzoi-NOIP-5/"},{"title":"LOJ 2311「ZJOI2006」物流运输","text":"神题。跪了 思路：这题图论DP结合，绝了 用Dijkstra预处理第i天到第j天从A到B的最短路dis[i][j]，每次ban掉被封锁的码头。 第i天最小成本f[i] = min(f[j] + dis[j + 1][i] * ()) 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;const int N = 23333;struct Edge {int to, nxt, d;} e[N &lt;&lt; 1];int ecnt, head[N], n, m, k, t, f[233], dis[233], dis_to_m[233][233], tim;bool ins[N], ban[50][200];void AddEdge(int f, int to,int d) { e[++ecnt] = (Edge) {to, head[f], d}, head[f] = ecnt;}bool check(int x, int l, int r) { for (int i = l; i &lt;= r; i++) if (ban[x][i]) return 0; return 1;}int Dijkstra(int l, int r) { memset(dis, 0x3f, sizeof(dis)); memset(ins, 0, sizeof(ins)); std::priority_queue&lt;std::pair&lt;int, int&gt; &gt; q; dis[1] = 0; q.push(std::make_pair(0, 1)); while (q.size()) { int x = q.top().second; q.pop(); if (ins[x]) continue; ins[x] = 1; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (dis[y] &gt; dis[x] + e[i].d &amp;&amp; check(y, l, r)) { dis[y] = dis[x] + e[i].d; if (!ins[y]) q.push(std::make_pair(-dis[y], y)); } } } return dis[m];}signed main() { std::ios::sync_with_stdio(0); std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; t; for (int i = 1, x, y, z; i &lt;= t; i++) { std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; z; AddEdge(x, y, z), AddEdge(y, x, z); } std::cin &gt;&gt; t; for (int i = 1, p, a, b; i &lt;= t; i++) { std::cin &gt;&gt; p &gt;&gt; a &gt;&gt; b; for (int i = a; i &lt;= b; i++) ban[p][i] = 1; } for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= i; j++) dis_to_m[j][i] = Dijkstra(j, i); memset(f, 0x3f, sizeof(f)); f[0] = -k; for (int i = 1; i &lt;= n; i++) for (int j = 0; j &lt; i; j++) if (dis_to_m[j + 1][i] != 0x3f3f3f3f) f[i] = std::min(f[j] + dis_to_m[j + 1][i] * (i - j) + k, f[i]); std::cout &lt;&lt; f[n] &lt;&lt; \"\\n\"; return 0;}","link":"/2019/07/17/loj-2311/"},{"title":"LOJ 2255 [SNOI 2017] 炸弹","text":"简化了的线段树优化建图 思路:一个炸弹炸的范围是一个区间,考虑线段树优化建图. 这道题是一个点向一个区间连边,就只需要建一棵线段树了. 建一棵线段树,从上向下连节点.当我们需要用炸弹向爆炸区间连边时,我们从它所对应的线段树叶子节点向线段树的区间连边 对于可以互相炸到的炸弹,我们可以跑一边Tarjan缩个点,方便统计. 统计理论上应该用拓扑,但我脑抽了写了个dfs( 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;#define ll long longconst int N = 5002333, MO = 1000000007;struct Edge {int to, nxt;} e[N &lt;&lt; 3], c[N &lt;&lt; 3];struct SegTree { int l, r, ls, rs;} t[N &lt;&lt; 2];int head[N], ecnt, ccnt, hc[N], tot, pos[N], n, root, f[N], ans, vis[N], tim, cnt;ll x[N], r[N];void AddEdge(int f, int to) { e[++ecnt] = {to, head[f]}, head[f] = ecnt;}void AddC(int f, int to) { c[++ccnt] = {to, hc[f]}, hc[f] = ccnt;}void Build(int &amp;p, int l, int r) { p = ++tot, t[p].l = l, t[p].r = r; if (l == r) {pos[l] = p; return;} int mid = (l + r) &gt;&gt; 1; Build(t[p].ls, l, mid), Build(t[p].rs, mid + 1, r); AddEdge(p, t[p].ls), AddEdge(p, t[p].rs);}void Link(int p, int l, int r, int v) { if (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) { if (pos[v] == p) return; AddEdge(pos[v], p); return; } int mid = (t[p].l + t[p].r) &gt;&gt; 1; if (l &lt;= mid) Link(t[p].ls, l, r, v); if (r &gt; mid) Link(t[p].rs, l, r, v);}int dfn[N], low[N], stk[N], id[N], siz[N], p, num, scc;bool ins[N];void Tarjan(int x) { dfn[x] = low[x] = ++num; stk[++p] = x, ins[x] = 1; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (!dfn[y]) { Tarjan(y), low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (low[x] == dfn[x]) { ++scc; int z; do { z = stk[p--], ins[z] = 0, id[z] = scc; } while (x != z); }}void dfs(int x) { vis[x] = tim, cnt += siz[x]; for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) if (vis[y] != tim) vis[y] = tim, dfs(y);}int Solve(int x) { x = id[pos[x]]; if (f[x]) return f[x]; tim++, cnt = 0; dfs(x); return f[x] = cnt;}signed main() { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) scanf(\"%lld%lld\", &amp;x[i], &amp;r[i]); Build(root, 1, n); for (int i = 1; i &lt;= n; i++) { int L = std::lower_bound(x + 1, x + 1 + n, x[i] - r[i]) - x; int R = std::upper_bound(x + 1, x + 1 + n, x[i] + r[i]) - x - 1; Link(1, L, R, i); } for (int i = 1; i &lt;= n; i++) if (!dfn[pos[i]]) Tarjan(pos[i]); for (int x = 1; x &lt;= tot; x++) for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) if (id[x] != id[y]) AddC(id[x], id[y]); for (int i = 1; i &lt;= n; i++) siz[id[pos[i]]]++; for (int i = 1; i &lt;= n; i++) (ans += (long long) i * (long long) Solve(i) % MO) %= MO; return !printf(\"%d\\n\", ans);}","link":"/2019/07/17/loj-2255/"},{"title":"LOJ 2587 「APIO2018」铁人两项","text":"据说是圆方树模板题,但我卡了好久（ 开幕感谢学姐Labelray教我这道题（祝她NOI Day2翻盘 本题要找一个三元组&lt;s, c, f&gt;，自然可以想到枚举端点s、f，求有几个中间点，也就是sf所在路径上有几个点。这个过程可以理解为在许多个BCC间走动，也就是在圆方树的方点间走动。 我们把方点的权值设为BCC的大小，方案数就是x到y路径上点的权值和。我们把圆点的权值设为-1，因为它们可能在多个BCC中出现，会重复统计。最后问题转化为求树上任意两点间距离权值和，这是一个树形DP的问题，当然我们也可以不DP，考虑每个点的贡献。 首先要注意的是所有点不一定联通，这可能是一个圆方树森林。因此我们每Tarjan完一次就来求一次答案。 我们设siz[x]为以x为根节点子树有多少圆点。有两种路径，一种是在x子树内两个点经过i，另一种是x子树内一个点与子树外一个点经过点x。 我们再设：y为x子树的根节点，tot为整棵圆方树的圆点数。需要注意的一点是这里的siz[x]是每处理一棵子树再加上去的，是截至目前已经处理过的x子树圆点数。 对于第一种，每个y对答案的贡献为siz[x] * siz[y] * val[x]。对于第二种，x的贡献为siz[x] * (num - siz[x]) * val[x]。这里的siz[x]已经处理完了。 注意只有ans开long long是不行的，右边也要强制转换。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;const int N = 200233;struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1];int head[N], hc[N], ecnt, ccnt, n, m, val[N], siz[N];long long ans;inline void AddEdge(int f, int to) { e[++ecnt] = {to, head[f]}, head[f] = ecnt;}inline void AddC(int f, int to) { c[++ccnt] = {to, hc[f]}, hc[f] = ccnt;}int dfn[N], low[N], stk[N], num, p, tot;void Tarjan(int x) { dfn[x] = low[x] = ++num, stk[++p] = x; for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (!dfn[y]) { Tarjan(y), low[x] = std::min(low[x], low[y]); if (low[y] &gt;= dfn[x]) { AddC(++tot, x), AddC(x, tot); int z; val[tot]++; do { z = stk[p--], AddC(tot, z), AddC(z, tot), val[tot]++; } while (y != z); } } else low[x] = std::min(low[x], dfn[y]); }}void dfs(int x, int fa) { if (x &lt;= n) siz[x] = 1; for (int i = hc[x], y = c[i].to; i; i = c[i].nxt, y = c[i].to) if (y != fa) dfs(y, x), ans += 1LL * siz[x] * siz[y] * val[x], siz[x] += siz[y]; ans += 1LL * siz[x] * (num - siz[x]) * val[x];} signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); AddEdge(x, y), AddEdge(y, x); } tot = n; for (int i = 1; i &lt;= n; i++) val[i] = -1; for (int i = 1; i &lt;= n; i++) if (!dfn[i]) num = 0, Tarjan(i), dfs(i, 0); return !printf(\"%lld\\n\", ans &lt;&lt; 1);}","link":"/2019/07/17/loj-2587/"},{"title":" Luogu P1108 低价购买\t\t","text":"变种LIS 题面：题目描述“低价购买”这条建议是在奶牛股票市场取得成功的一半规则。要想被认为是伟大的投资者，你必须遵循以下的问题建议:“低价购买；再低价购买”。每次你购买一支股票,你必须用低于你上次购买它的价格购买它。买的次数越多越好!你的目标是在遵循以上建议的前提下，求你最多能购买股票的次数。你将被给出一段时间内一支股票每天的出售价($2^{16} $范围内的正整数)，你可以选择在哪些天购买这支股票。每次购买都必须遵循“低价购买；再低价购买”的原则。写一个程序计算最大购买次数。 这里是某支股票的价格清单： 日期 $ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8, 9 ,10 ,11, 12$ 价格 $68 ,69 ,54, 64,68 ,64 ,70 ,67 ,78 ,62, 98, 87 $ 最优秀的投资者可以购买最多4次股票，可行方案中的一种是： 日期 $2 , 5 , 6 ,10 $ 价格 $69, 68 ,64 ,62 $ 输入格式：第1行: $ N(1 \\\\le N \\\\le 5000) $，股票发行天数 第2行: $ N$个数，是每天的股票价格。 输出格式：两个数: 最大购买次数和拥有最大购买次数的方案数($ \\\\le 2^{31} $)当二种方案“看起来一样”时（就是说它们构成的价格队列一样的时候）,这2种方案被认为是相同的。 思路:第一问ez,由下次购买价格低于上次,求最大购买次数可转化为LIS. 思考点主要在第二问,求出最大购买次数方案数. 事实上可以显然地求出最大购买次数方案数的状态转移方程: c\\[i\\]_{j:1\\\\rightarrow i}= \\\\left{ \\\\begin{aligned} 1,if(f\\[i\\]=1)\\ c\\[i\\]+c\\[j\\],if(f\\[i\\]=f\\[j\\]+1,a\\[i\\]","link":"/2019/02/28/luogu-p1108/"},{"title":"Luogu CF148D Bag of mice","text":"期望DP 思路：学姐说记忆化搜索冗余状态少跑得快（ 主要都是分类讨论，懒得写了（ 代码：123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;int w, b;double f[1005][1005];double dfs(int nw, int nb) { if (!nw) return 0.0; if (!nb) return 1.0; if (f[nw][nb]) return f[nw][nb]; double ret = (double) nw / (nw + nb); if (nb == 2) ret += (double) nb / (nw + nb) * (nb - 1) / (nw + nb - 1) * dfs(nw - 1, nb - 2); else if (nb &gt;= 3) ret += (double) nb / (nw + nb) * (nb - 1) / (nw + nb - 1) * ((double) nw / (nw + nb - 2) * dfs(nw - 1, nb - 2) + (double) (nb - 2) / (nw + nb - 2) * dfs(nw, nb - 3)); return f[nw][nb] = ret;}signed main() { scanf(\"%d%d\", &amp;w, &amp;b); return !printf(\"%.9lf\\n\", dfs(w, b));}","link":"/2019/06/15/luogu-cf148d/"},{"title":" Luogu P1262 间谍网络\t\t","text":"ning干 题面：题目描述由于外国间谍的大量渗入，国家安全正处于高度的危机之中。如果A间谍手中掌握着关于B间谍的犯罪证据，则称A可以揭发B。有些间谍收受贿赂，只要给他们一定数量的美元，他们就愿意交出手中掌握的全部情报。所以，如果我们能够收买一些间谍的话，我们就可能控制间谍网中的每一分子。因为一旦我们逮捕了一个间谍，他手中掌握的情报都将归我们所有，这样就有可能逮捕新的间谍，掌握新的情报。 我们的反间谍机关提供了一份资料，包括所有已知的受贿的间谍，以及他们愿意收受的具体数额。同时我们还知道哪些间谍手中具体掌握了哪些间谍的资料。假设总共有n个间谍(n不超过3000)，每个间谍分别用1到3000的整数来标识。 请根据这份资料，判断我们是否有可能控制全部的间谍，如果可以，求出我们所需要支付的最少资金。否则，输出不能被控制的一个间谍。 输入格式：第一行只有一个整数n。 第二行是整数p。表示愿意被收买的人数，1≤p≤n。 接下来的p行，每行有两个整数，第一个数是一个愿意被收买的间谍的编号，第二个数表示他将会被收买的数额。这个数额不超过20000。 紧跟着一行只有一个整数r，1≤r≤8000。然后r行，每行两个正整数，表示数对(A, B)，A间谍掌握B间谍的证据。 输出格式：如果可以控制所有间谍，第一行输出YES，并在第二行输出所需要支付的贿金最小值。否则输出NO，并在第二行输出不能控制的间谍中，编号最小的间谍编号。 思路:显然,同一个SCC里的间谍会互相出卖.因此,先缩点,记录每个SCC里的最小特工编号和贿赂费用. 思考后可以发现,只要我们控制了所有入度为0的特工,整个图就都可以被控制. 直接寻找一下所有入度为0的点,如果该点不能被贿赂,就无法控制所有间谍,此时记录编号最小的间谍,反之将贿金加给ans. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; int ecnt, ccnt, head[N], hc[N], p, n, m, MO, num, cnt, ans = 0, cant = 0x3f3f3f3f; int stack[N], dfn[N], low[N], id[N], ind[N], val[N]; int mn[N], cost[N]; bool ins[N], flg; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, ins[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], ins[y] = 0; id[y] = cnt; if (cost[y] &gt; 0) val[cnt] = std::min(val[cnt], cost[y]); mn[cnt] = std::min(mn[cnt], y); } while (x != y); } } signed QAQ() { memset(val, 0x3f, sizeof(val)); memset(mn, 0x3f, sizeof(mn)); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); cost[a] = b; } int r; scanf(\"%d\", &amp;r); for (int i = 1; i &lt;= r; i++) { int a, b; scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (id[u] != id[v]) AddC(id[u], id[v]), ind[id[v]]++; } } for (int i = 1; i &lt;= cnt; i++) { if (!ind[i]) { if (val[i] == 0x3f3f3f3f) { flg = 1; cant = std::min(cant, mn[i]); } else { ans += val[i]; } } } if (!flg) return !printf(\"YES\\n%d\\n\", ans); else return !printf(\"NO\\n%d\\n\", cant); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p1262/"},{"title":"luogu-p1297","text":"","link":"/2019/06/15/luogu-p1297/"},{"title":"Luogu P1291 [SHOI2002]百事世界杯之旅","text":"期望DP入门题 思路：这题最大难点在输出格式，我佛了 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;bits/stdc++.h&gt;#define int long longint n;int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b);}struct frac { int p, q; friend frac operator +(const frac a, const frac b) { frac x; x.p = a.p * b.q + b.p * a.q, x.q = a.q * b.q; int g = gcd(x.p, x.q); x.p /= g, x.q /= g; return x; } void print() { if (p % q == 0) { printf(\"%lld\\n\", p / q); return; } else { int g = gcd(p, q); p /= g, q /= g; int inte = p / q, t = q, qlen = 0, ilen = 0; p %= q; while (t) qlen++, t /= 10; t = inte; while (t) ilen++, t /= 10; for (int i = 1; i &lt;= ilen; i++) printf(\" \"); printf(\"%lld\\n\", p); printf(\"%lld\", inte); for (int i = 1; i &lt;= qlen; i++) printf(\"-\"); putchar('\\n'); for (int i = 1; i &lt;= ilen; i++) printf(\" \"); printf(\"%lld\\n\", q); return; } }} ans, tmp;signed main() { scanf(\"%lld\", &amp;n); ans.p = ans.q = tmp.p = tmp.q = 1; for (int i = 2; i &lt;= n; i++) tmp.q = i, ans = ans + tmp; ans.p *= n; ans.print(); return 0;}","link":"/2019/06/15/luogu-p1291/"},{"title":" Luogu P1306 斐波那契公约数\t\t","text":"矩阵乘法板子题 Luogu P1306 斐波那契公约数题面：题目描述对于Fibonacci数列:1,1,2,3,5,8,13……大家应该很熟悉吧~~~但是现在有一个很“简单”问题:第n项和第m项的最大公约数是多少？ 输入格式：两个正整数n和m.($n,m\\\\le 10^9$). 注意:数据很大. 输出格式：Fn和Fm的最大公约数. 由于看了大数字就头晕,所以只要输出最后的8位数字就可以了. 思路:通过打表可以得到一条显然的结论:$gcd(f(n),f(m))=f(gcd(n,m))$. 那么求就vans了.不过数据很大,那么就必须使用矩阵优化了. 所以这是矩阵乘法板子题 求一哈中间矩阵: $\\\\begin {bmatrix} f(i-1), f(i)\\\\\\end{bmatrix}=\\\\begin {bmatrix} f(i-2),f(i-1)\\\\end{bmatrix}\\\\times\\\\begin{bmatrix}0,1\\\\1,1\\\\end{bmatrix}$ 最后:不开long long见祖宗! 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;bits/stdc++.h&gt;using namespace std;#define MO 100000000#define ll long longnamespace Gekoo { ll t, p; struct Mat { ll x[3][3]; Mat() { memset(x, 0, sizeof(x)); } inline void build_x () { memset(x, 0, sizeof(x)); for (int i = 1; i &lt;= 2; i++) x[i][i] = 1; } inline void build_A () { memset(x, 0, sizeof(x)); x[1][2] = x[2][1] = x[2][2] = 1; } }x, A; Mat operator * (const Mat &amp;a, const Mat &amp;b) { Mat z; memset(z.x, 0, sizeof(z)); for (int k = 1; k &lt;= 2; k++) for (int i = 1; i &lt;= 2; i++) for (int j = 1; j &lt;= 2; j++) z.x[i][j] += (a.x[i][k] % MO) * (b.x[k][j] % MO), z.x[i][j] %= MO; return z; } Mat qpow (Mat a, ll b) { Mat ans = x; for (; b; b &gt;&gt;= 1) { if (b &amp; 1) ans = ans * A; A = A * A; } return ans; } ll gcd(ll a, ll b) { return (b == 0) ? a : gcd(b, a % b); } void main () { A.build_A(); x.build_x(); scanf(\"%d%d\", &amp;t, &amp;p); Mat ans = qpow(x, gcd(t, p) - 1); printf(\"%d\\n\", (ans.x[1][1] + ans.x[1][2]) % MO); }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p1306/"},{"title":" Luogu P1313 计算系数\t\t","text":"NOIP最简单的数论题 Luogu P1313 计算系数题面：题目描述给定一个多项式 $ (by+ax)^k $ ,请求出多项式展开后 $x^n \\\\times y^m $项的系数. 输入格式：共一行,包含5个整数,分别为a,b,k,n,m,每两个整数之间用一个空格隔开. 输出格式：共1行,包含一个整数,表示所求的系数,这个系数可能很大,输出对10007取模后的结果. 数据范围：对于30% 的数据,有0 ≤ k ≤10 ； 对于50%的数据,有a = 1,b = 1； 对于100%的数据,有0 ≤ k ≤ 1,000, 0 ≤ n , m ≤ k,且 n + m = k , 0 ≤ a , b ≤1,000,000. 来自NOIP 2011 TG D2T1. 思路:刺激数论! 根据二项式定理:$ (by + ax)^k =\\\\Sigma_{r=0}^{k}C^r_n(by)^{k-r}(ax)^r=\\\\Sigma_{r=0}^{k}C^r_k(a^rb^{k-r})(x^ry^{k-r})$. $ n + m = k$.所以第n项: $(C^n_ka^nb^{m})(x^ny^{m})$. 由组合数的性质:$C^n_ka^nb^{m}=C_k^pa^pb^{k-p},p=min(n,m)$. 最后将问题转化为求$C^p_k\\\\times a^pb^{k-p}$. $ a^pb^{k-p}$通过快速幂求解. $C^n_k$通过组合数递推公式:$C^m_n=C^m_{n-1}+C^{m-1}_{n-1}$求解. 代码:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;using namespace std;#define MO 10007namespace Gekoo { int a, b, k, n, m, C[1005][1005], p; long long ans; int qpow(int a, int b) { int ans = 1 % MO; for (; b; b &gt;&gt;= 1) { if (b &amp; 1) ans = (ans * a) % MO; a = (a * a) % MO; } return ans; } void QAQ() { scanf(\"%d%d%d%d%d\", &amp;a, &amp;b, &amp;k, &amp;n, &amp;m); p = min(n, m), a %= MO, b %= MO; ans = (qpow(a, n) * qpow(b, m)) % MO; for (int i = 0; i &lt;= k; i++) C[i][0] = C[i][i] = 1; for (int i = 2; i &lt;= k; i++) { for (int j = 1; j &lt;= p; j++) { C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MO; } } ans = (ans * C[k][p]) % MO; printf(\"%lld\\n\",ans); }}int main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p1313/"},{"title":"luogu-p1365","text":"","link":"/2019/06/15/luogu-p1365/"},{"title":" Luogu P1726 上白泽慧音\t\t","text":"车 万 厨 大 欢 喜 Luogu P1726 上白泽慧音题面：题目描述在幻想乡，上白泽慧音是以知识渊博闻名的老师。春雪异变导致人间之里的很多道路都被大雪堵塞，使有的学生不能顺利地到达慧音所在的村庄。因此慧音决定换一个能够聚集最多人数的村庄作为新的教学地点。人间之里由N个村庄（编号为1..N）和M条道路组成，道路分为两种一种为单向通行的，一种为双向通行的，分别用1和2来标记。如果存在由村庄A到达村庄B的通路，那么我们认为可以从村庄A到达村庄B，记为(A,B)。当(A,B)和(B,A)同时满足时，我们认为A,B是绝对连通的，记为。绝对连通区域是指一个村庄的集合，在这个集合中任意两个村庄X,Y都满足。现在你的任务是，找出最大的绝对连通区域，并将这个绝对连通区域的村庄按编号依次输出。若存在两个最大的，输出字典序最小的，比如当存在1,3,4和2,5,6这两个最大连通区域时，输出的是1,3,4。 输入格式：第1行：两个正整数N,M 第2..M+1行：每行三个正整数a,b,t, t = 1表示存在从村庄a到b的单向道路，t = 2表示村庄a,b之间存在双向通行的道路。保证每条道路只出现一次。 输出格式：第1行： 1个整数，表示最大的绝对连通区域包含的村庄个数。 第2行：若干个整数，依次输出最大的绝对连通区域所包含的村庄编号。 数据范围：对于60%的数据：N &lt;= 200且M &lt;= 10,000 对于100%的数据：N &lt;= 5,000且M &lt;= 50,000 思路:求图中最大SCC. 基本就是板子(((( 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;bits/stdc++.h&gt;#define N 50005namespace Gekoo { struct Edge { int to, nxt; } e[N &lt;&lt; 1]; int head[N], dfn[N], low[N], c[N], s[N &lt;&lt; 1], ecnt, n, m, num, p, cnt, ans = 1; bool vis[N]; std::vector &lt;int&gt; scc[N]; void Add(int f, int to) { e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt; } void Tarjan(int x) { dfn[x] = low[x] = ++num; s[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int v = e[i].to; if (!dfn[v]) { Tarjan(v); low[x] = std::min(low[x], low[v]); } else if (vis[v]) { low[x] = std::min(low[x], dfn[v]); } } if (dfn[x] == low[x]) { cnt++; int y; do { y = s[p--], vis[y] = 0; c[y] = cnt; scc[cnt].push_back(y); } while (x != y); } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, t; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;t); Add(a, b); if (t == 2) Add(b, a); } for (int i = 1; i &lt;= n; i++) { if (!dfn[i]) Tarjan(i); } for (int i = 1; i &lt;= cnt; i++) { if (scc[i].size() &gt; scc[ans].size()) ans = i; } printf(\"%d\\n\", (int) scc[ans].size()); std::sort(scc[ans].begin(), scc[ans].end()); for (std::vector&lt;int&gt;::iterator it = scc[ans].begin(); it != scc[ans].end(); ++it) { printf(\"%d \", *it); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/05/luogu-p1726/"},{"title":" Luogu P1731 生日蛋糕\t\t","text":"搜索 and 超神剪枝 Luogu P1731 生日蛋糕题面：题目描述7月17日是Mr.W的生日，ACM-THU为此要制作一个体积为Nπ的M层 生日蛋糕，每层都是一个圆柱体。 设从下往上数第i(1&lt;=i&lt;=M)层蛋糕是半径为Ri, 高度为Hi的圆柱。当iR_{i+1}$ 且$ H_i&gt;H_{i+1} $. 由于要在蛋糕上抹奶油，为尽可能节约经费，我们希望蛋糕外表面（最下一层的下底面除外）的面积Q最小。 令Q= Sπ 请编程对给出的N和M，找出蛋糕的制作方案（适当的Ri和Hi的值），使S最小。 （除Q外，以上所有数据皆为正整数） 输入格式：有两行，第一行为N（N&lt;=20000），表示待制作的蛋糕的体积为Nπ；第二行为M(M&lt;=15)，表示蛋糕的层数为M。 输出格式：仅一行，是一个正整数S（若无解则S=0）。 思路:主体是暴力DFS.主要加了3个剪枝. 体积超过限制后剪枝 表面积超过最优解剪枝 玄(数)学剪枝 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;#define N 25namespace Gekoo { int n, m, r[N], h[N], ans = (1 &lt;&lt; 30); void dfs(int s, int v, int lv) { if (lv == m + 1) { if (v == n) ans = std::min(ans, s + r[1] * r[1]); return ; } if (v &gt; n || s + r[1] * r[1] &gt;= ans) { //体积超出限制 || 表面积超出最优解 return ; } //此题最坑的玄(数)学剪枝 if (2 * (n - v) / r[lv - 1] + s &gt; ans) return ; for (int i = r[lv - 1] - 1; i &gt;= m - lv + 1; i--) { //枚举r for (int j = h[lv - 1] - 1; j &gt;= m - lv + 1; j--) { //枚举h r[lv] = i; h[lv] = j; dfs(s + 2 * i * j, v + i * i * j, lv + 1); r[lv] = 0; h[lv] = 0; } } } void QAQ(){ scanf(\"%d%d\", &amp;n, &amp;m); r[0] = (int) sqrt(n); h[0] = (int) sqrt(n); dfs(0, 0, 1); ans = (ans == (1 &lt;&lt; 30)) ? 0 : ans; printf(\"%d\\n\", ans); }}using namespace Gekoo;signed main() { QAQ(); return 0;}","link":"/2019/02/28/luogu-p1731/"},{"title":" Luogu P1967 货车运输\t\t","text":"可怕的普及组 Luogu P1967 货车运输题面：题目描述A国有n座城市,编号从1到n,城市之间有m条双向道路.每一条道路对车辆都有重量限制,简称限重.现在有q辆货车在运输货物,司机们想知道每辆车在不超过车辆限重的情况下,最多能运多重的货物. 输入格式：第一行有两个用一个空格隔开的整数n,m,表示A国有n座城市和m条道路。 接下来m行每行3个整数 x,y,z 每两个整数之间用一个空格隔开,表示从x号城市到y号城市有一条限重为z的道路.注意: x$\\\\ne$y,两座城市之间可能有多条道路. 接下来一行有一个整数,表示有q辆货车需要运货. 接下来q行,每行两个整数x,y,之间用一个空格隔开,表示一辆货车需要从x城市运输货物到y城市,注意:x$\\\\ne$y . 输出格式：共有q行,每行一个整数,表示对于每一辆货车,它的最大载重是多少.如果货车不能到达目的地,输出−1. 数据范围：对于30%的数据,0 &lt; n &lt; 1,000, 0 &lt; m &lt; 10,000, 0 &lt; q&lt; 1,000； 对于60%的数据,0 &lt; n &lt; 1,000, 0 &lt; m &lt; 50,000, 0 &lt; q&lt; 1,000； 对于100%的数据,0 &lt; n &lt; 10,000, 0 &lt; m &lt; 50,000, 0 &lt; q&lt; 30,000, 0 ≤ z ≤ 100,000. 思路:这题真难,居然是普及组…(我差点被普及组的题卡了 首先,沟通每个城市之间的道路若想边权最大,必定形成了一棵最大生成树,这个可以通过Kruskal完成.但这题还有一个坑,最后树不一定是一棵,可能是树林. 之后就不用管图了,研究树就行了.沟通两个城市之间的道路可以通过LCA实现,求最大载重就是求这几条边的最大值,通过ST表实现.ST表和LCA的初始化可以放一块进行. 当两个城市不在同一棵树上时,货车无法到达. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include &lt;bits/stdc++.h&gt;using namespace std;#define N 100005namespace Gekoo { inline int read () { int a = 1, b = 0; char c; do{c = getchar(); if (c == '-') a = -1;} while (c &lt; '0' || c &gt; '9'); do{b = b * 10 + c - '0'; c = getchar();} while (c &gt;= '0' &amp;&amp; c &lt;='9'); return a * b; } struct Edge { int from, to, nxt, val; }e[1000005]; struct Tree { int x, y, z; bool operator &lt; (const Tree &amp;x) { return z &gt; x.z; } }t[1000005]; int ecnt, head[N], n, m, fa[N], q, f[N][25], w[N][25], dep[N], tcnt, s; bool vis[N]; void Add_Edge (int f, int to, int v) { e[++ecnt].to = to; e[ecnt].val = v; e[ecnt].nxt = head[f]; head[f] = ecnt; } int Get (int x) { if (x == fa[x]) return x; return fa[x] = Get(fa[x]); } void Tree_data (int u) { vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (!dep[v]) { dep[v] = dep[u] + 1; f[v][0] = u; w[v][0] = e[i].val; Tree_data(v); } } return ; } void init () { for (int j = 1; (1 &lt;&lt; j) &lt;= tcnt; j++) { for (int i = 1; i &lt;=tcnt; i++) { f[i][j] = f[ f[i][j-1] ][j-1]; w[i][j] = min(w[i][j-1], w[ f[i][j-1] ][j-1]); } } } void LCA (int a, int b) { if (Get(a) != Get(b)) { printf(\"-1\\n\"); return ; } int ans = (1 &lt;&lt; 30); if (dep[a] &lt; dep[b]) swap(a, b); int i = 0; for (; (1 &lt;&lt; i) &lt;= dep[a]; i++); for (int j = i; j &gt;= 0; j--) { if (dep[a] - (1 &lt;&lt; j) &gt;= dep[b]){ ans = min(ans, w[a][j]); a = f[a][j]; } } if (a == b) { printf(\"%d\\n\",ans); return ; } for (int j = i; j &gt;= 0; j--) { if (f[a][j] &amp;&amp; f[a][j] != f[b][j]) { ans = min(ans, min(w[a][j], w[b][j])); a = f[a][j], b = f[b][j]; } } ans = min(ans, min(w[a][0], w[b][0])); printf(\"%d\\n\",ans); return ; } void main() { n = read(), m = read(); for (int i = 1; i &lt;=n; i++) { fa[i] = i; } for (int i = 1, x, y, z; i &lt;= m; i++) { x = read(), y = read(), z = read(); t[++tcnt].x = x, t[tcnt].y = y, t[tcnt].z = z; t[++tcnt].x = y, t[tcnt].y = x, t[tcnt].z = z; } //Kruskal sort(t + 1, t + 1 + tcnt); for (int i = 1; i &lt;= tcnt; i++) { int x = t[i].x, y = t[i].y, z = t[i].z; if (Get(x) != Get(y)) { Add_Edge(x, y, z); Add_Edge(y, x, z); fa[Get(x)] = Get(y); } } for (int i = 1; i &lt;= n; i++) { //树林!被坑过一次QAQ if (!vis[i]) { dep[i] = 1; f[1][0] = 1; Tree_data(i); w[i][0] = (1 &lt;&lt; 30); } } init(); q = read(); for (int i = 1; i &lt;= q; i++) { LCA(read(), read()); } }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p1967/"},{"title":"Luogu P1903 [国家集训队]数颜色 / 维护队列","text":"带修莫队板子 Luogu P1903 [国家集训队]数颜色 / 维护队列 思路:区间题显然可以莫队,但这题多了一个修改. 因此就需要用到带修莫队. 带修莫队比起普通莫队多了修改指针的移动,我们记录一下每个询问区间需要进行几次修改,在需要修改时现用现改,如果改多了就往回改.其余与普通莫队一致. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;const int N = 1e6 + 233;int n, m, acnt, ccnt, color[N], block, kind, pos[N], cnt[N], ans[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}struct Ask { int l, r, pre, id; friend bool operator &lt;(Ask a, Ask b) { if (pos[a.l] != pos[b.l]) return a.l &lt; b.l; if (pos[a.r] != pos[b.r]) return a.r &lt; b.r; return a.pre &lt; b.pre; }} ask[N];struct Change { int p, c;} chg[N];inline void Add(int x) {if (++cnt[x] == 1) ++kind;}inline void Del(int x) {if (--cnt[x] == 0) --kind;}inline void CH(int now, int i) { if (chg[now].p &lt;= ask[i].r &amp;&amp; chg[now].p &gt;= ask[i].l) { if (--cnt[color[chg[now].p]] == 0) --kind; if (++cnt[chg[now].c] == 1) ++kind; } std::swap(color[chg[now].p], chg[now].c);}signed main() { //int st = clock() / CLOCKS_PER_SEC; n = R(), m = R(); block = (int) pow(n, 0.66); for (int i = 1; i &lt;= n; ++i) color[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= m; ++i) { char opt[5]; int a, b; scanf(\"%s\", opt); a = R(), b = R(); if (opt[0] == 'Q') ask[++acnt].l = a, ask[acnt].r = b, ask[acnt].pre = ccnt, ask[acnt].id = acnt; else chg[++ccnt].p = a, chg[ccnt].c = b; } std::sort(ask + 1, ask + 1 + acnt); for (int i = 1, l = 1, r = 0, now = 0; i &lt;= acnt; ++i) { while (l &lt; ask[i].l) Del(color[l++]); while (l &gt; ask[i].l) Add(color[--l]); while (r &lt; ask[i].r) Add(color[++r]); while (r &gt; ask[i].r) Del(color[r--]); while (now &lt; ask[i].pre) CH(++now, i); while (now &gt; ask[i].pre) CH(now--, i); ans[ask[i].id] = kind; } for (int i = 1; i &lt;= acnt; ++i) printf(\"%d\\n\", ans[i]); /*int ed = clock() / CLOCKS_PER_SEC; printf(\"\\n%d\\n\", ed - st);*/ return 0;}","link":"/2019/06/15/luogu-p1903/"},{"title":" Luogu P1841 [JSOI2007] 重要的城市\t\t","text":"Floyd变种，水题赛T3 Luogu P1841 [JSOI2007] 重要的城市题面：题目描述参加 JSOI 冬令营的同学最近发现，由于南航校内修路截断了原来通向计算中心的路，导致去的路程比原先增加了近一公里。而食堂门前施工虽然也截断了原来通向计算中心的路，却没有使路程增加，因为可以找到同样长度的路作替代。其实，问题的关键在于，路截断的地方是交通要点。 同样的情况也出现在城市间的交通中。某些城市如果出了问题，可能会引起其他很多城市的交通不便。另一些城市则影响不到别的城市的交通。jsoi冬令营的同学发现这是一个有趣的问题，于是决定研究这个问题。 他们认为这样的城市是重要的：如果一个城市c被破坏后，存在两个不同的城市a和b（a, b均不等于c），a到b的最短距离增长了（或不通），则城市c是重要的。 JSOI冬令营的同学面对着一张教练组交给他们的城市间交通图，他们希望能找出所有重要的城市。现在就请你来解决这个问题。 输入格式：第一行两个整数N,M,N为城市数，M为道路数 接下来M行，每行三个整数，表示两个城市之间的无向边，以及之间的路的长度 输出格式：一行，按递增次序输出若干的数，表示重要的城市。 数据范围：30%的数据：N ≤ 20； 60%的数据：N ≤ 100； 100%的数据：N ≤ 200,M ≤ N × (N − 1) / 2, 0 &lt; c ≤ 10000。c即路的长度。 保证不出现重边和自环 如果没有点的话需要输出一行 “No important cities.” 去掉引号 思路:日常翻译： 若u，v最短路上一点去掉后最短路长度改变，则该点为重要点，输出重要点。 N ≤ 200，无脑Floyd（逃 显然在Floyd过程中若进行了一次松弛,则k为f[i][j]对应的一个关键点.若出现f[i][j]=f[i][k]+f[k][j],说明该关键点无效,删去. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;utility&gt;#include &lt;cstdlib&gt;#include &lt;cctype&gt;#include &lt;queue&gt;#define N 205namespace Gekoo { int f[N][N], n, m, imp[N][N]; bool used[N], flg; signed QAQ() { freopen(\"city.in\", \"r\", stdin); freopen(\"city.out\", \"w\", stdout); memset(f, 0x3f, sizeof(f)); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, c; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c); f[a][b] = f[b][a] = std::min(f[a][b], c); } for (int k = 1; k &lt;= n; k++) { for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (i == k || j == i || j == k) continue; if (f[i][j] &gt; f[i][k] + f[k][j]) { f[i][j] = f[i][k] + f[k][j]; imp[i][j] = k; } else if (f[i][j] == f[i][k] + f[k][j]) { imp[i][j] = 0; } } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (imp[i][j]) { flg = 1; used[imp[i][j]] = 1; } } } if (!flg) { puts(\"No important cities.\"); return 0; } for (int i = 1; i &lt;= n; i++) { if (used[i]) printf(\"%d \", i); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/04/luogu-p1841/"},{"title":"Luogu P2015 二叉苹果树","text":"树形DP蒟蒻.jpg 思路:蒟蒻树形DP没学好,最近从头开始重学(捂脸 树形DP设计状态的重要方法是f[i][j]i表示以i为根子树,j按照所求去设计. 而转移状态主要就是从儿子向爸爸转移. 回到本题,设f[x][i]为以x为根的子树中保留树枝数量为i的最多苹果数. 状态转移方程:$f[x][i] = max(f[x][i - k] + f[y][k])$. dfs时注意一下对根节点的特判. 代码:123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;const int N = 233;struct Edge {int to, nxt, val;} e[N &lt;&lt; 1];int n, q, f[N][N], head[N], ecnt;inline void AddEdge(int f, int to, int val) { e[++ecnt] = {to, head[f], val}, head[f] = ecnt;}void dfs(int x, int fa) { for (int i = head[x], y = e[i].to; i; i = e[i].nxt, y = e[i].to) { if (y == fa) continue; f[y][1] = e[i].val; dfs(y, x); for (int j = q; j &gt;= 1; j--) for (int k = 0; k &lt;= j; k++) if ((j != 1 &amp;&amp; k != j) || x == 1) f[x][j] = std::max(f[x][j], f[x][j - k] + f[y][k]); }}signed main() { scanf(\"%d%d\", &amp;n, &amp;q); for (int i = 1, x, y, z; i &lt; n; i++) { scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z); AddEdge(x, y, z), AddEdge(y, x, z); } dfs(1, 0); return !printf(\"%d\\n\", f[1][q]);}","link":"/2019/07/17/luogu-p2015/"},{"title":" Luogu P2051 [AHOI2009] 中国象棋\t\t","text":"DP Luogu P2051 [AHOI2009] 中国象棋题面：题目描述这次小可可想解决的难题和中国象棋有关，在一个N行M列的棋盘上，让你放若干个炮（可以是0个），使得没有一个炮可以攻击到另一个炮，请问有多少种放置方法。大家肯定很清楚，在中国象棋中炮的行走方式是：一个炮攻击到另一个炮，当且仅当它们在同一行或同一列中，且它们之间恰好 有一个棋子。你也来和小可可一起锻炼一下思维吧！ 输入格式：一行包含两个整数N，M，之间由一个空格隔开。 输出格式：总共的方案数，由于该值可能很大，只需给出方案数模9999973的结果。 数据范围：100%的数据中N和M均不超过100 50%的数据中N和M至少有一个数不超过8 30%的数据中N和M均不超过6 思路:把题面翻译成人话:n*n的棋盘，每行每列最多放两枚棋子,求方案数. 可以用$f[i][j][k]$来描述在前i行j列有1个棋子,k列有2个棋子. 接下来对放棋进行分类讨论. Ⅰ.不放棋.直接继承上一次的方案数.显然可得:$f[i][j][k]+=f[i-1][j][k]$. Ⅱ.放一枚棋.①.放在有一枚棋子的一列.放置棋子后会使j减少1,k增加1,这种方案共有$ j-1$种,因此可以得到: $f[i][j][k]+=f[i-1][j+1][k-1]\\\\times (j+1)$. ②.放在没有棋子的一列.放置棋子后会使j增加1,k不变,这种方案共有$(m-(j-1)-k)$种.因此可以得到: $f[i][j][k] += f[i - 1][j - 1][k] \\\\times (m - j - k + 1)$. Ⅲ.放两枚棋.①.都放在有一枚棋子的两列.放置棋子后会使j减少2,k增加2. 而显然,这种方案数为$C^2_{j+2}$.化简该式,$C^2_{j+2}=\\\\frac{(j+2)!}{2!\\\\times j!}=\\\\frac{j!\\\\times (j+1)\\\\times (j +2)}{2!\\\\times j!}=\\\\frac{(j+1)(j+2)}{2}$. 可得:$ f[i][j][k] += f[i - 1][j + 2][k - 2] \\\\times (j + 2) \\\\times (j + 1) / 2$ ②.都放在没有棋子的两列.放置后会使j增加2,k不变.而这种方案数也是很显然的,为$C^2_{m-(j-2)-k}$. 化简该式:$C^2_{m-(j-2)-k}=\\\\frac{(m-j-k+2)!}{2!\\\\times (m-j-k)!}=\\\\frac{(m-j-k)!\\\\times (m-j-k+1)\\\\times (m-j-k+2)}{2!\\\\times(m-j-k)!}=\\\\frac{(m-j-k+1)\\\\times (m-j-k+2)}{2}$. 可得:$ f[i][j][k] += f[i - 1][j - 2][k] \\\\times (m - j - k + 1) \\\\times (m - j - k + 2) / 2$ ③.分别放在有一枚棋子和没有棋子两列.放置棋子在有棋子列后会使j减少1,k增加1,放置棋子在无棋子列后会使j增加1,k不变.最终其实j没有改变,只是k增加了1. 根据乘法原理,方案数显然,为$[m-j-(k-1)]\\\\times j$种. 可得:$ f[i][j][k] += f[i - 1][j][k - 1] \\\\times (m - j - k + 1) \\\\times j $. 最后统计答案,这道题就结束了. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;#define N 105#define MO 9999973#define ll long longnamespace Gekoo { int n, m; ll f[N][N][N], ans;//f[行][有几列放了1个棋子][有几列放了两个棋子] void QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); f[0][0][0] = 1; for (int i = 1; i &lt;= n; i++) { for (int j = 0; j &lt;= m; j++) { for (int k = 0; k &lt;= m - j; k++) { //下棋时分三种情况. //1.放0个棋子 (f[i][j][k] += f[i - 1][j][k]) %= MO;//直接加上之前的 //2.放1个棋子 if (k &gt;= 1) (f[i][j][k] += f[i - 1][j + 1][k - 1] * (j + 1)) %= MO;//(1)放在有棋子的一列 if (j &gt;= 1) (f[i][j][k] += f[i - 1][j - 1][k] * (m - j - k + 1)) %= MO;//(2)放在没棋子的一列 //3.2个棋子 if (j &gt;= 2) (f[i][j][k] += f[i - 1][j - 2][k] * (m - j - k + 1) * (m - j - k + 2) / 2) %= MO;//(1)0 and 0 if (k &gt;= 1) (f[i][j][k] += f[i - 1][j][k - 1] * (m - j - k + 1) * j) %= MO;//(2)0 and 1 if (k &gt;= 2) (f[i][j][k] += f[i - 1][j + 2][k - 2] * (j + 2) * (j + 1) / 2) %= MO;//(3)1 and 1 } } } for (int j = 0; j &lt;= m; j++) { for (int k = 0; k &lt;= m; k++) { (ans += f[n][j][k]) %= MO; } } printf(\"%lld\\n\", (ans + MO) % MO); }}using namespace Gekoo;signed main() { QAQ(); return 0;}","link":"/2019/02/28/luogu-p2051/"},{"title":" Luogu P2024 [NOI2001]食物链\t\t","text":"并查集 Luogu P2024 [NOI2001]食物链题面：题目描述动物王国中有三类动物 A , B , C , 这三类动物的食物链构成了有趣的环形. A 吃 B , B 吃 C , C 吃 A. 现有 N 个动物,以 1 － N 编号.每个动物都是 A , B , C 中的一种,但是我们并不知道 它到底是哪一种. 有人用两种说法对这 N 个动物所构成的食物链关系进行描述: 第一种说法是“1 X Y”，表示 X 和 Y 是同类. 第二种说法是“2 X Y”，表示 X 吃 Y . 此人对 N 个动物,用上述两种说法,一句接一句地说出 K 句话,这 K 句话有的是真 的,有的是假的.当一句话满足下列三条之一时,这句话就是假话,否则就是真话. 当前的话与前面的某些真的话冲突,就是假话 当前的话中 X 或 Y 比 N 大,就是假话 当前的话表示 X 吃 X,就是假话 你的任务是根据给定的 N 和 K 句话,输出假话的总数. 输入格式：第一行两个整数 , N , K , 表示有 N 个动物, K 句话. 第二行开始每行一句话. 输出格式：一行,一个整数,表示假话的总数. 数据范围：1 ≤ N ≤ 5 ∗ 10^4 1 ≤ K ≤ 10^5 思路:事拓展域并查集.将每个动物分成同类食物和敌人三个域. 设每句话第一个数为a, 矛盾的几种情况: $x &gt; n || y &gt; n$ $a = 1,x_{self} = y_{eat}$ $a = 1, x_{eat} = y_{self}$ $a = 2, x_{self} = y_{self}$ $a = 2, x_{self} = y_{eat}$ $a = 2, x = y$ 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;bits/stdc++.h&gt;using namespace std;namespace Gekoo { const int N = 50005; int n, k, fa[N*3], ans;//1~n事同类,n~2n事食物,2n~3n事敌人. int get(int x) { if (x == fa[x]) return x; return fa[x] = get(fa[x]); } void main() { printf(\"%d%d\", &amp;n, &amp;k); for(int i = 1; i &lt;= n * 3; i++) { fa[i] = i; } for(int i = 1; i &lt;= k; i++) { int a, x, y; scanf(\"%d%d%d\", &amp;a, &amp;x, &amp;y); if (x &gt; n || y &gt; n) { ++ans; continue; } int x_self = x, x_eat = x + n, x_enemy = x + 2 * n; int y_self = y, y_eat = y + n, y_enemy = y + 2 * n; if (a == 1) { if (get(x_self) == get(y_eat) || get(x_eat) == get(y_self)) { ++ans; continue; } else { fa[get(x_self)] = get(y_self); fa[get(x_eat)] = get(y_eat); fa[get(x_enemy)] = get(y_enemy); } } else { if (get(x_self) == get(y_self) || get(x_self) == get(y_eat) || x == y) { ++ans; continue; } else { fa[get(x_self)] = get(y_enemy); fa[get(x_eat)] = get(y_self); fa[get(x_enemy)] = get(y_eat); } } } printf(\"%d\\n\", ans); }}signed main() { Gekoo::main(); return 0;}","link":"/2019/02/28/luogu-p2024/"},{"title":" Luogu P2272 [ZJOI2007]最大半连通子图\t\t","text":"Tarjan总是和DAGDP紧密结合呢 Luogu P2272 [ZJOI2007]最大半连通子图题面：题目描述一个有向图G=(V,E)称为半连通的(Semi-Connected)，如果满足：?u,v∈V，满足u→v或v→u，即对于图中任意两点u，v,存在一条u到v的有向路径或者从v到u的有向路径。若G’=(V’,E’)满足V’?V，E’是E中所有跟V’有关的边，则称G’是G的一个导出子图。若G’是G的导出子图，且G’半连通，则称G’为G的半连通子图。若G’是G所有半连通子图中包含节点数最多的，则称G’是G的最大半连通子图。给定一个有向图G，请求出G的最大半连通子图拥有的节点数K，以及不同的最大半连通子图的数目C。由于C可能比较大，仅要求输出C对X的余数。 输入格式：第一行包含两个整数N，M，X。N，M分别表示图G的点数与边数，X的意义如上文所述接下来M行，每行两个正整数a, b，表示一条有向边(a, b)。图中的每个点将编号为1,2,3…N，保证输入中同一个(a,b)不会出现两次。 输出格式：应包含两行，第一行包含一个整数K。第二行包含整数C Mod X. 数据范围：对于100%的数据，$N \\\\le 100000, M \\\\le 1000000, X \\\\le 10^8$ 思路:简化题意:给定一个有向图，若u，v两点，只要u-v可达或者v-u可达，则称u，v半联通.求半联通子图中点数最多的个数和方案数. 显然又是DAGDP…先跑Tarjan缩点,记录一下每个连通块的大小,再拓扑跑DP. 问题主要在第二问,缩点会有重边,势必会影响方案数统计.所以要去重边. 如何去重? 开一边集数组,先记录所有缩点后的边,再按起始点sort一下.建图时检查一下,如果E[i].from == E[i - 1].from &amp;&amp; E[i].to == E[i - 1].to,说明为重边,直接continue. 其他没什么了. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;bits/stdc++.h&gt;#define M 1000005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; struct EdgeC { int from, to; bool operator &lt;(const EdgeC &amp;a) const { return (from == a.from) ? to &lt; a.to : from &lt; a.from; } }EDGE[N]; int ecnt, ccnt, head[N], hc[N], p, n, m, MO, num, scc, cnt, t, ans = -114514, ans2; int stack[N], dfn[N], low[N], id[N], ind[N], val[N], f[N], g[N]; bool ins[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, ins[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], ins[y] = 0; id[y] = cnt; val[cnt]++; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; for (int i = 1; i &lt;= cnt; i++) if (!ind[i]) q.push(i), f[i] = val[i], g[i] = 1; while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (f[v] &lt; f[u] + val[v]) { f[v] = f[u] + val[v]; g[v] = g[u]; } else if (f[v] == f[u] + val[v]) { g[v] = (g[v] + g[u]) % MO; } if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) if (f[i] &gt; ans) ans = f[i]; for (int i = 1; i &lt;= cnt; i++) if (f[i] == ans) ans2 = (ans2 + g[i]) % MO; } signed QAQ() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;MO); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt;= n; x++) { for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] != id[y]) EDGE[++t].from = id[x], EDGE[t].to = id[y]; } } std::sort(EDGE + 1, EDGE + t + 1); for (int i = 1; i &lt;= t; i++) { if (EDGE[i].from == EDGE[i - 1].from &amp;&amp; EDGE[i].to == EDGE[i - 1].to) continue; AddC(EDGE[i].from, EDGE[i].to), ++ind[EDGE[i].to]; } TopSort(); printf(\"%d\\n%d\\n\", ans, ans2); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p2272/"},{"title":" Luogu P2055 [ZJOI2009]假期的宿舍\t\t","text":"二分图求最大匹配 Luogu P2055 [ZJOI2009]假期的宿舍题面：题目:学校放假了 · · · · · · 有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。 比如 A 和 B 都是学校的学生，A 要回家，而 C 来看B，C 与 A 不认识。我们假设每个人只能睡和自己直接认识的人的床。那么一个解决方案就是 B 睡 A 的床而 C 睡 B 的床。而实际情况可能非常复杂，有的人可能认识好多在校学生，在校学生之间也不一定都互相认识。 我们已知一共有 n 个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。 输入格式：第一行一个数 T 表示数据组数。接下来 T 组数据，每组数据第一行一个数n 表示涉及到的总人数。 接下来一行 n 个数，第 i 个数表示第 i 个人是否是在校学生 (0 表示不是，1 表示是)。再接下来一行 n 个数，第 i 个数表示第 i 个人是否回家 (0 表示不回家，1 表示回家，注意如果第 i 个人不是在校学生，那么这个位置上的数是一个随机的数，你应该在读入以后忽略它)。 接下来 n 行每行 n 个数，第 i 行第 j 个数表示 i 和 j 是否认识 (1 表示认识，0 表示不认识，第 i 行 i 个的值为 0，但是显然自己还是可以睡自己的床)，认识的关系是相互的。 输出格式：对于每组数据，如果存在一个方案则输出 “^_^”(不含引号) 否则输出“T_T”(不含引号)。(注意输出的都是半角字符，即三个符号的 ASCII 码分别为94,84,95) 数据范围：对于 30% 的数据满足 1 ≤ n ≤ 12。 对于 100% 的数据满足 1 ≤ n ≤ 50,1 ≤ T ≤ 20。 思路:很明显,一个学生睡一张床就是二分图匹配. 先读入学生是不是本校学生,在不在家和学生之间的关系. 如果学生是本校学生且不在家,他就可以睡自己的床,连一下自己. 如果i认识j,j是本校生,i就可以睡j的床,连一下i,j.好混乱 然后统计一下有多少人要住宿舍,跑一下匈牙利,看看最大匹配数是不是等于住宿舍人数. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define N 105namespace Gekoo { struct Edge {int to, nxt;} e[N]; int n, T, need, mth; int head[N], ecnt = 1, Home[N], School[N], match[N]; bool vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} bool dfs(int u) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (!vis[v]) { vis[v] = 1; if (!match[v] || dfs(match[v])) { match[v] = u; return 1; } } } return 0; } signed QAQ() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;School[i]); for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;Home[i]); if (!Home[i] &amp;&amp; School[i]) Add(i, i); } for (int i = 1, x; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { scanf(\"%d\", &amp;x); if (x &amp;&amp; School[j]) Add(i, j); } } for (int i = 1; i &lt;= n; i++) { if ((!Home[i] &amp;&amp; School[i]) || !School[i]) { need++; memset(vis, 0, sizeof(vis)); if (dfs(i)) mth++; } } if (mth == need) printf(\"^_^\\n\"); else printf(\"T_T\\n\"); memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); memset(School, 0, sizeof(School)); memset(Home, 0, sizeof(Home)); memset(match, 0, sizeof(match)); need = mth = ecnt = 0; } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/14/luogu-p2055/"},{"title":"Luogu P2709 小B的询问","text":"莫队模板题 Luogu P2709 小B的询问题面：题目描述小B有一个序列，包含N个1~K之间的整数。他一共有M个询问，每个询问给定一个区间[L..R]，求$Sigma(c(i)^2)$的值,其中i的值从1到K，其中c(i)表示数字i在[L..R]中的重复次数。小B请你帮助他回答询问。 输入格式：第一行，三个整数N、M、K。 第二行，N个整数，表示小B的序列。 接下来的M行，每行两个整数L、R。 输出格式：M行，每行一个整数，其中第i行的整数表示第i个询问的答案。 数据范围：对于全部的数据，1&lt;=N、M、K&lt;=50000 思路:询问一个区间每个数字重复次数的平方和,首先大分块肯定可做,但比较麻烦… 这时我们就可以学习一种你没有学过的船新算法:莫队算法 主要思想就是将询问保存并排序,通过移动左右端点维护询问.当我们解决了一个询问后,我们就移动它的左右端点使它成为下一个询问,在移动的过程中维护答案. 合理的排序可以让我们的复杂度更加优秀.移动的越少,跑得就越像HK记者. 为了控制移动的距离,我们使用分块优化.如果左端点属于同一块就按右端点排序,否则按左端点排序.最终的莫队算法复杂度是$O(n\\sqrt n)$. 关于维护,由完全平方公式可得,只需要加减$2 \\times c(i) + 1$. 总的来说,莫队可以解决许多区间维护问题而且比分块更好写. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;#define ll long long#define N 50000 + 233struct Node {int l, r, id;} nd[N];int n, m, k, block, a[N], pos[N];ll tmp, cnt[N], ans[N];bool cmp(const Node &amp;a, const Node &amp;b) { return (pos[a.l] == pos[b.l]) ? a.r &lt; b.r : a.l &lt; b.l;}signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", a + i); for (int i = 1; i &lt;= m; i++) { scanf(\"%d%d\", &amp;nd[i].l, &amp;nd[i].r); nd[i].id = i; } block = (int) sqrt(n); for (int i = 1; i &lt;= n; i++) pos[i] = (i - 1) / block + 1; std::sort(nd + 1, nd + 1 + m, cmp); for (int i = 1, l = 1, r = 0; i &lt;= m; i++) { while (l &gt; nd[i].l) { l--; tmp += 2 * cnt[a[l]] + 1; cnt[a[l]]++; } while (r &lt; nd[i].r) { r++; tmp += 2 * cnt[a[r]] + 1; cnt[a[r]]++; } while (l &lt; nd[i].l) { tmp -= 2 * cnt[a[l]] - 1; cnt[a[l]]--; l++; } while (r &gt; nd[i].r) { tmp -= 2 * cnt[a[r]] - 1; cnt[a[r]]--; r--; } ans[nd[i].id] = tmp; } for (int i = 1; i &lt;= m; i++) printf(\"%lld\\n\", ans[i]); return 0;}","link":"/2019/05/08/luogu-p2709/"},{"title":"Luogu P2590 [ZJOI2008]树的统计","text":"挺难搞的数位DP,顺便总结一下 Luogu P4124 [CQOI2016]手机号码 思路:数位DP有递推和记搜两种写法,记搜好想好写. 套路还是比较明显,拆数dfs. 根据需要设计状态, dfs(int pos, int pre, bool lim, ......) 本题需要记录的状态就相当多..所以就记下来,都可以记. 吐槽一下,说好的一定是11位数,怎么数据还有不合法的???O_o 代码:123456789101112131415161718192021222324252627282930313233343536#include &lt;bits/stdc++.h&gt;#define ll long longll L, R, dp[12][12][12][2][2][2];int dig[233], cnt;ll dfs(int pos, int pre1, int pre2, bool lim, bool eight, bool four, bool ok) { if (eight &amp;&amp; four) return 0; if (!pos) return ok; if (!lim &amp;&amp; dp[pos][pre1][pre2][eight][four][ok] != -1) return dp[pos][pre1][pre2][eight][four][ok]; int upper = lim ? dig[pos] : 9; ll ans = 0; for (int i = 0; i &lt;= upper; i++) ans += dfs(pos - 1, i, pre1, lim &amp;&amp; (i == upper), eight || (i == 8), four || (i == 4), ok || (i == pre1 &amp;&amp; i == pre2)); if (!lim) dp[pos][pre1][pre2][eight][four][ok] = ans; return ans;}ll Solve(ll x) { cnt = 0; ll ret = 0; memset(dig, 0, sizeof(dig)); memset(dp, -1, sizeof(dp)); while (x) dig[++cnt] = x % 10, x /= 10; if (cnt != 11) return 0; for (int i = 1; i &lt;= dig[cnt]; i++) ret += dfs(cnt - 1, i, 0, i == dig[cnt], i == 8, i == 4, 0); return ret;}signed main() { scanf(\"%lld%lld\", &amp;L, &amp;R); printf(\"%lld\", Solve(R) - Solve(L - 1)); return 0;}","link":"/2019/06/15/luogu-p2590/"},{"title":"Luogu P2746 [USACO5.3]校园网Network of Schools\t\t","text":"缩点ning干 P2746 [USACO5.3]校园网Network of Schools题面：题目:一些学校连入一个电脑网络。那些学校已订立了协议：每个学校都会给其它的一些学校分发软件（称作“接受学校”）。注意即使 B 在 A 学校的分发列表中， A 也不一定在 B 学校的列表中。 你要写一个程序计算，根据协议，为了让网络中所有的学校都用上新软件，必须接受新软件副本的最少学校数目（子任务 A）。更进一步，我们想要确定通过给任意一个学校发送新软件，这个软件就会分发到网络中的所有学校。为了完成这个任务，我们可能必须扩展接收学校列表，使其加入新成员。计算最少需要增加几个扩展，使得不论我们给哪个学校发送新软件，它都会到达其余所有的学校（子任务 B）。一个扩展就是在一个学校的接收学校列表中引入一个新成员。 输入格式：输入文件的第一行包括一个整数 N：网络中的学校数目（2 &lt;= N &lt;= 100）。学校用前 N 个正整数标识。 接下来 N 行中每行都表示一个接收学校列表（分发列表）。第 i+1 行包括学校 i 的接收学校的标识符。每个列表用 0 结束。空列表只用一个 0 表示。 输出格式：你的程序应该在输出文件中输出两行。 第一行应该包括一个正整数：子任务 A 的解。 第二行应该包括子任务 B 的解。 数据范围：n &lt;= 100 思路:缩点ning干(逃 先缩点,记录一下入度和出度.显然,问题A的答案就是入度为0的点的个数. 问题B的答案也比较显然,是入度为0和出度为0的点的个数的较大值. 注意特判,当缩成只有一个点的时候问题B答案为0. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;bits/stdc++.h&gt;#define N 5000005namespace Gekoo { struct Edge {int to, nxt;} e[N], c[N]; int ecnt, ccnt, hc[N], head[N], ind[N], outd[N], n, Aans, Bans; int dfn[N], low[N], s[N], id[N], num, p, cnt; bool vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; s[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = s[p--], vis[y] = 0; id[y] = cnt; } while (x != y); } } signed QAQ() { //Input scanf(\"%d\", &amp;n); for (int u = 1, v; u &lt;= n; u++) { while (1) { scanf(\"%d\", &amp;v); if (!v) break; Add(u, v); } } //Shrink for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to; if (id[u] == id[v]) continue; AddC(id[u], id[v]); ind[id[v]]++, outd[id[u]]++; } } //Task A for (int i = 1; i &lt;= cnt; i++) if (!ind[i]) Aans++; //Task B for (int i = 1; i &lt;= cnt; i++) if (!outd[i]) Bans++; Bans = std::max(Bans, Aans); if (cnt == 1) Bans = 0; //Output printf(\"%d\\n%d\\n\", Aans, Bans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/07/luogu-p2746/"},{"title":" Luogu P2860 [USACO06JAN]冗余路径Redundant Paths\t\t","text":"Tarjan水题 Luogu P2860 [USACO06JAN]冗余路径Redundant Paths题面：题目:为了从F(1≤F≤5000)个草场中的一个走到另一个，贝茜和她的同伴们有时不得不路过一些她们讨厌的可怕的树．奶牛们已经厌倦了被迫走某一条路，所以她们想建一些新路，使每一对草场之间都会至少有两条相互分离的路径，这样她们就有多一些选择． 每对草场之间已经有至少一条路径．给出所有R(F-1≤R≤10000)条双向路的描述，每条路连接了两个不同的草场，请计算最少的新建道路的数量, 路径由若干道路首尾相连而成．两条路径相互分离，是指两条路径没有一条重合的道路．但是，两条分离的路径上可以有一些相同的草场． 对于同一对草场之间，可能已经有两条不同的道路，你也可以在它们之间再建一条道路，作为另一条不同的道路． 输入格式：第一行两个整数 f, r. 接下来r行每行两个整数u，v表示u到v有边. 输出格式：输出一个数tot,为修建道路数. 思路:显然,一个边双内必然有两条不同的道路.(可以从两边绕嘛) 于是就先缩点ning干.我们就要添加最少边使整个图变成边双. 我们可以发现把叶子节点连起来就行.所以连边数为叶子节点数/2向上取整. 另:此题有重边.因为数据范围小,我直接开了个bool数组((( 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int n, m; int head[N], ecnt = 1, hc[N], ccnt = 1, deg[N], ans; bool vis[5002][5002]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} int dfn[N], low[N], stack[N], id[N], p, num, dcc; void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (y == fa) continue; if (!dfn[y]) { Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++dcc; int y; do { y = stack[p--]; id[y] = dcc; } while(x != y); } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); if (vis[x][y]) continue; vis[x][y] = vis[y][x] = 1; Add(x, y), Add(y, x); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i, 0); for (int i = 2; i &lt;= ecnt; i += 2) { int x = e[i ^ 1].to, y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); deg[id[x]]++, deg[id[y]]++; } for (int i = 1; i &lt;= dcc; i++) if (deg[i] == 1) ans++; printf(\"%d\\n\", (ans + 1) &gt;&gt; 1); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/13/luogu-p2860/"},{"title":" Luogu P2783 有机化学之神偶尔会做作弊\t\t","text":"郭老师强力推荐 Luogu P2783 有机化学之神偶尔会做作弊题面：题目:XS中学化学竞赛组教练是一个酷爱炉石的人。 有一天他一边搓炉石一边监考，而你作为一个信息竞赛的大神也来凑热闹。 然而你的化竞基友却向你求助了。 “第1354题怎么做”&lt;—手语 他问道。 你翻到那一题：给定一个烃，只含有单键（给初中生的一个理解性解释：就是一堆碳用横线连起来，横线都是单条的）。 然后炎魔之王拉格纳罗斯用他的火焰净化了一切环（？？？）。所有的环状碳都变成了一个碳。如图所示。 然后指定多组碳，求出它们之间总共有多少碳。如图所示（和上图没有关系）。 但是因为在考试，所以你只能把这个答案用手语告诉你的基友。你决定用二进制来表示最后的答案。 输入格式：第一行两个整数n,m.表示有n个点，m根键 接下来m行每行两个整数u，v表示u号碳和v号碳有一根键 接下来一个整数tot表示询问次数 接下来tot行每行两个整数，a,b表示询问的两个碳的编号 输出格式：共tot行 每行一个二进制数 数据范围：1&lt;n&lt;=10000,1&lt;m&lt;=50000 （两个碳不成环） 思路:题意翻译:给一无向图,去掉所有的环,求两点树上距离. 去掉环很简单,跑一遍Tarjan缩掉边双即可. 很简单? 不!QAQ 踩了个巨坑:我第一次是用LYD的写法缩边双的,然后: 就WA了 _就WA了_ 就WA了 第一版写法: 12345678910111213141516171819202122void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y, i); low[x] = std::min(low[x], low[y]); if (low[y] &gt; dfn[x]) bridge[i] = bridge[i ^ 1] = 1; } else if (i != (fa ^ 1)) low[x] = std::min(low[x], dfn[y]); }}void dfs(int x) { id[x] = cnt; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[y] || bridge[i]) continue; dfs(y); }} 更改为郭老师写法就畅快AC: 12345678910111213141516171819void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { if(y == fa) continue; Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++cnt; int y; do { y = stack[p--]; id[y] = cnt; } while (x != y); }} 原因未知….引以为戒QAQ 求树上距离是很简单的.如下图的树: 比如说我们要求12和13之间的距离,可以先跑一次树链剖分,求出12和13的深度. 显然,12与13之间的距离就等于dep[12] + dep[13] - 2 * dep[3] + 1. 任意两点x, y在树上的距离就是:dep[x] + dep[y] - 2 * dep[LCA] + 1. 二进制随便写个函数输出一下就行了 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;bits/stdc++.h&gt;#define N 50005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int n, m, s; int ecnt = 1, head[N], ccnt = 1, hc[N], cnt, ask; int dep[N], fa[N], siz[N], son[N], tp[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} int dfn[N], low[N], stack[N], id[N], root, p, num; bool bridge[N &lt;&lt; 1]; void Tarjan(int x, int fa) { dfn[x] = low[x] = ++num; stack[++p] = x; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if(y == fa) continue; if (!dfn[y]) { Tarjan(y, x); low[x] = std::min(low[x], low[y]); } else low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { ++cnt; int y; do { y = stack[p--]; id[y] = cnt; } while (x != y); } } void dfs1(int u) { siz[u] = 1; for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (dep[v]) continue; dep[v] = dep[u] + 1, fa[v] = u; dfs1(v); siz[u] += siz[v]; if (!son[u] || siz[son[u]] &lt; siz[v]) son[u] = v; } } void dfs2(int u, int t) { tp[u] = t; if (!son[u]) return; dfs2(son[u], t); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (v == fa[u]) continue; if (v != son[u]) dfs2(v, v); } } void Write(int x) { int a[1005] = {}, pt = 0; do { a[++pt] = (x &amp; 1); x &gt;&gt;= 1; }while (x != 0); for (int i = pt; i &gt;= 1; i--) printf(\"%d\", a[i]); puts(\"\"); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); Add(x, y), Add(y, x); } scanf(\"%d\", &amp;ask); for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i, 0); for (int i = 2; i &lt;= ecnt; i++) { int x = e[i ^ 1].to, y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); } dep[1] = 1; dfs1(1), dfs2(1, 1); for (int i = 1, a, b; i &lt;= ask; i++) { scanf(\"%d%d\", &amp;a, &amp;b); a = id[a], b = id[b]; int ans = 0; ans += dep[a] + dep[b]; while (tp[a] != tp[b]) { if (dep[tp[a]] &lt; dep[tp[b]]) b = fa[tp[b]]; else a = fa[tp[a]]; } ans -= 2 * std::min(dep[a], dep[b]) - 1; Write(ans); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/12/luogu-p2783/"},{"title":" Luogu P3166 [CQOI2014]数三角形\t\t","text":"喜闻乐见的数学题 Luogu P3166 [CQOI2014]数三角形题面：题目描述给定一个$n \\\\times m$的网格，请计算三点都在格点上的三角形共有多少个。注意三角形的三点不能共线。 输入格式：输入一行，包含两个空格分隔的正整数m和n。 输出格式：输出一个正整数，为所求三角形数量。 数据范围：1&lt;=m,n&lt;=1000 思路:$n\\\\times m$的网格中共有$(n+1)(m+1)$个点,其中选3个点的方法数共有$C_{(n + 1)(m + 1)}^3$种.为构成三角形,须除去三点共线的情况.横向和纵向共线数很显然,为$mC_{n+1}^3+nC_{m+1}^3$种.而斜向就比较复杂. 首先,斜向共有两个方向,我们只研究一个就行,将结果×2. 然后仔细思考可以发现每条落在格点上的直线必然是由最短的一条线段延伸,设这条线段的端点为(0,0),(x,y),xy必然互素.而之后直线在格点上的点的横纵坐标必然为(kx,ky).稍加整理后显然可得斜向共线情况数为: $\\\\sum_{i=1}^m\\\\sum_{j=1}^n(gcd(i,j)-1)\\\\times(m-i+1)\\\\times(n-j+1)\\\\times 2$. 最终,$ans=C_{(n + 1)(m + 1)}^3-mC_{n+1}^3-nC_{m+1}^3-\\\\sum_{i=1}^m\\\\sum_{j=1}^n(gcd(i,j)-1)\\\\times(m-i+1)\\\\times(n-j+1)\\\\times 2$ 代码:12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;#define ll long longnamespace Gekoo { int m, n; ll ans; ll C(int n, int m) { ll ret = 1; for (int i = 1; i &lt;= m; i++) ret = ret * (ll) (n - m + i) / i; return ret; } inline int GCD(int a, int b) {return b == 0 ? a : GCD(b, a % b);} void QAQ() { scanf(\"%d%d\", &amp;m, &amp;n); ans = C((m + 1) * (n + 1), 3) - (n + 1) * C((m + 1), 3) - (m + 1) * C((n + 1), 3); for (int i = 1; i &lt;= m; i++) { for (int j = 1; j &lt;= n; j++) { ans -= (ll) (GCD(i, j) - 1) * (m - i + 1) * (n - j + 1) * 2; } } printf(\"%lld\\n\", ans); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p3166/"},{"title":" Luogu P2880 Balanced Lineup\t\t","text":"ST表 Luogu P2880 Balanced Lineup题面：题目描述每天,农夫 John 的N(1 &lt;= N &lt;= 50,000)头牛总是按同一序列排队. 有一天, John 决定让一些牛们玩一场飞盘比赛. 他准备找一群在对列中为置连续的牛来进行比赛. 但是为了避免水平悬殊,牛的身高不应该相差太大. John 准备了Q (1 &lt;= Q &lt;= 180,000) 个可能的牛的选择和所有牛的身高 (1 &lt;= 身高 &lt;= 1,000,000). 他想知道每一组里面最高和最低的牛的身高差别. 输入格式：第1行：N,Q 第2到N+1行：每头牛的身高 第N+2到N+Q+1行：两个整数A和B，表示从A到B的所有牛。（1&lt;=A&lt;=B&lt;=N） 输出格式：输出每行一个数，为最大数与最小数的差 思路:开两个数组f和g，分别存最大值和最小值就行了 蓝题++这怎么是蓝题的 代码:123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;using namespace std;#define N 50005#define r(x) x=read();inline int read(){ int a=1,b=0;char c; do{c=getchar();if(c=='-') a=-1;}while(c&lt;'0'||c&gt;'9'); do{b=b*10+c-'0';c=getchar();}while(c&gt;='0'&amp;&amp;c&lt;='9'); return a*b;}int n,q,a[N],f[N][25],g[N][25];void ST_pre(){ for(int i=1;i&lt;=n;i++) f[i][0]=g[i][0]=a[i]; int t=log2(n)+1; for(int j=1;j&lt;t;j++){ for(int i=1;i&lt;=n-(1&lt;&lt;j)+1;i++){ f[i][j]=max(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]); g[i][j]=min(g[i][j-1],g[i+(1&lt;&lt;(j-1))][j-1]); } }}int ST_q(int l,int r){ int t=log2(r-l+1); return max(f[l][t],f[r-(1&lt;&lt;t)+1][t])-min(g[l][t],g[r-(1&lt;&lt;t)+1][t]);}int main(){ r(n);r(q); for(int i=1;i&lt;=n;i++){ r(a[i]); } ST_pre(); for(int i=1,a,b;i&lt;=q;i++){ r(a);r(b); printf(\"%d\\n\",ST_q(a,b)); } return 0;}","link":"/2019/02/28/luogu-p2880/"},{"title":"Luogu P2886 [USACO07NOV] Cow Relays","text":"矩阵乘法 f[k][i][j]表示从i到j走k步的最短路，显然得到一个转移方程：$f[k][i][j] = min(f[k - 1][i][t] + a[t][i])$. 这就是一个矩阵乘法的形式，本质上就是邻接矩阵的k次幂，只不过乘法过程中的相加变成了取min。 代码： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;int n, t, s, e, d[10005], cnt;struct Matrix { int a[105][105]; Matrix() { memset(a, 0x3f, sizeof(a)); } friend Matrix operator *(Matrix a, Matrix b) { Matrix c; for (int k = 1; k &lt;= cnt; k++) for (int i = 1; i &lt;= cnt; i++) for (int j = 1; j &lt;= cnt; j++) c.a[i][j] = std::min(a.a[i][k] + b.a[k][j], c.a[i][j]); return c; }}x;Matrix qpow(Matrix m, int b) { Matrix t = m; for (; b; b &gt;&gt;= 1, m = m * m) if (b &amp; 1) t = t * m; return t;}signed main() { scanf(\"%d%d%d%d\", &amp;n, &amp;t, &amp;s, &amp;e); for (int i = 1; i &lt;= t; i++) { int u, v, l; scanf(\"%d%d%d\", &amp;l, &amp;u, &amp;v); if (!d[u]) d[u] = ++cnt; if (!d[v]) d[v] = ++cnt; u = d[u], v = d[v]; x.a[u][v] = x.a[v][u] = std::min(x.a[u][v], l); } s = d[s], e = d[e]; Matrix ans = qpow(x, n - 1); printf(\"%d\\n\", ans.a[s][e]); return 0;}","link":"/2019/07/17/luogu-p2886/"},{"title":" Luogu P3225 [HNOI2012]矿场搭建\t\t","text":"调了好久QAQ Luogu P3225 [HNOI2012]矿场搭建题面：题目描述煤矿工地可以看成是由隧道连接挖煤点组成的无向图。为安全起见，希望在工地发生事故时所有挖煤点的工人都能有一条出路逃到救援出口处。于是矿主决定在某些挖煤点设立救援出口，使得无论哪一个挖煤点坍塌之后，其他挖煤点的工人都有一条道路通向救援出口。 请写一个程序，用来计算至少需要设置几个救援出口，以及不同最少救援出口的设置方案总数。 输入格式：输入文件有若干组数据，每组数据的第一行是一个正整数 N（N&lt;=500），表示工地的隧道数，接下来的 N 行每行是用空格隔开的两个整数 S 和 T，表示挖 S 与挖煤点 T 由隧道直接连接。输入数据以 0 结尾。 输出格式：输入文件中有多少组数据，输出文件 output.txt 中就有多少行。每行对应一组输入数据的 结果。其中第 i 行以 Case i: 开始（注意大小写，Case 与 i 之间有空格，i 与:之间无空格，: 之后有空格），其后是用空格隔开的两个正整数，第一个正整数表示对于第 i 组输入数据至少需 要设置几个救援出口，第二个正整数表示对于第 i 组输入数据不同最少救援出口的设置方案总 数。输入数据保证答案小于 2^64。输出格式参照以下输入输出样例。 思路:v-DCC删去一点后其内部必然仍互相连通,在一个v-DCC中最多只需要建一个出口.所以可以先缩点,缩成一棵树,记录每个节点的大小. 以这个比母亲还要见得多的图(雾 为例,缩点后就变成了: 仔细观察,非叶节点不用建出口,出事了往叶子节点跑就完事了.叶子节点必须建出口,不然割点炸了就完了. 所以需要建的出口个数就是叶子节点的个数,而出口方案数,通过乘法原理,将叶子节点的大小乘起来即即可. 然而如果缩完点后就剩一个点了就不用这么多事了.显然只需要建两个点(如果一个被炸了另一个还能跑),方案数为$C_{size}^2$. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include &lt;bits/stdc++.h&gt;#define N 300005#define ll long longnamespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, m, num, cnt, cas, root, n, ans1; int stack[N], dfn[N], low[N], id[N], new_id[N], size[N]; bool cut[N], vis[N]; ll ans2 = 1; std::vector&lt;int&gt; dcc[N], leaf; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x; if (x == root &amp;&amp; !head[x]) { dcc[++cnt].push_back(x); return ; } int flg = 0; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); if (low[y] &gt;= dfn[x]) { if (++flg &gt; 1 || x != root) cut[x] = 1; int z; cnt++; do { z = stack[p--]; dcc[cnt].push_back(z); size[cnt]++; } while (y != z); dcc[cnt].push_back(x); } } else low[x] = std::min(low[x], dfn[y]); } } void DFS(int u) { int flg = 0; for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; if (!vis[v]) { vis[v] = 1; flg++; DFS(v); } } if (!flg) leaf.push_back(u); } void init() { memset(e, 0, sizeof(e)); memset(c, 0, sizeof(c)); memset(head, 0, sizeof(head)); memset(hc, 0, sizeof(hc)); memset(stack, 0, sizeof(stack)); memset(dfn, 0, sizeof(dfn)); memset(low, 0, sizeof(low)); memset(id, 0, sizeof(id)); memset(new_id, 0, sizeof(new_id)); memset(size, 0, sizeof(size)); memset(cut, 0, sizeof(cut)); memset(vis, 0, sizeof(vis)); for (int i = 1; i &lt;= cnt; i++) dcc[i].clear(); leaf.clear(); ecnt = ccnt = p = n = num = cnt = root = 0; ans2 = 1; } signed QAQ() { while (1) { cas++; scanf(\"%d\", &amp;m); if (!m) return 0; for (int i = 1, s, t; i &lt;= m; i++) { scanf(\"%d%d\", &amp;s, &amp;t); Add(s, t), Add(t, s); n = std::max(n, std::max(s, t)); } for (int i = 1; i &lt;= n; i++) { if (!dfn[i]) root = i, Tarjan(i); } int t = cnt; for (int i = 1; i &lt;= n; i++) if (cut[i]) new_id[i] = ++t; for (int i = 1; i &lt;= cnt; i++) { for (std::vector&lt;int&gt;::iterator it = dcc[i].begin(); it != dcc[i].end(); ++it) { if (cut[*it]) AddC(i, new_id[*it]), AddC(new_id[*it], i); else id[*it] = i; } } DFS(1); if ((int) leaf.size() == 1) { int s = size[leaf[0]] + 1; ans2 = s * (s - 1) / 2; ans1 = 2; } else { ans1 = leaf.size(); for (std::vector&lt;int&gt;::iterator it = leaf.begin(); it != leaf.end(); ++it) { ans2 *= size[*it]; } } printf(\"Case %d: %d %lld\\n\", cas, ans1, ans2); init(); } }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/09/luogu-p3225/"},{"title":" Luogu P3275 [SCOI2011]糖果\t\t","text":"差分约束 Luogu P3275 [SOI2011]糖果题面：题目描述幼儿园里有 N 个小朋友，lxhgww 老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不希望小红分到的糖果比他的多，于是在分配糖果的时候，lxhgww 需要满足小朋友们的 K 个要求。幼儿园的糖果总是有限的，lxhgww 想知道他至少需要准备多少个糖果，才能使得每个小朋友都能够分到糖果，并且满足小朋友们所有的要求。 输入格式：输入的第一行是两个整数 N，K。接下来 K 行，表示这些点需要满足的关系，每行 3 个数字，X，A，B。 如果 X=1， 表示第 A 个小朋友分到的糖果必须和第 B 个小朋友分到的糖果一样多； 如果 X=2， 表示第 A 个小朋友分到的糖果必须少于第 B 个小朋友分到的糖果； 如果 X=3， 表示第 A 个小朋友分到的糖果必须不少于第 B 个小朋友分到的糖果； 如果 X=4， 表示第 A 个小朋友分到的糖果必须多于第 B 个小朋友分到的糖果； 如果 X=5， 表示第 A 个小朋友分到的糖果必须不多于第 B 个小朋友分到的糖果； 输出格式：输出一行，表示 lxhgww 老师至少需要准备的糖果数，如果不能满足小朋友们的所有要求，就输出 -1。 数据范围：对于 30% 的数据，保证 N≤100 对于 100% 的数据，保证 N≤100000 对于所有的数据，保证 K≤100000,1≤X≤5,1≤A,B≤N 思路:事一道差分约束。 差分约束就是把形如$a - b \\le x$的不等式组通过三角形不等式，用SPFA等算法解决问题。 分类讨论： x = 1: $a = b$.等价于 $a - b \\le 0 \\&amp;\\&amp; b - a \\le 0$. 建边(a, b, 0),(b, a, 0). x = 2: $a &lt; b$.由于差分约束的要求，转化为$a - b \\le 1$. 建边(a, b, 1). x = 3: $b \\le a$.转化为 $b - a \\le 0$. 建边(b, a, 0). * x = 4: $a &gt; b$.由于差分约束的要求，转化为$b - a \\le 1$.建边(b, a, 1). x = 5: $a \\le b$.转化为$a - b \\le 0$.建边(a, b, 0). 注意几个点： 读入时特判一下自相矛盾的情况. 数据歹毒,从0建边时反着建可有效防止T飞 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt, val;} e[N]; int ecnt, head[N], n, k, dis[N]; long long ans; bool vis[N]; inline void Add(int f, int to, int val) {e[++ecnt].to = to, e[ecnt].val = val, e[ecnt].nxt = head[f], head[f] = ecnt;} bool SPFA(int u) { vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (dis[v] &lt; dis[u] + val) { dis[v] = dis[u] + val; if (vis[v] || !SPFA(v)) return 0; } } vis[u] = 0; return 1; } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;k); for (int i = 1; i &lt;= k; i++) { int x, a, b; scanf(\"%d%d%d\", &amp;x, &amp;a, &amp;b); switch (x) { case 1: Add(a, b, 0); Add(b, a, 0); break; case 2: if (a == b) return !puts(\"-1\"); else Add(a, b, 1); break; case 3: Add(b, a, 0); break; case 4: if (a == b) return !puts(\"-1\"); else Add(b, a, 1); break; default : Add(a, b, 0); break; } } for (int i = n; i &gt;= 1; i--) Add(0, i, 1); dis[0] = 0; if (SPFA(0)) { for (int i = 1; i &lt;= n; i++) ans += dis[i]; return !printf(\"%lld\\n\", ans); } else return !puts(\"-1\"); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/05/luogu-p3275/"},{"title":"luogu-p3258","text":"","link":"/2019/06/15/luogu-p3258/"},{"title":" Luogu P3387 【模板】缩点\t\t","text":"为什么缩点模板还有DAGDP(半恼 Luogu P3387 【模板】缩点题面：题目:给定一个n个点m条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。 允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。 输入格式：第一行，n,m 第二行，n个整数，依次代表点权 第三至m+2行，每行两个整数u,v，表示u-&gt;v有一条有向边 输出格式：共一行，最大的点权之和。 数据范围：n&lt;=10^4,m&lt;=10^5,点权&lt;=1000 思路:首先先求出scc,之后缩点 (缩点板子要缩点不是显然 缩点后可以得到一个DAG,求最大点权的转移方程显然:f[v] = max(f[v], f[u] + val[v]). 但是有后效性.为了解决后效性,进行一次拓扑排序,在拓扑排序过程中DP. 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, n, m, num, scc, cnt, ans = -114514; int stack[N], dfn[N], low[N], id[N], ind[N], pv[N], val[N], f[N]; bool bridge[N], vis[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], vis[y] = 0; id[y] = cnt; val[cnt] += pv[y]; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; for (int i = 1; i &lt;= cnt; i++) if(!ind[i]) f[i] = val[i], q.push(i); while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; f[v] = std::max(f[v], f[u] + val[v]); if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) ans = std::max(ans, f[i]); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;pv[i]); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt;= n; x++) { for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); ind[id[y]]++; } } TopSort(); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/07/luogu-p3387/"},{"title":"luogu-p3403","text":"","link":"/2019/06/15/luogu-p3403/"},{"title":" Luogu P3469 [POI2008]BLO-Blockade\t\t","text":"poi~~~ Luogu P3469 [POI2008]BLO-Blockade题面：题目LYD翻译版:Byteotia 城市有 n 个城镇, m 条双向道路, 其中 $ n \\\\le 10 ^ 5, m \\\\le 5 * 10 ^ 5$.每条道路连接两个不同的城镇,没有重复的道路,所有城镇联通.把城镇看作节点,把道路看作边.容易发现,整个城市构成一张无向图. 你需要输出 n 个整数,其中第 i 个整数表示把与节点 i 关联的所有边去掉之后(不去掉节点 i 本身),无向图中有多少有序点对 (x, y), 满足 x 和 y 不联通. 输入格式：第一行读入n，m，分别是城镇数目和道路数目 城镇编号1~n 接下来m行每行两个数字a,b，表示a和b之间有一条无向边 输出格式：输出n行，每行一个数字，为第i个城镇被锁时不能发生的访问的数量。 数据范围：$ 1\\\\le n\\\\le 100,000, 1\\\\le m\\\\le 500,000 $. 思路:首先,如果 i 是割点,去掉 i 后其余城市仍然联通, ans[i] = 2 * (i - 1).(点对是有序的) 若 i 不是割点,显然,原图会裂成多个联通块. 1.i自己就是一个联通块 2.i的子树上的联通块 3.不在i子树的联通块 分开求和即可. 但分别去求复杂度过高,无法承受.可以在Tarjan过程中求出每个子树的大小,计算时直接使用. 注释里还有丶东西 代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;bits/stdc++.h&gt;#define N 500005#define ll long longnamespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1]; int ecnt, head[N], n, m, num, cnt; int dfn[N], low[N], size[N]; ll ans[N]; bool cut[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num, size[x] = 1; int flg = 0, vis = 0; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); size[x] += size[y]; //计算子树大小 if (low[y] &gt;= dfn[x]) { ans[x] += (ll) size[y] * (n - size[y]); vis += size[y]; if (++flg &gt; 1 || x != 1) cut[x] = 1; } } else low[x] = std::min(low[x], dfn[y]); } if (!cut[x]) ans[x] = 2 * (n - 1);//是割点QwQ else ans[x] += (ll) (n - vis - 1) * (vis + 1) + n - 1; //不在子树上的联通块和自身的联通块 } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b), Add(b, a); } Tarjan(1); for (int i =1; i &lt;= n; i++) { printf(\"%lld\\n\", ans[i]); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/06/luogu-p3469/"},{"title":"Luogu P3674 小清新人渣的本愿","text":"毒瘤lxl QAQ Luogu P3674 小清新人渣的本愿 思路:lxl的题必定分块(不 区间题,看数据范围就可以知道可以莫队. 先看第一个操作:假设区间[l, r]有a, b满足a - b = x.那么a = b + x.这该怎么维护?可以开一个bitset存数列中出现的数,右移x位与一下,如果最后bitset不为空则说明可以满足. 第二个操作与第一个处理方法类似.假设区间[l, r]有a, b满足a + b = x, a = x + (-b).再开一个bitset反向存出现的数,这样就可以起到-b的效果.右移N - x位与第一个bitset与一下. 第三个操作略暴力,直接枚举因数,反正数据范围不大. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define N 100000 + 233int n, m, block;int a[N], pos[N], cnt[N];bool ans[N];std::bitset&lt;N&gt; b1, b2;struct Node { int l, r, id, x, opt; friend bool operator &lt;(Node a, Node b) { if (pos[a.l] != pos[b.l]) return pos[a.l] &lt; pos[b.l]; if (pos[a.l] &amp; 1) return a.r &lt; b.r; else return a.r &gt; b.r; }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline void Add(int x) {if (++cnt[x] == 1) b1[x] = b2[N - x] = 1;}inline void Remove(int x) {if (--cnt[x] == 0) b1[x] = b2[N - x] = 0;}signed main() { n = R(), m = R(), block = (int) sqrt(n); for (int i = 1; i &lt;= n; ++i) a[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= m; ++i) nd[i].opt = R(), nd[i].l = R(), nd[i].r = R(), nd[i].x = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + m); for (int i = 1, l = 1, r = 0; i &lt;= m; ++i) { while (l &lt; nd[i].l) Remove(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Remove(a[r--]); switch (nd[i].opt) { case 1: if ((b1 &amp; (b1 &lt;&lt; nd[i].x)).any()) ans[nd[i].id] = 1; break; case 2: if ((b1 &amp; (b2 &gt;&gt; (N - nd[i].x))).any()) ans[nd[i].id] = 1; break; default: for (int j = 1; j * j &lt;= nd[i].x; ++j) { if (!(nd[i].x % j) &amp;&amp; b1[j] &amp;&amp; b1[nd[i].x / j]) { ans[nd[i].id] = 1; break; } } break; } } for (int i = 1; i &lt;= m; i++) printf(\"%s\\n\", ans[i] ? \"hana\" : \"bi\"); return 0;}","link":"/2019/05/29/luogu-p3674/"},{"title":"Luogu P3901 数列找不同","text":"简单的莫队 Luogu P3901 数列找不同 思路:维护区间[l, r]出现了几种数字, 若出现数等于r - l + 1则数列互不相同,反之则有相同. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;#define N 100000 + 233int n, q, block, kind;int pos[N], a[N], appear[N];bool ans[N];struct Node { int l, r, id; friend bool operator &lt;(Node a, Node b) { return (pos[a.l] ^ pos[b.l]) ? pos[a.l] &lt; pos[b.l] : ((pos[a.l] &amp; 1) ? a.r &lt; b.r : a.r &gt; b.r); }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline void Add(int x) { ++appear[x]; if (appear[x] == 1) ++kind;}inline void Remove(int x) { --appear[x]; if (!appear[x]) --kind;}signed main() { n = R(), q = R(); block = (int) sqrt(n); for (int i = 1; i &lt;= n; i++) a[i] = R(), pos[i] = (i - 1) / block + 1; for (int i = 1; i &lt;= q; i++) nd[i].l = R(), nd[i].r = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + q); for (int i = 1, l = 1, r = 0; i &lt;= q; i++) { while (l &lt; nd[i].l) Remove(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Remove(a[r--]); ans[nd[i].id] = (kind == nd[i].r - nd[i].l + 1); } for (int i = 1; i &lt;= q; i++) printf(\"%s\\n\", ans[i] ? \"Yes\" : \"No\"); return 0;}","link":"/2019/05/29/luogu-p3901/"},{"title":" Luogu P3627 [APIO2009]抢掠计划\t\t","text":"与缩点模板题惊人的相似… Luogu P3627 [APIO2009]抢掠计划题面：题目描述Siruseri 城中的道路都是单向的。不同的道路由路口连接。按照法律的规定， 在每个路口都设立了一个 Siruseri 银行的 ATM 取款机。令人奇怪的是，Siruseri 的酒吧也都设在路口，虽然并不是每个路口都设有酒吧。 Banditji 计划实施 Siruseri 有史以来最惊天动地的 ATM 抢劫。他将从市中心 出发，沿着单向道路行驶，抢劫所有他途径的 ATM 机，最终他将在一个酒吧庆 祝他的胜利。 使用高超的黑客技术，他获知了每个 ATM 机中可以掠取的现金数额。他希 望你帮助他计算从市中心出发最后到达某个酒吧时最多能抢劫的现金总数。他可 以经过同一路口或道路任意多次。但只要他抢劫过某个 ATM 机后，该 ATM 机 里面就不会再有钱了。 例如，假设该城中有 6 个路口，道路的连接情况如下图所示： 市中心在路口 1，由一个入口符号→来标识，那些有酒吧的路口用双圈来表示。每个 ATM 机中可取的钱数标在了路口的上方。在这个例子中，Banditji 能抢 劫的现金总数为 47，实施的抢劫路线是：1-2-4-1-2-3-5。 输入格式：第一行包含两个整数 N、M。N 表示路口的个数，M 表示道路条数。接下来 M 行，每行两个整数，这两个整数都在 1 到 N 之间，第 i+1 行的两个整数表示第 i 条道路的起点和终点的路口编号。接下来 N 行，每行一个整数，按顺序表示每 个路口处的 ATM 机中的钱数。接下来一行包含两个整数 S、P，S 表示市中心的 编号，也就是出发的路口。P 表示酒吧数目。接下来的一行中有 P 个整数，表示 P 个有酒吧的路口的编号。 输出格式：输出一个整数，表示 Banditji 从市中心开始到某个酒吧结束所能抢劫的最多 的现金总数。 数据范围：50%的输入保证 N, M&lt;=3000。所有的输入保证 N, M&lt;=500000。每个 ATM 机中可取的钱数为一个非负整数且不超过 4000。 输入数据保证你可以从市中心 沿着 Siruseri 的单向的道路到达其中的至少一个酒吧。 思路:此题是要在图中求经过点权最大的路径所经过的点权和. 然后我们就可以发现它与缩点模板题惊人的相似… 我们可以先缩点,将图转化为DAG,之后在DAG上拓扑跑DP即可. 本题有一大坑!(图片来自洛谷评论区) 当出现如图这种情况,若1为起点,5的入度为2,在拓扑过程中由于4不可达,5无法入队.我们可以发现,只需要研究可达的点就够了.所以在跑Tarjan和建新图的时候都只需要跑与起点联通的点.Tarjan只需要从起点跑,建图是特判dfn是否等于0. #3#11卡WA了解一下? 代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;bits/stdc++.h&gt;#define N 500005namespace Gekoo { struct Edge {int to, nxt;} e[N &lt;&lt; 1], c[N &lt;&lt; 1]; int ecnt, ccnt, head[N], hc[N], p, n, m, num, scc, cnt, ans = -114514, S, P, SPlace; int stack[N], dfn[N], low[N], id[N], ind[N], pv[N], val[N], f[N]; bool bridge[N], vis[N], bar[N], Bar[N]; inline void Add(int f, int to) {e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} inline void AddC(int f, int to) {c[++ccnt].to = to, c[ccnt].nxt = hc[f], hc[f] = ccnt;} void Tarjan(int x) { dfn[x] = low[x] = ++num; stack[++p] = x, vis[x] = 1; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (vis[y]) low[x] = std::min(low[x], dfn[y]); } if (dfn[x] == low[x]) { cnt++; int y; do { y = stack[p--], vis[y] = 0; id[y] = cnt; val[cnt] += pv[y]; if (bar[y]) Bar[cnt] = 1; if (y == S) SPlace = cnt; } while (x != y); } } void TopSort() { std::queue&lt;int&gt; q; q.push(id[S]); f[id[S]] = val[SPlace]; while (!q.empty()) { int u = q.front(); q.pop(); for (int i = hc[u]; i; i = c[i].nxt) { int v = c[i].to; f[v] = std::max(f[v], f[u] + val[v]); if (!(--ind[v])) { q.push(v); } } } for (int i = 1; i &lt;= cnt; i++) if (Bar[i]) ans = std::max(ans, f[i]); } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, a, b; i &lt;= m; i++) { scanf(\"%d%d\", &amp;a, &amp;b); Add(a, b); } for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;pv[i]); scanf(\"%d%d\", &amp;S, &amp;P); for (int i = 1, x; i &lt;= P; i++) scanf(\"%d\", &amp;x), bar[x] = 1; Tarjan(S); for (int x = 1; x &lt;= n; x++) { if (!dfn[x]) continue; for (int i = head[x]; i; i = e[i].nxt) { int y = e[i].to; if (id[x] == id[y]) continue; AddC(id[x], id[y]); ind[id[y]]++; } } TopSort(); printf(\"%d\\n\", ans); return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/08/luogu-p3627/"},{"title":"Luogu P4124 [CQOI2016]手机号码","text":"挺难搞的数位DP,顺便总结一下 Luogu P4124 [CQOI2016]手机号码 思路:数位DP有递推和记搜两种写法,记搜好想好写. 套路还是比较明显,拆数dfs. 根据需要设计状态, dfs(int pos, int pre, bool lim, ......) 本题需要记录的状态就相当多..所以就记下来,都可以记. 吐槽一下,说好的一定是11位数,怎么数据还有不合法的???O_o 代码:123456789101112131415161718192021222324252627282930313233343536#include &lt;bits/stdc++.h&gt;#define ll long longll L, R, dp[12][12][12][2][2][2];int dig[233], cnt;ll dfs(int pos, int pre1, int pre2, bool lim, bool eight, bool four, bool ok) { if (eight &amp;&amp; four) return 0; if (!pos) return ok; if (!lim &amp;&amp; dp[pos][pre1][pre2][eight][four][ok] != -1) return dp[pos][pre1][pre2][eight][four][ok]; int upper = lim ? dig[pos] : 9; ll ans = 0; for (int i = 0; i &lt;= upper; i++) ans += dfs(pos - 1, i, pre1, lim &amp;&amp; (i == upper), eight || (i == 8), four || (i == 4), ok || (i == pre1 &amp;&amp; i == pre2)); if (!lim) dp[pos][pre1][pre2][eight][four][ok] = ans; return ans;}ll Solve(ll x) { cnt = 0; ll ret = 0; memset(dig, 0, sizeof(dig)); memset(dp, -1, sizeof(dp)); while (x) dig[++cnt] = x % 10, x /= 10; if (cnt != 11) return 0; for (int i = 1; i &lt;= dig[cnt]; i++) ret += dfs(cnt - 1, i, 0, i == dig[cnt], i == 8, i == 4, 0); return ret;}signed main() { scanf(\"%lld%lld\", &amp;L, &amp;R); printf(\"%lld\", Solve(R) - Solve(L - 1)); return 0;}","link":"/2019/06/15/luogu-p4124/"},{"title":"Luogu P4168 [Violet]蒲公英","text":"分块是暴力的浪漫 Luogu P4168 [Violet]蒲公英题面：题目描述在乡下的小路旁种着许多蒲公英，而我们的问题正是与这些蒲公英有关。 为了简化起见，我们把所有的蒲公英看成一个长度为n的序列$(a_1,a_2..a_n)$,其中$a_i$为一个正整数，表示第i棵蒲公英的种类编号。 而每次询问一个区间 [l,r]，你需要回答区间里出现次数最多的是哪种蒲公英，如果有若干种蒲公英出现次数相同，则输出种类编号最小的那个。 注意，你的算法必须是在线的. 输入格式：第一行两个整数 n,m ，表示有n株蒲公英，m 次询问。 接下来一行n个空格分隔的整数 $a_i$ ，表示蒲公英的种类 再接下来m行每行两个整数 $l_0,r_0$ ，我们令上次询问的结果为 x（如果这是第一次询问，则 x=0）。 令 $l=(l_0+x-1)\\bmod n + 1,r=(r_0+x-1) \\bmod n + 1$，如果 l&gt;r，则交换 l,r 。 最终的询问区间为[l,r]。 输出格式：输出 m 行。每行一个整数，表示每次询问的结果。 数据范围：对于 20% 的数据，保证 $1\\le n,m \\le 3000$。 对于 100% 的数据，保证 $1\\le n \\le 40000,1\\le m \\le 50000,1\\le a_i \\le 10^9$. 思路:问题转化:求区间众数. $n \\le 40000$,显然可以分块.$a_i \\le 10 ^ 9$,空间接受不能,显然需要离散化. 显然,一个区间里的众数是这个区间包含的块的众数或者是边角上的数. 我们用f[i][j]表示从第i块到第j块的最小众数,这很好求,每个块扫一遍. 当我们得到询问区间后,我们先把它包含的大块的最小众数作为候选答案.然后再扫边角. 为了得到每个数在区间内的出现次数,我们可以开N个vector来存每个数出现的位置.查找时分别在vector二分查找l和r,下标之差即为出现次数. 有个坑:查找r时用std::upper_bound,查找l时用std::lower_bound.如果都用std::lower_bound最后结果会少… 此做法忽略块大小等因素期望复杂度$O(N\\sqrt{nlogn})$.且vector常数巨大,吸氧吧您.艰难卡过. 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;bits/stdc++.h&gt;#define N 40005int n, m, block, pos[N], val[N], a[N], f[250][250], L[250], lst, id;std::vector&lt;int&gt; v[N];std::map&lt;int, int&gt; mp;inline void init(int x) { int cnt[N] = {}, mx = 0, ans = 0; for (int i = L[x]; i &lt;= n; i++) { cnt[a[i]]++; if (cnt[a[i]] &gt; mx || (cnt[a[i]] == mx &amp;&amp; val[a[i]] &lt; val[ans])) ans = a[i], mx = cnt[a[i]]; f[x][pos[i]] = ans; }} inline int ask(int l, int r) { int ret, mx; ret = f[pos[l] + 1][pos[r] - 1]; mx = std::upper_bound(v[ret].begin(), v[ret].end(), r) - std::lower_bound(v[ret].begin(), v[ret].end(), l); for (int i = l; i &lt;= std::min(L[pos[l] + 1] - 1, r); i++) { int t = std::upper_bound(v[a[i]].begin(), v[a[i]].end(), r) - std::lower_bound(v[a[i]].begin(), v[a[i]].end(), l); if (t &gt; mx || (t == mx &amp;&amp; val[a[i]] &lt; val[ret])) ret = a[i], mx = t; } if (pos[l] != pos[r]) { for (int i = L[pos[r]]; i &lt;= r; i++) { int t = std::upper_bound(v[a[i]].begin(), v[a[i]].end(), r) - std::lower_bound(v[a[i]].begin(), v[a[i]].end(), l); if (t &gt; mx || (t == mx &amp;&amp; val[a[i]] &lt; val[ret])) ret = a[i], mx = t; } } return ret;}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); //离散化 for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", &amp;a[i]); if (mp.find(a[i]) == mp.end()) { mp[a[i]] = ++id; val[id] = a[i]; } a[i] = mp[a[i]]; v[a[i]].push_back(i); } //分块和初始化 block = int(sqrt(n)); for (int i = 1; i &lt;= n; i++) { pos[i] = (i - 1) / block + 1; if (pos[i] != pos[i - 1]) L[pos[i]] = i; } L[pos[n + 1] = pos[n] + 1] = n + 1; for (int i = 1; i &lt;= pos[n]; i++) init(i); //处理询问 for (int i = 1, l, r; i &lt;= m; i++) { scanf(\"%d%d\", &amp;l, &amp;r); l = (l + lst - 1) % n + 1, r = (r + lst - 1) % n + 1; if (l &gt; r) std::swap(l, r); lst = val[ask(l, r)]; printf(\"%d\\n\", lst); } return 0;}","link":"/2019/04/30/luogu-p4168/"},{"title":"Luogu P4139 上帝与集合的正确用法","text":"教我这题的人一个星期后就退役了QAQ Luogu P4139 上帝与集合的正确用法 思路:人话: $2^{2^{…^{2}}} mod p$. 前置知识: 拓展欧拉定理 当 b >= \\varphi(p),a^b \\equiv a^{b\\mod \\varphi(p) + \\varphi(p)}\\mod p.\\\\ 当 b < \\varphi(p) ,a^b \\equiv a ^ {b \\mod \\varphi(p)} \\mod p.我们对原式不断使用拓欧,发现一直在递归计算$2^{…^2}\\mod \\varphi(p) + \\varphi(p)$, 最终该式会等于0.因此递归计算即可. 欧拉函数算的少,需要的时候爆算就行,不需要筛法. 代码:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;#define ll long longint Phi(int x) { int ret = x; for (int i = 2; i * i &lt;= x; ++i) { if (x % i == 0) { ret -= ret / i; while (x % i == 0) x /= i; } } if (x &gt; 1) ret -= ret / x; return ret;}int Qpow(int a, int b, int p) { int ret = 1; for (; b; b &gt;&gt;= 1, a = (ll) a * a % p) if (b &amp; 1) ret = (ll) ret * a % p; return ret;}int Solve(int p) { return p == 1 ? 0 : Qpow(2, Solve(Phi(p)) + Phi(p), p);}signed main() { int T; scanf(\"%d\", &amp;T); while (T--) { int p; scanf(\"%d\", &amp;p); printf(\"%d\\n\", Solve(p)); } return 0;}","link":"/2019/05/29/luogu-p4139/"},{"title":"luogu-p4281","text":"","link":"/2019/06/15/luogu-p4281/"},{"title":"Luogu P4396 [AHOI2013]作业","text":"可以莫队或CDQ,由于菜不会CDQ QAQ Luogu P4396 [AHOI2013]作业题面：题目描述此时己是凌晨两点，刚刚做了Codeforces的小A掏出了英语试卷。英语作业其实不算多，一个小时刚好可以做完。然后是一个小时可以做完的数学作业，接下来是分别都是一个小时可以做完的化学，物理，语文……小A压力巨大。 这是小A碰见了一道非常恶心的数学题，给定了一个长度为n的数列和若干个询问，每个询问是关于数列的区间表示数列的第l个数到第r个数)，首先你要统计该区间内大于等于a，小于等于b的数的个数，其次是所有大于等于a，小于等于b的，且在该区间中出现过的数值的个数。 小A望着那数万的数据规模几乎绝望，只能向大神您求救，请您帮帮他吧。 输入格式：第一行n,m 接下来n个数表示数列 接下来m行，每行四个数l,r,a,b 输出格式：输出m行，分别对应每个询问，输出两个数，分别为在l到r这段区间中大小在[a,b]中的数的个数，以及大于等于a,小于等于b的，且在该区间中出现过的数值的个数（具体可以参考样例）。 数据范围：N&lt;=100000,M&lt;=100000 思路:求区间[l, r]中在[a, b]间的数的个数和数值的个数. 两问可转化为二维数点和三位数点,CDQ分治易求,但由于我Too Young,不会CDQ,这里使用莫队做法. 我们开两个树状数组,分别维护数的个数和数值的个数,开一个cnt数组来维护数是否存在. 之后跑个莫队,复杂度$O(n\\sqrt nlogn)$,完美TLE 77分. 放弃树状数组直接分块,去掉那个log,可以苟过去. 我犯了个SB错误交了一页:重载运算符的时候把l写成id了 代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;#define N 200000 + 23333int n, m, block, pos[N], cnt[N], a[N], f[N], g[N], L[N], ans1[N], ans2[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}struct Node { int l, r, a, b, id; bool operator &lt;(const Node &amp;a) { if (pos[l] != pos[a.l]) return pos[l] &lt; pos[a.l]; if (pos[l] &amp; 1) return r &lt; a.r; else return r &gt; a.r; }} nd[N];inline void Ask(int x) { int l = nd[x].a, r = nd[x].b, id = nd[x].id; if (pos[r] - pos[l] &lt; 2) { for (int i = l; i &lt;= r; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; return; } else { for (int i = l; i &lt; L[pos[l] + 1]; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; for (int i = L[pos[r]]; i &lt;= r; i++) if (cnt[i]) ans1[id] += cnt[i], ans2[id]++; for (int i = pos[l] + 1; i &lt; pos[r]; i++) ans1[id] += f[i], ans2[id] += g[i]; }}inline void Modify(int p, int tag) { if (tag) { if (!cnt[p]) g[pos[p]]++; f[pos[p]]++, cnt[p]++; } else { f[pos[p]]--, cnt[p]--; if (!cnt[p]) g[pos[p]]--; }}signed main() { n = R(), m = R(); block = ceil (pow(n, 0.5)); for (register int i = 1; i &lt;= n; i++) { a[i] = R(), pos[i] = (i - 1) / block + 1; if (pos[i] != pos[i - 1]) L[pos[i]] = i; } L[pos[n + 1] = pos[n] + 1] = n + 1; for (register int i = 1; i &lt;= m; i++) nd[i].l = R(), nd[i].r = R(), nd[i].a = R(), nd[i].b = R(), nd[i].id = i; std::sort(nd + 1, nd + 1 + m); for (int i = nd[1].l; i &lt;= nd[1].r; i++) Modify(a[i], 1); Ask(1); for (register int i = 2, l = nd[1].l, r = nd[1].r; i &lt;= m; i++) { while (l &lt; nd[i].l) Modify(a[l++], 0); while (l &gt; nd[i].l) Modify(a[--l], 1); while (r &lt; nd[i].r) Modify(a[++r], 1); while (r &gt; nd[i].r) Modify(a[r--], 0); Ask(i); } for (register int i = 1; i &lt;= m; i++) printf(\"%d %d\\n\", ans1[i], ans2[i]); return 0;}","link":"/2019/05/09/luogu-p4396/"},{"title":"luogu-p4315","text":"","link":"/2019/06/15/luogu-p4315/"},{"title":" Luogu P4503 [CTSC2014] 企鹅QQ\t\t","text":"正经A掉的第一道紫题?? Luogu P4503 [CTSC2014] 企鹅QQ题面：题目描述:小Q是PenguinQQ网站的管理员，他最近在进行一项有趣的研究——哪些账户是同一个人注册的。经过长时间的分析，小Q发现同一个人注册的账户名称总是很相似的，例如Penguin1，Penguin2，Penguin3……于是小Q决定先对这种相似的情形进行统计。 小Q定义，若两个账户名称是相似的，当且仅当这两个字符串等长且恰好只有一位不同。例如“Penguin1”和“Penguin2”是相似的，但“Penguin1”和“2Penguin”不是相似的。而小Q想知道，在给定的n 个账户名称中，有多少对是相似的。 为了简化你的工作，小Q给你的N 个字符串长度均等于L ，且只包含大小写字母、数字、下划线以及‘@’共64种字符，而且不存在两个相同的账户名称。 输入格式：第一行包含三个正整数N ，L ，S 。其中N 表示账户名称数量，L 表示账户名称长度，S 用来表示字符集规模大小，它的值只可能为2或64。 若S 等于2，账户名称中只包含字符‘0’和‘1’共2种字符； 若S 等于64，账户名称中可能包含大小写字母、数字、下划线以及‘@’共64种字符。 随后N 行，每行一个长度为L 的字符串，用来描述一个账户名称。数据保证N 个字符串是两两不同的。 输出格式：仅一行一个正整数，表示共有多少对相似的账户名称。 数据范围：$N \\\\le 30000, L \\\\le 200$ 思路:S可以直接无视（（（ 把题目转换为人话：给一堆字符串，找出只有一个字符不同的字符串对数。 由于L的范围非常小，所以我们可以枚举不同字符的位置。 先预处理字符串从左往右的hash和从右往左的hash，然后在枚举时将左右两边的hash再hash一遍，把相同hash的去重并统计一下，输出对数就OK。 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//请无视S.H.I.T.一样的变量命名(逃#include &lt;bits/stdc++.h&gt;using namespace std;#define ll long long#define base1 13131#define base2 1313131#define MOD 23333333333333333namespace Gekoo { int n, l, s, cwy; char QQ[30005][205]; ll gou[30005][205], li[30005][205], nmsl[30005]; void QAQ() { scanf(\"%d%d%d\", &amp;n, &amp;l, &amp;s); for (int i = 1; i &lt;= n; i++) { scanf(\"%s\", QQ[i] + 1); for (int j = 1; j &lt;= l; j++) { gou[i][j] = (gou[i][j - 1] * base1 + QQ[i][j]) % MOD; } for (int j = l; j &gt;= 1; j--) { li[i][j] = (li[i][j + 1] * base2 + QQ[i][j]) % MOD; } } for (int mid = 1; mid &lt;= l; mid++) { for (register int i = 1; i &lt;= n; i++) { nmsl[i] = (gou[i][mid - 1]* base1 + li[i][mid + 1]) % MOD; } sort(nmsl + 1, nmsl + 1 + n); int dky = 1; for (register int i = 1; i &lt;= n; i++) { if (nmsl[i] == nmsl[i - 1]) { cwy += dky; dky++; } else { dky = 1; } } } printf(\"%d\\n\", cwy); }}signed main() { Gekoo::QAQ(); return 0;}","link":"/2019/02/28/luogu-p4503/"},{"title":"Luogu P5337 [TJOI2019]甲苯先生的字符串","text":"省选矩阵乘法水题 Luogu P5337 [TJOI2019]甲苯先生的字符串 思路:我们首先可以得到一个显然的转移方程: $f[i][j]$表示写下长度为i字符串,最后一个字符为j的种类数. $f[i][j]=\\sum f[i-1][k]$,若j与k可连. 我们把s1中相邻的字符预处理出来,$w[i][j]$表示i与j是否可连,可连为1不可连为0. 则$f[i][j]=\\sum f[i-1][k]*w[k][j]$. 右半边这不就是矩阵乘法的展开形式嘛…… 用矩阵乘法搞一下就A了((( 代码:123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;#define ll long longconst int MO = 1e9 + 7;ll n, tot; int len; char s[100000 + 233];struct Matrix { ll a[35][35]; Matrix() { memset(a, 0, sizeof(a)); } friend Matrix operator *(Matrix a, Matrix b) { Matrix c; for (int i = 1; i &lt;= 26; ++i) for(int j = 1; j &lt;= 26; ++j) for (int k = 1; k &lt;= 26; ++k) c.a[i][j] = (c.a[i][j] + a.a[i][k] * b.a[k][j]) % MO; return c; }} ans, e, ret, q;signed main() { scanf(\"%lld%s\", &amp;n, s + 1); len = strlen(s + 1); for (int i = 1; i &lt;= 26; ++i) for (int j = 1; j &lt;= 26; ++j) e.a[i][j] = 1; for (int i = 1; i &lt;= 26; ++i) ans.a[1][i] = 1, q.a[i][i] = 1; for (int i = 1; i &lt; len; ++i) e.a[s[i] - 'a' + 1][s[i + 1] - 'a' + 1] = 0; for (int i = 1; i &lt;= 26; ++i) ret.a[i][i] = 1; for (--n ; n; n &gt;&gt;= 1) { if (n &amp; 1) q = q * e; e = e * e; } ans = ans * q; for (int i = 1; i &lt;= 26; ++i) tot = (tot + ans.a[1][i]) % MO; return !printf(\"%lld\\n\", tot);}","link":"/2019/06/15/luogu-p5337/"},{"title":" Luogu P4879 ycz的妹子","text":"ycz有很多喜欢他的青梅竹马,dky有很多妹子,我没有妹子,我们都有光明的前途. Luogu P4879 ycz的妹子题面：题目描述机房神犇ycz有n个青梅竹马，她们分别住在1~n号城市中。小时候的她们美丽可爱，但是由于女大十八变，有些妹子的颜值发生了变化，但是十分重感情的ycz神犇不忍心抛弃她们，于是记录下来了她们颜值变化的值，我们用C, x, y表示第x个城市的妹子的颜值下降了y。长大之后的ycz非常有魅力，有许多妹子被ycz迷得神魂颠倒，我们用I, x, y表示第x个城市有一个妹子喜欢上了ycz，她的颜值为y（y有可能是负数，但是ycz来者不拒）。但在中途有一些妹子和ycz吵架了，于是就分手了，我们用D, x表示第x个妹子和ycz分手了。 最近神犇ycz要去全国各地找他的妹子们，为了方便计算，我们珂以把ycz的妹子所在的城市当作是一条直线，并且挨在一起。神犇ycz由于忙于和他的妹子们联系此时已经很累了，于是交给你一个这样的任务：他想知道他在某个时间去找他的所有妹子们珂以获得多大的愉悦度，这个愉悦度为他找的妹子的颜值数，你要做的就是求出这个愉悦度之和（注意长大后妹子们的颜值可能为负数/滑稽）。 注意：每个城市只允许有一个妹子，也就是说后来喜欢上ycz的妹子会赶走之前这个城市喜欢ycz的妹子（一城不容二女）。 输入格式：第一行两个正整数n和m (1&lt;=n&lt;=100000)(1&lt;=n&lt;=100000)第二行为n个整数ai，表示小时候ycz的青梅竹马的颜值(1&lt;=ai&lt;=10^9)接下来m行，每行为一条信息，每条信息可能是下面的一种: C, x, y表示第x个城市的妹子的颜值下降了yI, x, y表示在第x个城市有一个颜值为y的妹子迷上了yczD, x表示第x个妹子和ycz分手了 Q表示ycz现在想知道如果现在去找他所有的妹子们珂以获得多大的愉悦度 说明：妹子们居住的城市编号最大为5*10^5 输出格式：对于每一个Q输出一个整数 思路:这道题是在同学的分块课件里的. 但是,我选择线段树 建立一棵线段树,维护从1到MAXN城市的妹子. 只需要注意一下分手的时候是根据cnt来二分的,其他都是板子.. 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;#define ll long long#define N 200005struct SegTree { int l, r; ll sum, cnt; #define l(x) tree[x].l #define r(x) tree[x].r #define sum(x) tree[x].sum #define cnt(x) tree[x].cnt #define ls(x) x &lt;&lt; 1 #define rs(x) x &lt;&lt; 1 | 1} tree[N &lt;&lt; 2];int n, m, qaq[N];void pushup(int p) { sum(p) = sum(ls(p)) + sum(rs(p)); cnt(p) = cnt(ls(p)) + cnt(rs(p));}void build(int p, int l, int r) { l(p) = l, r(p) = r, sum(p) = cnt(p) = 0; if (l == r) { sum(p) = qaq[l], cnt(p) = qaq[l] ? 1 : 0; return; } int mid = (l + r) &gt;&gt; 1; build(ls(p), l, mid); build(rs(p), mid + 1, r); pushup(p);}void remove(int p, int l, int r, int x) { if (l == r) { sum(p) = cnt(p) = 0; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= cnt(ls(p))) remove(ls(p), l, mid, x); else remove(rs(p), mid + 1, r, x - cnt(ls(p))); pushup(p);}void change(int p, int l, int r, int x, int v) { if (l == r) { sum(p) -= v; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) change(ls(p), l, mid, x, v); else change(rs(p), mid + 1, r, x, v); pushup(p);}void insert(int p, int l, int r, int x, int v) { if (l == r) { sum(p) = v, cnt(p) = 1; return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) insert(ls(p), l, mid, x, v); else insert(rs(p), mid + 1, r, x, v); pushup(p);}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;qaq[i]); build(1, 1, N); for (int i = 1; i &lt;= m; i++) { char s[5]; int x, y; scanf(\"%s\", s); switch (s[0]) { case 'C': scanf(\"%d%d\", &amp;x, &amp;y); change(1, 1, N, x, y); break; case 'I': scanf(\"%d%d\", &amp;x, &amp;y); insert(1, 1, N, x, y); break; case 'D': scanf(\"%d\", &amp;x); remove(1, 1, N, x); break; default: printf(\"%lld\\n\", sum(1)); break; } } return 0;}","link":"/2019/04/29/luogu-p4879/"},{"title":" Luogu P5058 [ZJOI2004]嗅探器\t\t","text":"警惕思维江（不僵化 Luogu P5058 [ZJOI2004]嗅探器题面：题目:某军搞信息对抗实战演习，红军成功地侵入了蓝军的内部网络，蓝军共有两个信息中心，红军计划在某台中间服务器上安装一个嗅探器，从而能够侦听到两个信息中心互相交换的所有信息，但是蓝军的网络相当的庞大，数据包从一个信息中心传到另一个信息中心可以不止有一条通路。现在需要你尽快地解决这个问题，应该把嗅探器安装在哪个中间服务器上才能保证所有的数据包都能被捕获？ 输入格式：输入文件的第一行一个整数 n，表示蓝军网络中服务器的数目。 接下来若干行是对蓝军网络的拓扑结构描述，每行是两个整数 i , j 表示编号为 i 和编号为 j 的两台服务器间存在连接（显然连接是双向的），服务器的编号从 1 开始，一行两个 0 表示网络的拓补结构描述结束，再接下来是两个整数 a , b 分别表示两个中心服务器的编号。 输出格式：输出编号。如果有多个解输出编号最小的一个，如果找不到任何解，输出 No solution 思路:求出一个点使得删去他后起点和终点不连通. 最开始我是打算求一下割点，然后枚举删割点. 之后郭老师提醒了我数据范围…&lt;100,Tarjan你horse呢QAQ 直接枚举删点跑Dijkstra,不能联通直接输出点,最后输出No Solution. 代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;#define N 10005namespace Gekoo { struct Edge {int to, nxt, val;} e[N &lt;&lt; 1]; int head[N], ecnt, n, st, ed, dis[N]; bool vis[N]; inline void Add(int f, int to) {e[ecnt].val = 1, e[++ecnt].to = to, e[ecnt].nxt = head[f], head[f] = ecnt;} bool Dijkstra(int ban) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue &lt;std::pair&lt;int, int&gt; &gt; q; dis[st] = 0; q.push(std::make_pair(0, st)); while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (v == ban) continue; if (dis[v] &gt; dis[u] + val) { dis[v] = dis[u] + val; if (!vis[v]) { q.push(std::make_pair(-dis[v], v)); } } } } return (dis[ed] == 0x3f3f3f3f) ? 0 : 1; } signed QAQ() { scanf(\"%d\", &amp;n); int i, j; while (1) { scanf(\"%d%d\", &amp;i, &amp;j); if (!i &amp;&amp; !j) break; Add(i, j), Add(j, i); } scanf(\"%d%d\", &amp;st, &amp;ed); for (int i = 1; i &lt;= n; i++) { if (i == st || i == ed) continue; if (!Dijkstra(i)) return !printf(\"%d\\n\", i); } return !printf(\"No solution\\n\"); }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/14/luogu-p5058/"},{"title":" POJ 1734 Sightseeing trip\t\t","text":"Floyd求最小环 POJ 1734 Sightseeing trip题面人话ver：给一无向图，求最小环。 思路:Floyd求最小环板子（（（ 没啥好多说的zzz 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#define INF 0x3f3f3f3fnamespace Gekoo { int n, m, mp[105][105], dis[105][105], pre[105][105], mincircle = INF; std::vector&lt;int&gt; path; void GetPath(int x, int y) { if(pre[x][y] == 0) return ; GetPath(x, pre[x][y]); path.push_back(pre[x][y]); GetPath(pre[x][y], y); } void Floyd() { for (int k = 1; k &lt;= n; k++) { for (int i = 1; i &lt; k; i++) { for (int j = i + 1; j &lt; k; j++) { if ((long long)dis[i][j] + mp[i][k] + mp[k][j] &lt; mincircle) { mincircle = dis[i][j] + mp[i][k] + mp[k][j]; path.clear(); path.push_back(i); GetPath(i, j); path.push_back(j); path.push_back(k); } } } for (int i = 1; i &lt;= n; i++) { for (int j = 1; j &lt;= n; j++) { if (dis[i][j] &gt; dis[i][k] + dis[k][j]) { dis[i][j] = dis[i][k] + dis[k][j]; pre[i][j] = k; } } } } } signed QAQ() { scanf(\"%d%d\", &amp;n, &amp;m); memset(mp, 0x3f, sizeof(mp)); memset(dis, 0x3f, sizeof(dis)); for (int i = 1; i &lt;= n; i++) mp[i][i] = 0; for (int i = 1, a, b ,c; i &lt;= m; i++) { scanf(\"%d%d%d\", &amp;a, &amp;b ,&amp;c); mp[a][b] = mp[b][a] = dis[a][b] = dis[b][a] = std::min(mp[a][b], c); } Floyd(); if (mincircle == INF) { puts(\"No solution.\"); return 0; } for (std::vector&lt;int&gt;::iterator it = path.begin(); it != path.end(); ++it) { printf(\"%d \", *it); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/03/04/poj-1734/"},{"title":" POJ 1135 Domino Effect\t\t","text":"最短路 POJ1135 Domino Effect人话版题面：给一无向图,从节点1开始推骨牌,骨牌运动速度为1m/s,求出最后一个骨牌的落地时间. 思路:先求最短路,找出最短路中最大值,即为落在节点上的最长时间. 再枚举落在边上的最长时间,画图手推可得,落在边$(u,v)$上的时间为$\\\\frac{dis(u)+dis(v)+val}{2}$. 最后比较一下大小对应输出. 由于我不良的代码习惯导致一直WA,我忏悔 代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;deque&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;utility&gt;#include &lt;vector&gt;#define N 500005namespace Gekoo { struct Edge { int to, nxt, val; }e[N &lt;&lt; 1]; int n, m, ecnt, head[N], dis[N], cnt; bool vis[N]; inline void AddEdge(int f, int to, int val) { e[++ecnt].to = to, e[ecnt].val = val, e[ecnt].nxt = head[f], head[f] = ecnt; } void Dijkstra(int s) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); std::priority_queue&lt; std::pair&lt;int, int&gt; &gt; q; q.push(std::make_pair(0, 1)); dis[1] = 0; while (!q.empty()) { int u = q.top().second; q.pop(); if (vis[u]) continue; vis[u] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (dis[v] &gt; dis[u] + val) { dis[v] = dis[u] + val; q.push(std::make_pair(-dis[v], v)); } } } } void init() { ecnt = 0; memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); } signed QAQ() { while (1) { scanf(\"%d%d\", &amp;n, &amp;m); if (!n &amp;&amp; !m) break; init(); for (int i = 1; i &lt;= m; i++) { int a, b, l; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;l); AddEdge(a, b, l); AddEdge(b, a, l); } Dijkstra(1); double mx_pt = 0.0; int pt = 0; for (int i = 1; i &lt;= n; i++) { if (dis[i] &gt;= mx_pt) { mx_pt = dis[i]; pt = i; } } double mx_e = 0.0; int lpt = 0, rpt = 0; for (int u = 1; u &lt;= n; u++) { for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (mx_e &lt;= (double) (dis[u] + dis[v] + val) / 2.0) { mx_e = (double) (dis[u] + dis[v] + val) / 2.0; lpt = std::min(u, v), rpt = std::max(u, v); } } } printf(\"System #%d\\n\", ++cnt); if (mx_pt &gt;= mx_e) { printf(\"The last domino falls after %.1f seconds, at key domino %d.\\n\", mx_pt, pt); } else { printf(\"The last domino falls after %.1f seconds, between key dominoes %d and %d.\\n\", mx_e, lpt, rpt); } puts(\"\"); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/02/28/poj-1135/"},{"title":" POJ 3463 Sightseeing\t\t","text":"最短路与次短路 POJ3463 Sightseeing题意：求图中最短路和比最短路长度大1的路径数总和 思路:先求出最短路数和次短路数，如果次短路长度 = 最短路长度，那么输出路径数和，否则输出最短路数。 求次短路数也非常简单，在Dijkstra过程中分类讨论即可。 代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;cctype&gt;#include &lt;cmath&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;ctime&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;deque&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;set&gt;#include &lt;stack&gt;#include &lt;string&gt;#include &lt;utility&gt;#include &lt;vector&gt;#define N 100005namespace Gekoo { struct Edge { int to, nxt, val; }e[N]; struct Node { int val, u, is_first; Node(int a, int b, int c) {u = a, val = b, is_first = c;} bool operator &lt;(const Node &amp;a) const { return val &gt; a.val; } }; int ecnt, head[N], T, dis[N][2], cnt[N][2]; bool vis[N][2]; void AddEdge(int f, int to, int val) { e[++ecnt].to = to; e[ecnt].val = val; e[ecnt].nxt = head[f]; head[f] = ecnt; } void Dijkstra(int s) { memset(dis, 0x3f, sizeof(dis)); memset(vis, 0, sizeof(vis)); memset(cnt, 0, sizeof(cnt)); dis[s][0] = dis[s][1] = 0; cnt[s][0] = cnt[s][1] = 1; std::priority_queue&lt;Node&gt; q; q.push(Node(s, 0, 0)); while (!q.empty()) { int u = q.top().u, is_f = q.top().is_first; q.pop(); if (vis[u][is_f]) continue; vis[u][is_f] = 1; for (int i = head[u]; i; i = e[i].nxt) { int v = e[i].to, val = e[i].val; if (val + dis[u][is_f] &lt; dis[v][0]) { dis[v][1] = dis[v][0]; dis[v][0] = val + dis[u][is_f]; cnt[v][1] = cnt[v][0]; cnt[v][0] = cnt[u][is_f]; q.push(Node(v, dis[v][0], 0)); q.push(Node(v, dis[v][1], 1)); } else if (val + dis[u][is_f] == dis[v][0]) { cnt[v][0] += cnt[u][is_f]; } else if (val + dis[u][is_f] &gt; dis[v][0] &amp;&amp; val + dis[u][is_f] &lt; dis[v][1]) { dis[v][1] = val + dis[u][is_f]; cnt[v][1] = cnt[u][is_f]; q.push(Node(v, dis[v][1], 1)); } else if (val + dis[u][is_f] == dis[v][1]) { cnt[v][1] += cnt[u][is_f]; } } } } signed QAQ() { scanf(\"%d\", &amp;T); while (T--) { ecnt = 0; memset(e, 0, sizeof(e)); memset(head, 0, sizeof(head)); int n, m, s, f; scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) { int a, b, l; scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;l); AddEdge(a, b, l); } scanf(\"%d%d\", &amp;s, &amp;f); Dijkstra(s); if (dis[f][1] == dis[f][0] + 1) cnt[f][0] += cnt[f][1]; printf(\"%d\\n\", cnt[f][0]); } return 0; }}signed main() { return Gekoo::QAQ();}","link":"/2019/02/28/poj-3463/"},{"title":"六一儿童周考","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/06/01/test0601/"},{"title":"2019普通高等OIer全团队统一考试","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/06/07/test0607/"},{"title":"0907考试","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/09/12/test0907/"},{"title":"初中学业OI水平考试","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/06/20/test0620/"},{"title":"hzoi-CSP-12","text":"I boom boom boom Problem A:斐波那契(fibonacci)题目名字就叫fibonacci，肯定要往这个方向想。 手玩那棵树，可以发现儿子与父亲的差是小于儿子的最大的fib数列的项。 开个set，一边用x减它能减的最大的fib的项来找爸爸一边往set里塞，然后一边减y一边在set里查，查见了输出就完事了。 不必担心时间复杂度问题，fib增长飞快，fib[60]就已经超过1e13了。 gmk手写hashtable太勇了（ 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;long long fib[65], x, y;int m;signed main() { fib[1] = fib[2] = 1; for (int i = 3; i &lt;= 60; i++) fib[i] = fib[i - 1] + fib[i - 2]; scanf(\"%d\", &amp;m); for (int i = 1; i &lt;= m; i++) { scanf(\"%lld%lld\", &amp;x, &amp;y); std::set&lt;long long&gt; s; s.insert(x); for (int j = 60; j &gt;= 1; j--) { if (x &gt; fib[j]) x -= fib[j], s.insert(x); if (x == 1) { s.insert(1); break; } } if (s.count(y)) { printf(\"%lld\\n\", y); continue; } for (int j = 60; j &gt;= 1; j--) { if (y &gt; fib[j]) { y -= fib[j]; if (s.count(y)) { printf(\"%lld\\n\", y); break; } } } } return 0;} Problem B:数颜色看到这题就想到了Luogu P1903 数颜色，满脑子都是莫队，我的脑子再也容不下其他的想法（ 光速码一个带修莫队，然而由于太久没写，出了很大的偏差。。。。先想了大约半小时，然后调调调，对了个拍感觉没啥问题，不过耗时太多了，已经9:50了。。。期望得分60 然而T成40？？？？ GMK怒斥，块长开了$ \\sqrt N $，必死无疑 猛然惊醒，带修莫队最优块长是$ N ^ {\\frac{2}{3}}$。。。 带修莫队最优块长是$ N ^ {\\frac{2}{3}}$!! 带修莫队最优块长是$ N ^ {\\frac{2}{3}}$ !!! 写这种带根号的东西的时候多试试块长。。。20分白丢了。。。。。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;bits/stdc++.h&gt;const int N = 3e5 + 233;int n, m, a[N], cnt[N], blk, pos[N], ans[N], ncnt, ccnt, ch[N];struct Node { int l, r, t, c, id; friend bool operator &lt;(Node a, Node b) { if (pos[a.l] != pos[b.l]) return pos[a.l] &lt; pos[b.l]; if (pos[a.r] != pos[b.r]) return pos[a.r] &lt; pos[b.r]; else return a.t &lt; b.t; }} nd[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}void Change(int t, int l, int r) { if (ch[t] + 1 == l) ++cnt[a[l - 1]], --cnt[a[l]]; if (ch[t] == r) ++cnt[a[r + 1]], --cnt[a[r]]; std::swap(a[ch[t]], a[ch[t] + 1]);}inline void Add(int x) {cnt[x]++;}inline void Del(int x) {cnt[x]--;}signed main() { n = R(), m = R(); for (int i = 1; i &lt;= n; i++) a[i] = R(); for (int i = 1, op; i &lt;= m; i++) { op = R(); if (op == 1) { int l = R(), r = R(), c = R(); nd[++ncnt] = {l, r, ccnt, c, ncnt}; } else { ch[++ccnt] = R(); } } blk = pow(n, 0.666666); for (int i = 1; i &lt;= n; i++) pos[i] = (i - 1) / blk + 1; std::sort(nd + 1, nd + 1 + ncnt); for (int i = 1, l = 1, r = 0, tim = 0; i &lt;= ncnt; i++) { while (tim &lt; nd[i].t) Change(++tim, l, r); while (tim &gt; nd[i].t) Change(tim--, l, r); while (l &lt; nd[i].l) Del(a[l++]); while (l &gt; nd[i].l) Add(a[--l]); while (r &lt; nd[i].r) Add(a[++r]); while (r &gt; nd[i].r) Del(a[r--]); ans[nd[i].id] = cnt[nd[i].c]; } for (int i = 1; i &lt;= ncnt; i++) printf(\"%d\\n\", ans[i]); return 0;} 正解有两种，数据结构学傻了的动态开点线段树和二分 我选择二分 动态开点线段树好像空间有点问题，TKJ开了迫真内存池其实只是内存回收，我还是写二分了 开个vector存每种颜色存在的位置，修改直接二分查见修改位置暴力改，查询仍旧二分查位置，不多谈了。不过要注意查询的时候一个lower_bound一个upper_bound。 谨防数据结构学傻。。。。别让你的思维被那几个sqrt/log锢住。。。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;bits/stdc++.h&gt;const int N = 3e5 + 5;int n, m, a[N];std::vector&lt;int&gt; v[N];inline int R() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}signed main() { n = R(), m = R(); for (int i = 1; i &lt;= n; i++) { a[i] = R(); v[a[i]].push_back(i); } for (int i = 1, op; i &lt;= m; i++) { op = R(); if (op == 1) { int l = R(), r = R(), c = R(); int p = std::lower_bound(v[c].begin(), v[c].end(), l) - v[c].begin(); int q = std::upper_bound(v[c].begin(), v[c].end(), r) - v[c].begin(); printf(\"%d\\n\", q - p); } else { int x = R(); if (a[x] != a[x + 1]) { int p = std::lower_bound(v[a[x]].begin(), v[a[x]].end(), x) - v[a[x]].begin(); int q = std::lower_bound(v[a[x + 1]].begin(), v[a[x + 1]].end(), x + 1) - v[a[x + 1]].begin(); v[a[x]][p]++, v[a[x + 1]][q]--; std::swap(a[x], a[x + 1]); } } } return 0;}``` # Problem C:分组考试的时候时间不够了，而且读题读错了。。。。首先T2时间拖太久，心态有点爆炸了，这次考试的时间安排是有问题的。。。。然后是读了题后我就开始想，这个团体该咋分啊，然后我就想。。。想了20min左右时间不够了，只能printf(\"1\\n\\n\")了。。。考完听讲题才看见K只能等于1或2。。。。。少星际，多读题。。。多看看数据范围没坏处。。。。K=1时显然，只能是把1-n分成几个连续的区间，直接单调地扫一遍就完事了。但有一个点，就是关于如何维护冲突。一看这数据范围，枚举平方的话撑死不到5122。我们维护一个是否出现过的数组vis[]，每有一个新的数就枚举幂k，看$k^2 - a_i$是否出现过。这样就把判断的复杂度降下来了。注意，为了得到字典序最小的答案，我们从后往前枚举，这样能使分的位置尽量考前。```cppnamespace Subtask1 { signed QAQ() { for (int i = n, j = n; i;) { for (bool gg = 0; j; j--) { for (int k = 1; k * k - a[j] &lt; N; k++) { if (k * k - a[j] &lt;= 0) continue; if (vis[k * k - a[j]]) {gg = 1; break;} } if (gg) break; vis[a[j]] = 1; } if (!j) break; brk[++m] = j; for (; i &gt; j; i--) vis[a[i]] = 0; } printf(\"%d\\n\", m + 1); for (int i = m; i &gt;= 1; i--) printf(\"%d \", brk[i]); puts(\"\"); return 0; }} K=2时我们可以在每个区间放冲突兔子了。如果把冲突兔子互相连边，区间实际上形成了二分图。 你暴力染色check肯定不行，$N^2$复杂度爆炸 然而数据太水，HZ有人这么A了 我反正看到这玩意就想起的不是关押罪犯，而是Luogu P2024 食物链。这是一个拓展域冰茶姬的板子。 我最开始是很懵的，gmk画图给我解了惑。我们把每只兔子拆开，冲突兔子相连，当达到什么的时候会冲突呢？就是兔子的两个点属于同一集合的时候。这个自己画图多膜膜你%你出来。 于是我们就在Subtask1的基础上，把这玩意加进去。 123456789101112131415161718192021222324252627282930313233namespace Subtask2 { int fa[N &lt;&lt; 1], mx; bool sp[N &lt;&lt; 1], vis[N &lt;&lt; 1]; int get(int x) { return fa[x] == x ? x : fa[x] = get(fa[x]); } void merge(int x, int y) { x = get(x), y = get(y); fa[x] = y; } void QAQ() { for (int i = 1; i &lt;= n; i++) mx = std::max(mx, a[i]); for (int i = 1; i &lt;= 2 * mx; i++) fa[i] = i; for (int i = n; i &gt;= 1; i--) { for (int j = 2; j &lt;= 512; j++) { if (j * j - a[i] &lt;= 0) continue; if (vis[j * j - a[i]]) { merge(a[i], j * j - a[i] + mx); merge(a[i] + mx, j * j - a[i]); } } if (get(a[i]) == get(a[i] + mx)) { brk[++m] = i; for (int j = i; j &lt;= (m == 1 ? n : brk[m - 1]); j++) fa[a[j]] = a[j], fa[a[j] + mx] = a[j] + mx, vis[a[j]] = 0; } vis[a[i]] = 1; } }} 然而有一个问题，有重复兔子啊。。。当然不是所有重复兔子都要背锅，如果2倍是完全平方数就要背锅了。我们必须把她们放在两组。 大力特判，一个背锅兔子出现两次就不能插入敌对兔子了，放不下。 调试n年。。。。。。。。。 详情请见计数器。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253namespace Subtask2 { int get(int x) { return fa[x] == x ? x : fa[x] = get(fa[x]); } void merge(int x, int y) { x = get(x), y = get(y); if (x != y) fa[x] = y; } signed QAQ() { for (int i = 2; i &lt;= 512; i++) if (!((i * i) &amp; 1)) sp[(i * i) / 2] = 1; for (int i = 1; i &lt;= n; i++) mx = std::max(mx, a[i]); for (int i = 1; i &lt;= 2 * mx; i++) fa[i] = i; for (int i = n; i &gt;= 1; i--) { for (int j = 2; j &lt;= 512; j++) { if (j * j - a[i] &lt;= 0) continue; if (j * j == 2 * a[i]) continue; if (vis[j * j - a[i]]) { if (sp[j * j - a[i]] &amp;&amp; vis[j * j - a[i]] &gt;= 2) { merge(a[i], a[i] + mx); break; } merge(a[i], j * j - a[i] + mx); merge(a[i] + mx, j * j - a[i]); } } if (sp[a[i]] &amp;&amp; vis[a[i]]) { if (vis[a[i]] &gt;= 2) merge(a[i], a[i] + mx); else for (int j = 2; j &lt;= 512; j++) { if (j * j - a[i] &lt;= 0) continue; if (j * j == 2 * a[i]) continue; if (vis[j * j - a[i]]) { merge(a[i], a[i] + mx); break; } } } if (get(a[i]) == get(a[i] + mx)) { brk[++m] = i; for (int j = i; j &lt;= (m == 1 ? n : brk[m - 1]); j++) fa[a[j]] = a[j], fa[a[j] + mx] = a[j] + mx, vis[a[j]] = 0; } vis[a[i]]++; } printf(\"%d\\n\", m + 1); for (int i = m; i &gt;= 1; i--) printf(\"%d \", brk[i]); printf(\"\\n\"); return 0; }} 完全代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;bits/stdc++.h&gt;const int N = 131072 * 2 + 233;int n, k, a[N], m, brk[N], fa[N &lt;&lt; 1], mx, vis[N &lt;&lt; 1];bool sp[N &lt;&lt; 1];namespace Subtask1 { signed QAQ() { for (int i = n, j = n; i;) { for (bool gg = 0; j; j--) { for (int k = 1; k * k - a[j] &lt; N; k++) { if (k * k - a[j] &lt;= 0) continue; if (vis[k * k - a[j]]) {gg = 1; break;} } if (gg) break; vis[a[j]] = 1; } if (!j) break; brk[++m] = j; for (; i &gt; j; i--) vis[a[i]] = 0; } printf(\"%d\\n\", m + 1); for (int i = m; i &gt;= 1; i--) printf(\"%d \", brk[i]); puts(\"\"); return 0; }}namespace Subtask2 { int get(int x) { return fa[x] == x ? x : fa[x] = get(fa[x]); } void merge(int x, int y) { x = get(x), y = get(y); if (x != y) fa[x] = y; } signed QAQ() { for (int i = 2; i &lt;= 512; i++) if (!((i * i) &amp; 1)) sp[(i * i) / 2] = 1; for (int i = 1; i &lt;= n; i++) mx = std::max(mx, a[i]); for (int i = 1; i &lt;= 2 * mx; i++) fa[i] = i; for (int i = n; i &gt;= 1; i--) { for (int j = 2; j &lt;= 512; j++) { if (j * j - a[i] &lt;= 0) continue; if (j * j == 2 * a[i]) continue; if (vis[j * j - a[i]]) { if (sp[j * j - a[i]] &amp;&amp; vis[j * j - a[i]] &gt;= 2) { merge(a[i], a[i] + mx); break; } merge(a[i], j * j - a[i] + mx); merge(a[i] + mx, j * j - a[i]); } } if (sp[a[i]] &amp;&amp; vis[a[i]]) { if (vis[a[i]] &gt;= 2) merge(a[i], a[i] + mx); else for (int j = 2; j &lt;= 512; j++) { if (j * j - a[i] &lt;= 0) continue; if (j * j == 2 * a[i]) continue; if (vis[j * j - a[i]]) { merge(a[i], a[i] + mx); break; } } } if (get(a[i]) == get(a[i] + mx)) { brk[++m] = i; for (int j = i; j &lt;= (m == 1 ? n : brk[m - 1]); j++) fa[a[j]] = a[j], fa[a[j] + mx] = a[j] + mx, vis[a[j]] = 0; } vis[a[i]]++; } printf(\"%d\\n\", m + 1); for (int i = m; i &gt;= 1; i--) printf(\"%d \", brk[i]); printf(\"\\n\"); return 0; }}signed main() { scanf(\"%d%d\", &amp;n, &amp;k); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", a + i); if (k == 1) return Subtask1::QAQ(); else return Subtask2::QAQ();} 考试不读题，爆0两行泪","link":"/2019/09/11/hzoi-CSP-12/"},{"title":"hzoi-CSP-13","text":"C题 60分扔扔扔，太遗憾了：（ Problem A:矩阵游戏啥也不说了，先打了个40暴力。 然后看到数据范围，想到肯定可以颓柿子。开始颓颓颓。 一个点$(i, j)$的数字是$(i - 1)m + j$。最后的答案是$\\sum \\limits_{i=1}^n \\sum \\limits_{j=1}^m R_i S_j [(i-1)m + j]$. 继续化简： 原式 = $\\sum \\limits_{i=1}^n R_i \\sum \\limits_{j=1}^m S_j [(i-1)m + j]$ = $\\sum \\limits_{i=1}^n R_i ((i-1) \\sum \\limits_{j=1}^m mS_j + \\sum \\limits_{j=1}^m jS_j)$ $\\sum \\limits_{j=1}^m mS_j$ 和 $\\sum \\limits_{j=1}^m jS_j$ 都可以$O(m)$线性求，最后再$O(n)$把答案求出来，得到一个$O(n + m)$的吼算法。 12345678910111213141516171819202122232425262728#include &lt;bits/stdc++.h&gt;#define ll long longconst int N = 1000000 + 233, MOD = 1000000007;ll n, m, k, R[N], S[N], sum_s1, sum_s2, ans;signed main() { scanf(\"%lld%lld%lld\", &amp;n, &amp;m, &amp;k); for (int i = 1; i &lt;= n; i++) R[i] = 1ll; for (int i = 1; i &lt;= m; i++) S[i] = 1ll; for (int i = 1; i &lt;= k; i++) { char op[10]; ll x, y; scanf(\"%s%lld%lld\", op, &amp;x, &amp;y); if (op[0] == 'R') { (R[x] *= y) %= MOD; } else { (S[x] *= y) %= MOD; } } for (int i = 1; i &lt;= m; i++) { sum_s1 = (sum_s1 + i * S[i]) % MOD; sum_s2 = (sum_s2 + m * S[i]) % MOD; } for (int i = 1; i &lt;= n; i++) { ans = (ans + R[i] * ((sum_s1 + ((ll) i - 1ll) * sum_s2) % MOD) % MOD) % MOD; } return !printf(\"%lld\\n\", ans);} Problem B:跳房子考试的时候直接码了个一步一步挪的暴力。 其实看出来有循环节了，但写起来细节太多，真心码不动Orz TKJ的这种方法很易于理解，而且很好码。 我们只看每一列，每次移动等价于一次置换。 开个线段树去维护置换，把区间+重载一下更方便。 其他部分都按普通线段树写就行。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include &lt;bits/stdc++.h&gt;const int N = 2005;int n, m, q, val[N][N], x = 1, y = 1;class SegTree {private: struct Node { int nxt[N]; friend Node operator *(Node a, Node b) { Node ret; for (int i = 1; i &lt;= n; i++) ret.nxt[i] = b.nxt[a.nxt[i]]; return ret; } } t[N &lt;&lt; 2]; void build(int p, int l, int r) { if (l == r) { for (int i = 1; i &lt;= n; i++) { int yy = l == m ? 1 : l + 1; int x_1 = i == n ? 1 : i + 1; int x_2 = i == 1 ? n : i - 1; int x_3 = i; t[p].nxt[i] = val[x_1][yy] &gt; val[x_2][yy] &amp;&amp; val[x_1][yy] &gt; val[x_3][yy] ? x_1 : val[x_2][yy] &gt; val[x_3][yy] ? x_2 : x_3; } return; } int mid = (l + r) &gt;&gt; 1; build(p &lt;&lt; 1, l, mid), build(p &lt;&lt; 1 | 1, mid + 1, r); t[p] = t[p &lt;&lt; 1] * t[p &lt;&lt; 1 | 1]; } void _change(int p, int l, int r, int x) { if (l == r) { for (int i = 1; i &lt;= n; i++) { int yy = l == m ? 1 : l + 1; int x_1 = i == n ? 1 : i + 1; int x_2 = i == 1 ? n : i - 1; int x_3 = i; t[p].nxt[i] = val[x_1][yy] &gt; val[x_2][yy] &amp;&amp; val[x_1][yy] &gt; val[x_3][yy] ? x_1 : val[x_2][yy] &gt; val[x_3][yy] ? x_2 : x_3; } return; } int mid = (l + r) &gt;&gt; 1; if (x &lt;= mid) _change(p &lt;&lt; 1, l, mid, x); else _change(p &lt;&lt; 1 | 1, mid + 1, r, x); t[p] = t[p &lt;&lt; 1] * t[p &lt;&lt; 1 | 1]; } Node _query(int p, int l, int r, int L, int R) { if (l == L &amp;&amp; r == R) return t[p]; int mid = (L + R) &gt;&gt; 1; if (r &lt;= mid) return _query(p &lt;&lt; 1, l, r, L, mid); else if (l &gt; mid) return _query(p &lt;&lt; 1 | 1, l, r, mid + 1, R); else return _query(p &lt;&lt; 1, l, mid, L, mid) * _query(p &lt;&lt; 1 | 1, mid + 1, r, mid + 1, R); } Node _qpow(Node x, int b) { Node ret; for (int i = 1; i &lt;= n; i++) ret.nxt[i] = i; for (; b; b &gt;&gt;= 1, x = x * x) if (b &amp; 1) ret = ret * x; return ret; }public: SegTree() { build(1, 1, m); } Node query(int l, int r) { return _query(1, l, r, 1, m); } void change(int x) { _change(1, 1, m, x); } Node qpow(int b) { return _qpow(t[1], b); }};signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= m; j++) scanf(\"%d\", &amp;val[i][j]); static SegTree *Gekoo = new SegTree(); scanf(\"%d\", &amp;q); for (int i = 1; i &lt;= q; i++) { char op[10]; int k, a, b, e; scanf(\"%s\", op); if (op[0] == 'm') { scanf(\"%d\", &amp;k); if (!k) { printf(\"%d %d\\n\", x, y); continue; } if (y + k - 1 &lt;= m) { x = Gekoo-&gt;query(y, y + k - 1).nxt[x]; y = (y + k - 1 == m) ? 1 : y + k; } else { k -= m - y + 1; x = Gekoo-&gt;query(y, m).nxt[x], y = 1; if (k / m) x = Gekoo-&gt;qpow(k / m).nxt[x]; if (k % m) x = Gekoo-&gt;query(y, y + k % m - 1).nxt[x], y += k % m; } printf(\"%d %d\\n\", x, y); } else { scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;e); val[a][b] = e; Gekoo-&gt;change(b == 1 ? m : b - 1); } } return 0;} Problem C:优美序列这题很像奇袭，一个区间是优美的，等价于$r - l = max_{[l, r]} - min_{[l, r]}$. 可以用ST表暴力做：查询出询问区间的max和min，把它们作为端点继续查，直到不再改变，可以得84pt，不详谈，直接贴代码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;bits/stdc++.h&gt;const int N = 100005;int n, m, pos[N], ori[N]; int posmn[N][20], posmx[N][20], orimn[N][20], orimx[N][20], lg[N];inline int read() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}inline int query_orimx(int l, int r) { int t = lg[r - l + 1]; return std::max(orimx[l][t], orimx[r-(1&lt;&lt;t)+1][t]);}inline int query_orimn(int l, int r) { int t = lg[r - l + 1]; return std::min(orimn[l][t], orimn[r-(1&lt;&lt;t)+1][t]);}inline int query_posmx(int l, int r) { int t = lg[r - l + 1]; return std::max(posmx[l][t], posmx[r-(1&lt;&lt;t)+1][t]);}inline int query_posmn(int l, int r) { int t = lg[r - l + 1]; return std::min(posmn[l][t], posmn[r-(1&lt;&lt;t)+1][t]);}signed main() { n = read(); for (int i = 1; i &lt;= n; i++) { scanf(\"%d\", ori + i); pos[ori[i]] = i; } for (int i = 1; i &lt;= n; i++) posmx[i][0] = posmn[i][0] = pos[i], orimx[i][0] = orimn[i][0] = ori[i]; for (register int j = 1; (1 &lt;&lt; j) &lt;= n; j++) for (register int i = 1; i &lt;= n - (1 &lt;&lt; j) + 1; i++) posmx[i][j] = std::max(posmx[i][j-1], posmx[i+(1&lt;&lt;(j-1))][j-1]), posmn[i][j] = std::min(posmn[i][j-1], posmn[i+(1&lt;&lt;(j-1))][j-1]), orimx[i][j] = std::max(orimx[i][j-1], orimx[i+(1&lt;&lt;(j-1))][j-1]), orimn[i][j] = std::min(orimn[i][j-1], orimn[i+(1&lt;&lt;(j-1))][j-1]); for (int i = 0, t = 0; i &lt;= n; i++) { if (i &gt;= (1 &lt;&lt; (t + 1))) t++; lg[i] = t; } m = read(); while (m--) { int l, r, pl = 0, pr = 0, omx, omn; l = read(), r = read(); bool flg = 0; while (l != pl || r != pr) { if (flg) l = pl, r = pr; omx = query_orimx(l, r), omn = query_orimn(l, r); pl = query_posmn(omn, omx), pr = query_posmx(omn, omx); flg = 1; } printf(\"%d %d\\n\", pl, pr); } return 0;} 正解是分治，不提了，这里写的是DKY的线段树优化建图方法。 由上式，相邻两个数i, i + 1可以加入优美区间，仅当区间中出现了$[val_i, val_{i + 1}]$的所有值。 用边连接节点，表示限制关系，用点向区间连边显然可以线段树优化。 Tarjan缩点求SCC，DFS求出存在每个点所需要的区间。 用线段树可以维护。原因不说了，显然。 最后的答案就是区间内所有点对应区间的并。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#include &lt;bits/stdc++.h&gt;const int INF = 0x3f3f3f3f, N = 400000 + 233;int pos[N], n, val[N], m;std::vector&lt;int&gt; G1[N], G2[N];bool vis[N];struct Node { int l, r; Node() {l = INF, r = -1;} Node(int ll, int rr) {l = ll, r = rr;} friend Node operator +(Node x, Node y) { return Node(std::min(x.l, y.l), std::max(x.r, y.r)); }};class SegTree {private: struct Tree { Node t[N]; void _change(int p, int L, int R, int x, Node v) { if (L == R) return (void) (t[p] = v); int mid = (L + R) &gt;&gt; 1; if (x &lt;= mid) _change(p &lt;&lt; 1, L, mid, x, v); else _change(p &lt;&lt; 1 | 1, mid + 1, R, x, v); t[p] = t[p&lt;&lt;1] + t[p&lt;&lt;1|1]; } Node _query(int p, int L, int R, int l, int r) { if (l &lt;= L &amp;&amp; r &gt;= R) return t[p]; int mid = (L + R) &gt;&gt; 1; if (r &lt;= mid) return _query(p &lt;&lt; 1, L, mid, l, r); else if (l &gt; mid) return _query(p &lt;&lt; 1 | 1, mid + 1, R, l, r); else return _query(p &lt;&lt; 1, L, mid, l, mid) + _query(p &lt;&lt; 1 | 1, mid + 1, R, mid + 1, r); } } seg[2]; void _build(int p, int L, int R) { if (L == R) return (void) (pos[L] = p); int mid = (L + R) &gt;&gt; 1; _build(p &lt;&lt; 1, L, mid), _build(p &lt;&lt; 1 | 1, mid + 1, R); G1[p].push_back(p &lt;&lt; 1), G1[p].push_back(p &lt;&lt; 1 | 1); } void _addedge(int p, int L, int R, int l, int r, int q) { if (l &lt;= L &amp;&amp; r &gt;= R) return (void) (G1[q].push_back(p)); int mid = (L + R) &gt;&gt; 1; if (l &lt;= mid) _addedge(p &lt;&lt; 1, L, mid, l, r, q); if (r &gt; mid) _addedge(p &lt;&lt; 1 | 1, mid + 1, R, l, r, q); }public: SegTree() { _build(1, 1, n); } Node query(int id, int l, int r) { return seg[id]._query(1, 1, n, l, r); } void addedge(int l, int r, int q) { _addedge(1, 1, n, l, r, q); } void change(int id, int x, Node v) { seg[id]._change(1, 1, n, x, v); }};int dfn[N], low[N], stk[N], num, tp, scc[N], tot;bool ins[N]; void Tarjan(int x) { dfn[x] = low[x] = ++num; ins[stk[++tp] = x] = 1; for (auto y : G1[x]) { if (!dfn[y]) { Tarjan(y); low[x] = std::min(low[x], low[y]); } else if (ins[y]) low[x] = std::min(low[x], dfn[y]); } if (low[x] == dfn[x]) { int y; ++tot; do { ins[y = stk[tp--]] = 0, scc[y] = tot; } while (x != y); }}Node t1[N], t2[N];void dfs(int x) { if (vis[x]) return; vis[x] = 1; for (auto y : G2[x]) { dfs(y); t2[x] = t2[x] + t2[y]; }}signed main() { scanf(\"%d\", &amp;n); for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;val[i]); static SegTree *Gekoo = new SegTree(); for (int i = 1; i &lt;= n; i++) Gekoo-&gt;change(0, val[i], {i, i}); for (int i = 2; i &lt;= n; i++) { int l = std::min(val[i - 1], val[i]), r = std::max(val[i - 1], val[i]); t1[pos[i]] = Gekoo-&gt;query(0, l, r); Gekoo-&gt;addedge(t1[pos[i]].l + 1, t1[pos[i]].r, pos[i]); } for (int i = 1; i &lt; N; i++) if (!dfn[i]) Tarjan(i); for (int x = 1; x &lt; N; x++) for (auto y : G1[x]) if (scc[x] != scc[y]) G2[scc[x]].push_back(scc[y]); for (int i = 1; i &lt; N; i++) t2[scc[i]] = t2[scc[i]] + t1[i]; for (int i = 1; i &lt;= tot; i++) dfs(i); for (int i = 2; i &lt;= n; i++) Gekoo-&gt;change(1, i, t2[scc[pos[i]]]); scanf(\"%d\", &amp;m); for (int i = 1, x, y; i &lt;= m; i++) { scanf(\"%d%d\", &amp;x, &amp;y); if (x == y) { printf(\"%d %d\\n\", x, y); } else { Node ans = Gekoo-&gt;query(1, x + 1, y); printf(\"%d %d\\n\", ans.l, ans.r); } } return 0; }","link":"/2019/09/11/hzoi-CSP-13/"},{"title":"hzoi-CSP-11","text":"昨天颓了一天，今天考试没干劲。 最主要问题：无法深入思考，只会打暴力。 Problem A: string感觉和HEOI2016排序差不多，但刚了半小时没想出来，打了sort的40暴力。 正解确实和那题差不多，线段树存每个区间每种颜色的数目，每次修改开个cnt数组查询修改区间每种颜色的数目，从小到大的把数目大小的区间颜色都改了。 这个思路还是蛮好理解的。速码。 TLE。50。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;const int N = 100000 + 233;int n, m, sum[N &lt;&lt; 2][30], L[N &lt;&lt; 2], R[N &lt;&lt; 2], lazy[N &lt;&lt; 2];char s[N];void build(int p, int l, int r) { L[p] = l, R[p] = r; if (l == r) return (void) (sum[p][s[l] - 'a' + 1] = 1); int mid = (l + r) &gt;&gt; 1; build(p &lt;&lt; 1, l, mid), build(p &lt;&lt; 1 | 1, mid + 1, r); for (int i = 1; i &lt;= 26; i++) sum[p][i] = sum[p &lt;&lt; 1][i] + sum[p &lt;&lt; 1 | 1][i];} inline void pushdown(int p) { if (!lazy[p]) return; for (int i = (p &lt;&lt; 1); i &lt;= (p &lt;&lt; 1 | 1); i++) { for (int j = 1; j &lt;= 26; j++) sum[i][j] = 0; sum[i][lazy[p]] = R[i] - L[i] + 1, lazy[i] = lazy[p]; } lazy[p] = 0;}void change(int p, int l, int r, int k) { if (L[p] &gt;= l &amp;&amp; R[p] &lt;= r) { for (int i = 1; i &lt;= 26; i++) sum[p][i] = 0; sum[p][k] = R[p] - L[p] + 1; lazy[p] = k; return; } pushdown(p); int mid = (L[p] + R[p]) &gt;&gt; 1; if (l &lt;= mid) change(p &lt;&lt; 1, l, r, k); if (r &gt; mid) change(p &lt;&lt; 1 | 1, l, r, k); for (int i = 1; i &lt;= 26; i++) sum[p][i] = sum[p &lt;&lt; 1][i] + sum[p &lt;&lt; 1 | 1][i];}int ask(int p, int l, int r, int k) { if (L[p] &gt;= l &amp;&amp; R[p] &lt;= r) return sum[p][k]; pushdown(p); int mid = (L[p] + R[p]) &gt;&gt; 1, ret = 0; if (l &lt;= mid) ret += ask(p &lt;&lt; 1, l, r, k); if (r &gt; mid) ret += ask(p &lt;&lt; 1 | 1, l, r, k); return ret;}void print(int p, int l, int r) { if (l == r) { for (int i = 1; i &lt;= 26; i++) if (sum[p][i]) return (void) printf(\"%c\", i + 'a' - 1); return; } pushdown(p); int mid = (l + r) &gt;&gt; 1; print(p &lt;&lt; 1, l, mid), print(p &lt;&lt; 1 | 1, mid + 1, r);} signed main() { scanf(\"%d%d%s\", &amp;n, &amp;m, s + 1); build(1, 1, n); for (int i = 1, l, r, x; i &lt;= m; i++) { scanf(\"%d%d%d\", &amp;l, &amp;r, &amp;x); int cnt[30] = {}, lst = l; for (int j = 1; j &lt;= 26; j++) cnt[j] = ask(1, l, r, j); if (x == 1) for (int j = 1; j &lt;= 26; j++) change(1, lst, lst + cnt[j] - 1, j), lst += cnt[j]; else for (int j = 26; j &gt;= 1; j--) change(1, lst, lst + cnt[j] - 1, j), lst += cnt[j]; } print(1, 1, n); puts(\"\"); return 0;} 我草了，这题卡常！！！！ 开始卡常：数组紧贴着开，线段树开3倍也可以。 60。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;const int N = 100000 + 233;int n, m, sum[N * 3][27], L[N * 3], R[N * 3], lazy[N * 3], cnt[27];char s[N];inline int read() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}void build(int p, int l, int r) { L[p] = l, R[p] = r; if (l == r) return (void) (sum[p][s[l] - 'a' + 1] = 1); int mid = (l + r) &gt;&gt; 1; build(p &lt;&lt; 1, l, mid), build(p &lt;&lt; 1 | 1, mid + 1, r); for (int i = 1; i &lt;= 26; i++) sum[p][i] = sum[p &lt;&lt; 1][i] + sum[p &lt;&lt; 1 | 1][i];} inline void pushdown(int p) { if (!lazy[p]) return; for (int i = (p &lt;&lt; 1); i &lt;= (p &lt;&lt; 1 | 1); i++) { for (int j = 1; j &lt;= 26; j++) sum[i][j] = 0; sum[i][lazy[p]] = R[i] - L[i] + 1, lazy[i] = lazy[p]; } lazy[p] = 0;}void change(int p, int l, int r, int k) { if (L[p] &gt;= l &amp;&amp; R[p] &lt;= r) { for (int i = 1; i &lt;= 26; i++) sum[p][i] = 0; sum[p][k] = R[p] - L[p] + 1, lazy[p] = k; return; } pushdown(p); int mid = (L[p] + R[p]) &gt;&gt; 1; if (l &lt;= mid) change(p &lt;&lt; 1, l, r, k); if (r &gt; mid) change(p &lt;&lt; 1 | 1, l, r, k); for (int i = 1; i &lt;= 26; i++) sum[p][i] = sum[p &lt;&lt; 1][i] + sum[p &lt;&lt; 1 | 1][i];}void ask(int p, int l, int r) { if (L[p] &gt;= l &amp;&amp; R[p] &lt;= r){ for (int i = 1; i &lt;= 26; i++) cnt[i] += sum[p][i]; return; } pushdown(p); int mid = (L[p] + R[p]) &gt;&gt; 1; if (l &lt;= mid) ask(p &lt;&lt; 1, l, r); if (r &gt; mid) ask(p &lt;&lt; 1 | 1, l, r);}void print(int p, int l, int r) { if (l == r) { for (int i = 1; i &lt;= 26; i++) if (sum[p][i]) return (void) putchar(i + 'a' - 1); return; } pushdown(p); int mid = (l + r) &gt;&gt; 1; print(p &lt;&lt; 1, l, mid), print(p &lt;&lt; 1 | 1, mid + 1, r);} signed main() { n = read(), m = read(); scanf(\"%s\", s + 1); build(1, 1, n); for (int i = 1, l, r, x; i &lt;= m; i++) { l = read(), r = read(), x = read(); int lst = l; ask(1, l, r); if (x == 1) for (int j = 1; j &lt;= 26; j++) change(1, lst, lst + cnt[j] - 1, j), lst += cnt[j]; else for (int j = 26; j &gt;= 1; j--) change(1, lst, lst + cnt[j] - 1, j), lst += cnt[j]; for (int i = 1; i &lt;= 26; i++) cnt[i] = 0; } print(1, 1, n); puts(\"\"); return 0;} 这时cwy很郁闷，突然想起WC的挑战，N方也能过百万，秘籍：循环展开。 疯狂展开，同时，ask不再返回，把cnt开成全局直接修改。change时候不再循环1-26，cnt不为0再进入change函数，避免传参的时间损失，pushdown直接写到函数里。 改了好久，终于A了。 AC代码：（344行） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344#include &lt;bits/stdc++.h&gt;const int N = 100000 + 1;int n, m, sum[N * 3][27], L[N * 3], R[N * 3], lazy[N * 3], cnt[27];char s[N];inline int read() { int a = 0; char c = getchar(); while (!isdigit(c)) c = getchar(); while (isdigit(c)) a = a * 10 + c - '0', c = getchar(); return a;}void build(int p, int l, int r) { L[p] = l, R[p] = r; if (l == r) return (void) (sum[p][s[l] - 'a' + 1] = 1); int mid = (l + r) &gt;&gt; 1; build(p &lt;&lt; 1, l, mid), build(p &lt;&lt; 1 | 1, mid + 1, r); sum[p][1] = sum[p &lt;&lt; 1][1] + sum[p &lt;&lt; 1 | 1][1]; sum[p][2] = sum[p &lt;&lt; 1][2] + sum[p &lt;&lt; 1 | 1][2]; sum[p][3] = sum[p &lt;&lt; 1][3] + sum[p &lt;&lt; 1 | 1][3]; sum[p][4] = sum[p &lt;&lt; 1][4] + sum[p &lt;&lt; 1 | 1][4]; sum[p][5] = sum[p &lt;&lt; 1][5] + sum[p &lt;&lt; 1 | 1][5]; sum[p][6] = sum[p &lt;&lt; 1][6] + sum[p &lt;&lt; 1 | 1][6]; sum[p][7] = sum[p &lt;&lt; 1][7] + sum[p &lt;&lt; 1 | 1][7]; sum[p][8] = sum[p &lt;&lt; 1][8] + sum[p &lt;&lt; 1 | 1][8]; sum[p][9] = sum[p &lt;&lt; 1][9] + sum[p &lt;&lt; 1 | 1][9]; sum[p][10] = sum[p &lt;&lt; 1][10] + sum[p &lt;&lt; 1 | 1][10]; sum[p][11] = sum[p &lt;&lt; 1][11] + sum[p &lt;&lt; 1 | 1][11]; sum[p][12] = sum[p &lt;&lt; 1][12] + sum[p &lt;&lt; 1 | 1][12]; sum[p][13] = sum[p &lt;&lt; 1][13] + sum[p &lt;&lt; 1 | 1][13]; sum[p][14] = sum[p &lt;&lt; 1][14] + sum[p &lt;&lt; 1 | 1][14]; sum[p][15] = sum[p &lt;&lt; 1][15] + sum[p &lt;&lt; 1 | 1][15]; sum[p][16] = sum[p &lt;&lt; 1][16] + sum[p &lt;&lt; 1 | 1][16]; sum[p][17] = sum[p &lt;&lt; 1][17] + sum[p &lt;&lt; 1 | 1][17]; sum[p][18] = sum[p &lt;&lt; 1][18] + sum[p &lt;&lt; 1 | 1][18]; sum[p][19] = sum[p &lt;&lt; 1][19] + sum[p &lt;&lt; 1 | 1][19]; sum[p][20] = sum[p &lt;&lt; 1][20] + sum[p &lt;&lt; 1 | 1][20]; sum[p][21] = sum[p &lt;&lt; 1][21] + sum[p &lt;&lt; 1 | 1][21]; sum[p][22] = sum[p &lt;&lt; 1][22] + sum[p &lt;&lt; 1 | 1][22]; sum[p][23] = sum[p &lt;&lt; 1][23] + sum[p &lt;&lt; 1 | 1][23]; sum[p][24] = sum[p &lt;&lt; 1][24] + sum[p &lt;&lt; 1 | 1][24]; sum[p][25] = sum[p &lt;&lt; 1][25] + sum[p &lt;&lt; 1 | 1][25]; sum[p][26] = sum[p &lt;&lt; 1][26] + sum[p &lt;&lt; 1 | 1][26];} void change(int p, int l, int r, int k) { if (L[p] &gt;= l &amp;&amp; R[p] &lt;= r) { sum[p][1] = 0; sum[p][2] = 0; sum[p][3] = 0; sum[p][4] = 0; sum[p][5] = 0; sum[p][6] = 0; sum[p][7] = 0; sum[p][8] = 0; sum[p][9] = 0; sum[p][10] = 0; sum[p][11] = 0; sum[p][12] = 0; sum[p][13] = 0; sum[p][14] = 0; sum[p][15] = 0; sum[p][16] = 0; sum[p][17] = 0; sum[p][18] = 0; sum[p][19] = 0; sum[p][20] = 0; sum[p][21] = 0; sum[p][22] = 0; sum[p][23] = 0; sum[p][24] = 0; sum[p][25] = 0; sum[p][26] = 0; sum[p][k] = R[p] - L[p] + 1, lazy[p] = k; return; } if (lazy[p]) { sum[p &lt;&lt; 1][1] = 0; sum[p &lt;&lt; 1][2] = 0; sum[p &lt;&lt; 1][3] = 0; sum[p &lt;&lt; 1][4] = 0; sum[p &lt;&lt; 1][5] = 0; sum[p &lt;&lt; 1][6] = 0; sum[p &lt;&lt; 1][7] = 0; sum[p &lt;&lt; 1][8] = 0; sum[p &lt;&lt; 1][9] = 0; sum[p &lt;&lt; 1][10] = 0; sum[p &lt;&lt; 1][11] = 0; sum[p &lt;&lt; 1][12] = 0; sum[p &lt;&lt; 1][13] = 0; sum[p &lt;&lt; 1][14] = 0; sum[p &lt;&lt; 1][15] = 0; sum[p &lt;&lt; 1][16] = 0; sum[p &lt;&lt; 1][17] = 0; sum[p &lt;&lt; 1][18] = 0; sum[p &lt;&lt; 1][19] = 0; sum[p &lt;&lt; 1][20] = 0; sum[p &lt;&lt; 1][21] = 0; sum[p &lt;&lt; 1][22] = 0; sum[p &lt;&lt; 1][23] = 0; sum[p &lt;&lt; 1][24] = 0; sum[p &lt;&lt; 1][25] = 0; sum[p &lt;&lt; 1][26] = 0; sum[p &lt;&lt; 1][lazy[p]] = R[p &lt;&lt; 1] - L[p &lt;&lt; 1] + 1, lazy[p &lt;&lt; 1] = lazy[p]; sum[p &lt;&lt; 1 | 1][1] = 0; sum[p &lt;&lt; 1 | 1][2] = 0; sum[p &lt;&lt; 1 | 1][3] = 0; sum[p &lt;&lt; 1 | 1][4] = 0; sum[p &lt;&lt; 1 | 1][5] = 0; sum[p &lt;&lt; 1 | 1][6] = 0; sum[p &lt;&lt; 1 | 1][7] = 0; sum[p &lt;&lt; 1 | 1][8] = 0; sum[p &lt;&lt; 1 | 1][9] = 0; sum[p &lt;&lt; 1 | 1][10] = 0; sum[p &lt;&lt; 1 | 1][11] = 0; sum[p &lt;&lt; 1 | 1][12] = 0; sum[p &lt;&lt; 1 | 1][13] = 0; sum[p &lt;&lt; 1 | 1][14] = 0; sum[p &lt;&lt; 1 | 1][15] = 0; sum[p &lt;&lt; 1 | 1][16] = 0; sum[p &lt;&lt; 1 | 1][17] = 0; sum[p &lt;&lt; 1 | 1][18] = 0; sum[p &lt;&lt; 1 | 1][19] = 0; sum[p &lt;&lt; 1 | 1][20] = 0; sum[p &lt;&lt; 1 | 1][21] = 0; sum[p &lt;&lt; 1 | 1][22] = 0; sum[p &lt;&lt; 1 | 1][23] = 0; sum[p &lt;&lt; 1 | 1][24] = 0; sum[p &lt;&lt; 1 | 1][25] = 0; sum[p &lt;&lt; 1 | 1][26] = 0; sum[p &lt;&lt; 1 | 1][lazy[p]] = R[p &lt;&lt; 1 | 1] - L[p &lt;&lt; 1 | 1] + 1, lazy[p &lt;&lt; 1 | 1] = lazy[p]; lazy[p] = 0; } int mid = (L[p] + R[p]) &gt;&gt; 1; if (l &lt;= mid) change(p &lt;&lt; 1, l, r, k); if (r &gt; mid) change(p &lt;&lt; 1 | 1, l, r, k); sum[p][1] = sum[p &lt;&lt; 1][1] + sum[p &lt;&lt; 1 | 1][1]; sum[p][2] = sum[p &lt;&lt; 1][2] + sum[p &lt;&lt; 1 | 1][2]; sum[p][3] = sum[p &lt;&lt; 1][3] + sum[p &lt;&lt; 1 | 1][3]; sum[p][4] = sum[p &lt;&lt; 1][4] + sum[p &lt;&lt; 1 | 1][4]; sum[p][5] = sum[p &lt;&lt; 1][5] + sum[p &lt;&lt; 1 | 1][5]; sum[p][6] = sum[p &lt;&lt; 1][6] + sum[p &lt;&lt; 1 | 1][6]; sum[p][7] = sum[p &lt;&lt; 1][7] + sum[p &lt;&lt; 1 | 1][7]; sum[p][8] = sum[p &lt;&lt; 1][8] + sum[p &lt;&lt; 1 | 1][8]; sum[p][9] = sum[p &lt;&lt; 1][9] + sum[p &lt;&lt; 1 | 1][9]; sum[p][10] = sum[p &lt;&lt; 1][10] + sum[p &lt;&lt; 1 | 1][10]; sum[p][11] = sum[p &lt;&lt; 1][11] + sum[p &lt;&lt; 1 | 1][11]; sum[p][12] = sum[p &lt;&lt; 1][12] + sum[p &lt;&lt; 1 | 1][12]; sum[p][13] = sum[p &lt;&lt; 1][13] + sum[p &lt;&lt; 1 | 1][13]; sum[p][14] = sum[p &lt;&lt; 1][14] + sum[p &lt;&lt; 1 | 1][14]; sum[p][15] = sum[p &lt;&lt; 1][15] + sum[p &lt;&lt; 1 | 1][15]; sum[p][16] = sum[p &lt;&lt; 1][16] + sum[p &lt;&lt; 1 | 1][16]; sum[p][17] = sum[p &lt;&lt; 1][17] + sum[p &lt;&lt; 1 | 1][17]; sum[p][18] = sum[p &lt;&lt; 1][18] + sum[p &lt;&lt; 1 | 1][18]; sum[p][19] = sum[p &lt;&lt; 1][19] + sum[p &lt;&lt; 1 | 1][19]; sum[p][20] = sum[p &lt;&lt; 1][20] + sum[p &lt;&lt; 1 | 1][20]; sum[p][21] = sum[p &lt;&lt; 1][21] + sum[p &lt;&lt; 1 | 1][21]; sum[p][22] = sum[p &lt;&lt; 1][22] + sum[p &lt;&lt; 1 | 1][22]; sum[p][23] = sum[p &lt;&lt; 1][23] + sum[p &lt;&lt; 1 | 1][23]; sum[p][24] = sum[p &lt;&lt; 1][24] + sum[p &lt;&lt; 1 | 1][24]; sum[p][25] = sum[p &lt;&lt; 1][25] + sum[p &lt;&lt; 1 | 1][25]; sum[p][26] = sum[p &lt;&lt; 1][26] + sum[p &lt;&lt; 1 | 1][26];}void ask(int p, int l, int r) { if (L[p] &gt;= l &amp;&amp; R[p] &lt;= r){ cnt[1] += sum[p][1]; cnt[2] += sum[p][2]; cnt[3] += sum[p][3]; cnt[4] += sum[p][4]; cnt[5] += sum[p][5]; cnt[6] += sum[p][6]; cnt[7] += sum[p][7]; cnt[8] += sum[p][8]; cnt[9] += sum[p][9]; cnt[10] += sum[p][10]; cnt[11] += sum[p][11]; cnt[12] += sum[p][12]; cnt[13] += sum[p][13]; cnt[14] += sum[p][14]; cnt[15] += sum[p][15]; cnt[16] += sum[p][16]; cnt[17] += sum[p][17]; cnt[18] += sum[p][18]; cnt[19] += sum[p][19]; cnt[20] += sum[p][20]; cnt[21] += sum[p][21]; cnt[22] += sum[p][22]; cnt[23] += sum[p][23]; cnt[24] += sum[p][24]; cnt[25] += sum[p][25]; cnt[26] += sum[p][26]; return; } if (lazy[p]) { sum[p &lt;&lt; 1][1] = 0; sum[p &lt;&lt; 1][2] = 0; sum[p &lt;&lt; 1][3] = 0; sum[p &lt;&lt; 1][4] = 0; sum[p &lt;&lt; 1][5] = 0; sum[p &lt;&lt; 1][6] = 0; sum[p &lt;&lt; 1][7] = 0; sum[p &lt;&lt; 1][8] = 0; sum[p &lt;&lt; 1][9] = 0; sum[p &lt;&lt; 1][10] = 0; sum[p &lt;&lt; 1][11] = 0; sum[p &lt;&lt; 1][12] = 0; sum[p &lt;&lt; 1][13] = 0; sum[p &lt;&lt; 1][14] = 0; sum[p &lt;&lt; 1][15] = 0; sum[p &lt;&lt; 1][16] = 0; sum[p &lt;&lt; 1][17] = 0; sum[p &lt;&lt; 1][18] = 0; sum[p &lt;&lt; 1][19] = 0; sum[p &lt;&lt; 1][20] = 0; sum[p &lt;&lt; 1][21] = 0; sum[p &lt;&lt; 1][22] = 0; sum[p &lt;&lt; 1][23] = 0; sum[p &lt;&lt; 1][24] = 0; sum[p &lt;&lt; 1][25] = 0; sum[p &lt;&lt; 1][26] = 0; sum[p &lt;&lt; 1][lazy[p]] = R[p &lt;&lt; 1] - L[p &lt;&lt; 1] + 1, lazy[p &lt;&lt; 1] = lazy[p]; sum[p &lt;&lt; 1 | 1][1] = 0; sum[p &lt;&lt; 1 | 1][2] = 0; sum[p &lt;&lt; 1 | 1][3] = 0; sum[p &lt;&lt; 1 | 1][4] = 0; sum[p &lt;&lt; 1 | 1][5] = 0; sum[p &lt;&lt; 1 | 1][6] = 0; sum[p &lt;&lt; 1 | 1][7] = 0; sum[p &lt;&lt; 1 | 1][8] = 0; sum[p &lt;&lt; 1 | 1][9] = 0; sum[p &lt;&lt; 1 | 1][10] = 0; sum[p &lt;&lt; 1 | 1][11] = 0; sum[p &lt;&lt; 1 | 1][12] = 0; sum[p &lt;&lt; 1 | 1][13] = 0; sum[p &lt;&lt; 1 | 1][14] = 0; sum[p &lt;&lt; 1 | 1][15] = 0; sum[p &lt;&lt; 1 | 1][16] = 0; sum[p &lt;&lt; 1 | 1][17] = 0; sum[p &lt;&lt; 1 | 1][18] = 0; sum[p &lt;&lt; 1 | 1][19] = 0; sum[p &lt;&lt; 1 | 1][20] = 0; sum[p &lt;&lt; 1 | 1][21] = 0; sum[p &lt;&lt; 1 | 1][22] = 0; sum[p &lt;&lt; 1 | 1][23] = 0; sum[p &lt;&lt; 1 | 1][24] = 0; sum[p &lt;&lt; 1 | 1][25] = 0; sum[p &lt;&lt; 1 | 1][26] = 0; sum[p &lt;&lt; 1 | 1][lazy[p]] = R[p &lt;&lt; 1 | 1] - L[p &lt;&lt; 1 | 1] + 1, lazy[p &lt;&lt; 1 | 1] = lazy[p]; lazy[p] = 0; } int mid = (L[p] + R[p]) &gt;&gt; 1; if (l &lt;= mid) ask(p &lt;&lt; 1, l, r); if (r &gt; mid) ask(p &lt;&lt; 1 | 1, l, r);}void print(int p, int l, int r) { if (l == r) { if (sum[p][1]) return (void) putchar('a'); if (sum[p][2]) return (void) putchar('b'); if (sum[p][3]) return (void) putchar('c'); if (sum[p][4]) return (void) putchar('d'); if (sum[p][5]) return (void) putchar('e'); if (sum[p][6]) return (void) putchar('f'); if (sum[p][7]) return (void) putchar('g'); if (sum[p][8]) return (void) putchar('h'); if (sum[p][9]) return (void) putchar('i'); if (sum[p][10]) return (void) putchar('j'); if (sum[p][11]) return (void) putchar('k'); if (sum[p][12]) return (void) putchar('l'); if (sum[p][13]) return (void) putchar('m'); if (sum[p][14]) return (void) putchar('n'); if (sum[p][15]) return (void) putchar('o'); if (sum[p][16]) return (void) putchar('p'); if (sum[p][17]) return (void) putchar('q'); if (sum[p][18]) return (void) putchar('r'); if (sum[p][19]) return (void) putchar('s'); if (sum[p][20]) return (void) putchar('t'); if (sum[p][21]) return (void) putchar('u'); if (sum[p][22]) return (void) putchar('v'); if (sum[p][23]) return (void) putchar('w'); if (sum[p][24]) return (void) putchar('x'); if (sum[p][25]) return (void) putchar('y'); if (sum[p][26]) return (void) putchar('z'); return; } if (lazy[p]) { for (int i = L[p]; i &lt;= R[p]; i++) putchar('a' + lazy[p] - 1); return; } int mid = (l + r) &gt;&gt; 1; print(p &lt;&lt; 1, l, mid), print(p &lt;&lt; 1 | 1, mid + 1, r);} signed main() { n = read(), m = read(); scanf(\"%s\", s + 1); build(1, 1, n); for (int i = 1, l, r, x; i &lt;= m; i++) { l = read(), r = read(), x = read(); int lst = l; ask(1, l, r); if (x == 1) { for (int j = 1; j &lt;= 26 &amp;&amp; lst &lt;= n; j++) if (cnt[j] != 0) change(1, lst, lst + cnt[j] - 1, j), lst += cnt[j]; } else { for (int j = 26; j &gt;= 1 &amp;&amp; lst &lt;= n; j--) if (cnt[j] != 0) change(1, lst, lst + cnt[j] - 1, j), lst += cnt[j]; } cnt[1] = 0; cnt[2] = 0; cnt[3] = 0; cnt[4] = 0; cnt[5] = 0; cnt[6] = 0; cnt[7] = 0; cnt[8] = 0; cnt[9] = 0; cnt[10] = 0; cnt[11] = 0; cnt[12] = 0; cnt[13] = 0; cnt[14] = 0; cnt[15] = 0; cnt[16] = 0; cnt[17] = 0; cnt[18] = 0; cnt[19] = 0; cnt[20] = 0; cnt[21] = 0; cnt[22] = 0; cnt[23] = 0; cnt[24] = 0; cnt[25] = 0; cnt[26] = 0; } print(1, 1, n); puts(\"\"); return 0;} Problem B: Matrix可能我语文好，在题意理解上没啥偏差。不像某GMK 感觉像个DP，但我连状态都不会设计。 怒打20分DFS暴力。 正解…emmm…很奇怪的DP 首先每列只能放一个1，咱们就看列就行了 它的状态是f[i][j]表示前i列有j列在右区间（好奇怪 咱也不知道为啥要这么设计，咱下次再碰上也想不出来 不管他状态为啥这么设计，转移还是能写的（ 首先我们要预处理两个数组L[]和R[]，表示i这个位置有几个左区间结束，有几个右区间开始。 然后就安置一下在右区间的1。枚举j，有两种情况，放和不放。不放很简单，就是f[i-1][j].放的话有R[i] - (j - 1)个位置，就是f[i - 1][j - 1] * (R[i] - (j - 1))。 再安置左区间。能想到在i-1列结束的左区间每一个都会占用一个1。我们从L[i-1]到L[i]枚举j，这是之前放了几个1。为什么要枚举？在i这个位置结束的左区间可能很多，你都得给他安排。再枚举右区间1的个数k，能放的位置就有i - j - k个。f[i][k] *= (i - j - k). 最后答案f[m][n]. 这道题真的怪，再给我出几次我都不一定做的出来。 123456789101112131415161718192021222324#include &lt;bits/stdc++.h&gt;const int N = 3005, P = 998244353;int n, m, L[N], R[N], f[N][N];signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1, l, r; i &lt;= n; i++) scanf(\"%d%d\", &amp;l, &amp;r), L[l]++, R[r]++; for (int i = 1; i &lt;= m; i++) L[i] += L[i - 1], R[i] += R[i - 1]; f[0][0] = 1; for (int i = 1; i &lt;= m; i++) { f[i][0] = f[i - 1][0]; //Right for (int j = 1; j &lt;= i; j++) f[i][j] = (f[i - 1][j] + (long long) f[i - 1][j - 1] * (R[i] - (j - 1))) % P; //Left for (int j = L[i - 1]; j &lt; L[i]; j++) for (int k = 0; k &lt;= i; k++) f[i][k] = (long long) f[i][k] * (i - k - j) % P; } return !printf(\"%d\\n\", f[m][n]); } Problem C: big当时我想不出C在颓emacs，GMK见状怒喷让我打暴力，遂打了5min的暴力。最后我36分他24分。 正解是从来没完全掌握过的Trie树。为什么说他从来没完全掌握过呢？因为我经常口胡却从来没写过。。。就像上次的启发式合并 首先是题目给的那个奇怪操作，等价于$(x &gt;&gt; (n - 1)) + (x &lt;&lt; 1)$我居然没看出来就是把最高位移到最低位。。。。Labelray：cwy你好呆喔 我们就设这个操作为$\\omega(x) = (x &gt;&gt; (n - 1)) + (x &lt;&lt; 1)$，把给的数组的前缀异或和pre[]和后缀异或和suf[]记下来。 要求的柿子：$\\omega (x \\oplus pre_i) \\oplus suf_{i + 1} = \\omega (x) \\oplus (\\omega (pre_i) \\oplus suf_{i + 1})$. 最后成了求最大最小值。。。老套路，上trie。 用dfs在trie上跑：1.下面有0和1 你必被异或成0，直接下一层2.下面有0或1 贪心一下，这位肯定能搞成1 这题充分暴露出cwy不会Trie的现实。。。。 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;bits/stdc++.h&gt;const int N = 100000 + 233;int n, m, tot, ans, cnt, a[N], pre[N], suf[N], trie[N &lt;&lt; 5][2];void insert(int x) { for (int i = n - 1, p = 0; i &gt;= 0; i--) { int t = (x &gt;&gt; i) &amp; 1; if (!trie[p][t]) trie[p][t] = ++tot; p = trie[p][t]; }}void dfs(int p, int k, int x) { if (trie[p][0] &amp;&amp; trie[p][1]) { dfs(trie[p][0], k - 1, x); dfs(trie[p][1], k - 1, x); } else if (trie[p][0]) { dfs(trie[p][0], k - 1, x + (1 &lt;&lt; k)); } else if (trie[p][1]) { dfs(trie[p][1], k - 1, x + (1 &lt;&lt; k)); } else { if (x &gt; ans) ans = x, cnt = 1; else if (x == ans) cnt++; }}signed main() { scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= m; i++) scanf(\"%d\", &amp;a[i]); for (int i = 1; i &lt;= m; i++) pre[i] = pre[i - 1] ^ ((2 * a[i] / (1 &lt;&lt; n) + 2 * a[i]) % (1 &lt;&lt; n)); for (int i = m; i &gt;= 1; i--) suf[i] = suf[i + 1] ^ a[i]; for (int i = 0; i &lt;= m; i++) insert(pre[i] ^ suf[i + 1]); dfs(0, n - 1, 0); return !printf(\"%d\\n%d\\n\", ans, cnt);}","link":"/2019/09/11/hzoi-CSP-11/"},{"title":"hzoi-CSP-7","text":"考爆了，爆零，GG. T1:方程的解一眼Exgcd,求出最小解，再求出所有解。 然而Exgcd忘了，面向数据范围编程，特判少了，40分滚粗。 这题要特判的太多了。。。 要注意特判0 要注意特判符号 要注意特判有无正整数解 大体来说就是这3条，关于符号的问题，Exgcd肯定要正数，可以先把负数标记一下，取相反数，Exgcd后再改回来。 关于Exgcd，有必要再证明一下。。。 已知不定方程$ax + by = c$,首先由某不记得名字的推论(裴蜀定理)，它有解的必要条件为 $(a, b) | c$. 我们设$g = (a, b)$，先求解$ax + by = g$. 因为$(a, b) = (b, a % b), a \\% b = a - b \\lfloor \\frac{a}{b} \\rfloor$，所以$bx + (a - b \\lfloor \\frac{a}{b} \\rfloor)y = g$.即：$ay + b(x - \\lfloor \\frac{a}{b} \\rfloor y) = g$. 可得原方程一组解 $x_1 = y, y_1 = x - \\lfloor \\frac{a}{b} \\rfloor y$. 而$c = kg$,我们令该不定方程两边同乘$k$得 $ax_0 + by_0 = c$, 其中$x_0 = kx_1, y_0 = ky_1$. 这是原方程的一组特解。要获得同解，我们让$x + \\Delta x, y + \\Delta y$. $a(x_0 + \\Delta x) + b (y_0 + \\Delta y) = c$.为使方程平衡，$a \\Delta x = b \\Delta y$. 所以$\\Delta x = \\frac{b}{g}, \\Delta y = \\frac{a}{g}$. 原方程同解为$x = x_0 + t \\frac{b}{g}, y = y_0 - t \\frac{a}{g}, t \\in Z $. 求出刚好大于0的y，求出刚好大于0的x对应的最大y，差值除以步长$\\frac{a}{g}$再+1就是答案。 本题过于难调，$Have fun debugging!$ （逃 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;bits/stdc++.h&gt;#define ll long longll Exgcd(ll a, ll b, ll &amp;x, ll &amp;y) { if (b == 0) { x = 1, y = 0; return a; } ll r = Exgcd(b, a % b, y, x); y -= (a / b) * x; return r;}ll Solve(ll a, ll b, ll c) { bool opa = 0, opb = 0; if (a == 0 &amp;&amp; b == 0) return c == 0 ? -1 : 0; if (a == 0) return (c == 0 || (c % b == 0 &amp;&amp; c / b &gt; 0)) ? -1 : 0; if (b == 0) return (c == 0 || (c % a == 0 &amp;&amp; c / a &gt; 0)) ? -1 : 0; if (c &lt; 0) a = -a, b = - b, c = -c; if (a &lt; 0) a = -a, opa = 1; if (b &lt; 0) b = -b, opb = 1; ll x, y; ll g = Exgcd(a, b, x, y); if (c % g != 0) return 0; ll t = c / g; x *= t, y *= t, a /= g, b /= g, c = t; if (opa) a = -a, x = -x; if (opb) b = -b, y = -y; if (a &lt; 0) a = -a, b = -b, c = -c; if (a * b &lt; 0) return -1; x %= b; while (x &lt;= 0) x += b; y = (c - a * x) / b; if (y &lt; 0) return 0; ll y_min = y % a; while (y_min &lt;= 0) y_min += a; return y_min &lt;= y ? (y - y_min) / a + 1 : 0;}signed main() { int T; scanf(\"%d\", &amp;T); while (T--) { ll a, b, c; scanf(\"%lld%lld%lld\", &amp;a, &amp;b, &amp;c); ll ans = Solve(a, b, c); if (ans == -1 || ans &gt; 65535) puts(\"ZenMeZheMeDuo\"); else printf(\"%lld\\n\", ans); }} T2:Visit最开始T2是树上染色，疯狂码，结果换题了，郁闷。。。。 有一个显然的$O(N^3)$暴力，不提了 算了一下后发现四个方向的次数知1求3，想到枚举其中一个方向，这是就是一个简单的组合计数。 可以发现图形在四个象限没有区别，n和m取abs.设向上为a，向下为b，向右为c，向左为d。 那么总方案数为$C_T^a C_{T - a}^b C_{T - a - b} ^ c C_{T - a - b - c} ^ d$，最后一项为1，化简为$C_T^a C_{T - a}^b * C_{T - a - b} ^ c$,发现和d没啥关系。 $a - b = m$.所以$b = a - m$.又因为$a + c - b - d = n + m, a + c + b + d = t$,所以$2(a + c) = t + n + m$。所以$c = \\frac{t + n + m - 2a}{2}$. 然后读错数据范围，以为60%的数据模数为质数，开始狂写质因数分解求组合数，码码码码码。结果不知道咋回事调不出来，GG。T3也没时间写了。。。随便写了一下暴力，结果着急写错了，本次考试凉凉。 事实上只有30%的数据模数为质数 那么模数不是质数该怎么办呢？可以使用ExLucas. 首先给出了每一个质因子次数为1，这太好了（ 我们先把模数质因数分解，用每个质因数作为模数计算一个答案。最后使用CRT合并答案。 答案的式子是可以化成$\\frac{T!}{a!b!c!*d!}$的，但这玩意求不了。。。还是用组合形式，每次预处理出1到$min(T, prime[i])$的阶乘，用Lucas求。 记得多取模 可以判一下非法情况，当T和(n + m)奇偶性不同时无解然而数据并没有无解的情况 要不再证一下CRT数学苦手今天好惨 CRT用来求解一组由形如$x_i \\equiv a_i \\mod m_i$组成的线性同余方程组。 我们使用构造的方法得到解： 我们设$M = \\prod \\limits_{i = 1}^{n} m_i$，$t_i = \\frac{M}{m_i} $即，M是所有$m_i$的最小公倍数，t是除$m_i$外所有模数的乘积。 现在我们要为每个方程找一个$y_i$，使得$y_i \\equiv 0 \\mod m_k, k != i, y_i \\equiv 1 \\mod m_i$.第一个式子使得乘$y_i$对其他方程没有影响，第二个式子使得$y_i * a_i \\equiv a_i \\mod m_i$. 由第一个式子，$y_i = t_i QAQ$. 由第二个式子，$t_i QAQ \\equiv 1 \\mod m_i$,即$QAQ$是$t_i$在模$m_i$意义下的乘法逆元。 所以，最后$x = \\prod \\limits_{i = 1}^n a_i t_i t_i ^ {-1} $. 考试时真没想到要CRT，我还是Too young，需要学习一个 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;bits/stdc++.h&gt;#define ll long longconst int N = 100233;ll T, mod, n, m, a, b, c, d, fac[N], pri[N], ans[N];ll Qpow(ll x, int b, ll p) { ll ret = 1; for (; b; b &gt;&gt;= 1, x = x * x % p) if (b &amp; 1) ret = ret * x % p; return ret;}ll CRT() { ll ret = 0, lcm = 1; for (int i = 1; i &lt;= pri[0]; i++) lcm *= pri[i]; for (int i = 1; i &lt;= pri[0]; i++) { ll t = lcm / pri[i]; ret = (ret + t * ans[i] * Qpow(t, pri[i] - 2, pri[i])) % lcm; } return (ret + lcm) % lcm;}ll C(ll n, ll m, ll p) { if (m &gt; n) return 0; if (n == 0 || m == n) return 1; return fac[n] * Qpow(fac[m], p - 2, p) % p * Qpow(fac[n - m], p - 2, p) % p;}ll Lucas(ll n, ll m, ll p) { return m == 0 ? 1 : C(n % p, m % p, p) * Lucas(n / p, m / p, p) % p;}void init(int id) { fac[1] = fac[0] = 1; for (int i = 2; i &lt;= std::min(T, pri[id]); i++) fac[i] = fac[i - 1] * i % pri[id];}void GG() { puts(\"0\"); exit(0);}signed main() { scanf(\"%lld%lld%lld%lld\", &amp;T, &amp;mod, &amp;n, &amp;m); n = abs(n), m = abs(m); if ((T &amp; 1) != ((n + m) &amp; 1) || T &lt; (n + m)) GG(); ll tmp = mod; for (int i = 2; i * i &lt;= mod; i++) if (tmp % i == 0) pri[++pri[0]] = i, tmp /= i; if (tmp &gt; 1) pri[++pri[0]] = tmp; for (int i = 1; i &lt;= pri[0]; i++) { init(i); for (int j = m; j &lt;= T; j++) { a = j, b = a - m, c = (T + m + n - 2 * a) / 2, d = c - n; if (d &lt; 0) break; ans[i] = (ans[i] + Lucas(T, a, pri[i]) % pri[i] * Lucas(T - a, b, pri[i]) % pri[i] * Lucas(T - a - b, c, pri[i]) % pri[i]) % pri[i]; } } printf(\"%lld\\n\", CRT()); return 0;} T3:光考试的时候看都没看，GG。 一看就有一个很显然的60分暴力： 写一个while(1)的死循环，开个vis[][][]记录到过的格子、方向，到了到过的格子且方向相同就跳出循环。 把反射和移动都放到一堆数组里，这样省得判断。 作为附中压行之王，我坚信我是附中最短传说。 12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;int n, m, k, xs, ys, dir, ans;const int dy[] = {0, -1, -1, 1, 1}, dx[] = {0, -1, 1, 1, -1}, r1[] = {0, 2, 1, 4, 3}, r2[] = {0, 4, 3, 2, 1}, r3[] = {0, 3, 4, 1, 2};bool wall[1005][1005], vis[1005][1005][6];char ds[5];signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k); if (n &gt; 1000 || m &gt; 1000) {printf(\"%lld\\n\", (long long) n * m); return 0;} for (int i = 1, x, y; i &lt;= k; i++) scanf(\"%d%d\", &amp;x, &amp;y), wall[x][y] = 1; scanf(\"%d%d%s\", &amp;xs, &amp;ys, ds); dir = ds[0] == 'N' ? ds[1] == 'E' ? 2 : 1 : ds[1] == 'E' ? 3 : 4; for (int i = 0; i &lt;= n + 1; i++) wall[i][0] = wall[i][m + 1] = 1; for (int i = 0; i &lt;= m + 1; i++) wall[0][i] = wall[n + 1][i] = 1; while (1) { if (vis[xs][ys][dir]) break; vis[xs][ys][dir] = 1; int xx = xs + dx[dir], yy = ys + dy[dir]; if (!wall[xx][yy]) {xs = xx, ys = yy; continue;} //撞不到 if (wall[xx][ys] &amp;&amp; !wall[xs][yy]) {dir = r1[dir], ys = yy; continue;} //撞墙 if (!wall[xx][ys] &amp;&amp; wall[xs][yy]) {dir = r2[dir], xs = xx; continue;} if (wall[xx][ys] &amp;&amp; wall[xs][yy]) {dir = r3[dir]; continue;} //撞到角了 dir = r3[dir]; } for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= m; j++) if (vis[i][j][1] || vis[i][j][2] || vis[i][j][3] || vis[i][j][4]) ans++; printf(\"%d\\n\", ans); return 0;} 正解doc看不懂，向郭老师学习。正解就是个优化过的暴力。。。。。 首先图肯定不能开个二维数组存，不然你必死（ 光线肯定走几条斜线，观察图可以发现性质，两种斜线分别x+y相同或x-y相同。于是开一堆vector，往每个vector仍每条斜线上的障碍物的x。 然后大力模拟，走的时候不用一步一步走了，直接upper_bound.这就是正解优化的地方，从一步一步走到走很多步。。。 关于结束的问题，有一个很简单的思路。可以先让光线走一次，从第一个障碍物那里开始模拟，第二次到这个障碍物便是走了一圈了。 特别的，如果180度反弹，直接跳出递归，反方向找。 我觉得我还是蛮短的。作为附中压行之王，我坚信我即使不是附中最短传说，也是附中次短传说。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;int n, m, k, xs, ys, dir, start_x, start_y, vised;long long ans; bool ret;const int N = 100233, dy[] = {0, -1, -1, 1, 1}, dx[] = {0, 1, -1, 1, -1};int r1[] = {0, 2, 1, 4, 3}, r2[] = {0, 3, 4, 1, 2}, r3[] = {0, 4, 3, 2, 1};std::vector&lt;int&gt; l1[N&lt;&lt;1], l2[N&lt;&lt;2]; //l1:\"/\", l2:\"\\\"char ds[5];void Rush(int x, int y, int dir) { int tmp = 0; switch (dir) { case 1: tmp = std::upper_bound(l1[x+y].begin(), l1[x+y].end(), x) - l1[x+y].begin(); xs = l1[x+y][tmp], ys = x + y - xs; ans += xs - x; break; case 2: tmp = std::upper_bound(l2[x-y+N].begin(), l2[x-y+N].end(), x) - l2[x-y+N].begin(); xs = l2[x-y+N][tmp-1], ys = xs - x + y; ans += x - xs; break; case 3: tmp = std::upper_bound(l2[x-y+N].begin(), l2[x-y+N].end(), x) - l2[x-y+N].begin(); xs = l2[x-y+N][tmp], ys = xs - x + y; ans += xs - x; break; case 4: tmp = std::upper_bound(l1[x+y].begin(), l1[x+y].end(), x) - l1[x+y].begin(); xs = l1[x+y][tmp-1], ys = x + y - xs; ans += x - xs; break; }}bool is_banned(int x, int y) { int tmp = std::lower_bound(l1[x+y].begin(), l1[x+y].end(), x) - l1[x+y].begin(); return l1[x+y][tmp] == x;}void Move(int x, int y, int d) { if (x == start_x &amp;&amp; y == start_y &amp;&amp; ++vised &gt; 1) return; Rush(x, y, d); if (is_banned(xs, ys-dy[d]) ^ is_banned(xs-dx[d], ys)) { if (is_banned(xs, ys-dy[d])) Move(xs - dx[d], ys, r1[d]); else Move(xs, ys - dy[d], r2[d]); } else ret = 1;}void Add(int x, int y) { l1[x+y].push_back(x), l2[x-y+N].push_back(x);}signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;k); for (int i = 1, x, y; i &lt;= k; i++) scanf(\"%d%d\", &amp;x, &amp;y), l1[x+y].push_back(x), l2[x-y+N].push_back(x); scanf(\"%d%d%s\", &amp;start_x, &amp;start_y, ds); dir = ds[0] == 'N' ? ds[1] == 'E' ? 1 : 2 : ds[1] == 'E' ? 3 : 4; for (int i = 0; i &lt;= n + 1; i++) Add(i, 0), Add(i, m + 1); for (int i = 0; i &lt;= m + 1; i++) Add(0, i), Add(n + 1, i); for (int i = 0; i &lt;= n + m + 2; i++) std::sort(l1[i].begin(), l1[i].end()); for (int i = N - m - 1; i &lt;= N + n + 1; i++) std::sort(l2[i].begin(), l2[i].end()); Rush(start_x, start_y, dir); if (is_banned(xs, ys-dy[dir]) ^ is_banned(xs-dx[dir], ys)) { if (is_banned(xs, ys-dy[dir])) start_x = xs - dx[dir], start_y = ys, dir = r1[dir]; else start_x = xs, start_y = ys - dy[dir], dir = r2[dir]; } else start_x = xs - dx[dir], start_y = ys - dy[dir], dir = r3[dir]; ans = 0; Move(start_x, start_y, dir); if (ret) vised = 0, Move(start_x, start_y, r3[dir]), --ans; printf(\"%lld\\n\", ans); return 0;} 总结这次考试最大一个问题就是忘了数学那一堆公式。。。。血淋淋的教训告诉我们死记是不会有好的江来的（ 还是要自己证明定理，不然必忘 还有一个问题，调不出来题就先把暴力打了看看下一个，别吊死在一棵树上，最后还没调出来，树倒了。。。。","link":"/2019/09/11/hzoi-CSP-7/"},{"title":"hzoi-CSP-9","text":"第⑨次考试会变成baka 起床就感觉喉咙好痛，来了机房直接GG，摸了下腋下感觉药丸。 昏了头考试，崩的有点厉害（ 本次考试题目顺序的设置充满恶意。。。 Problem A: 随我一看提示原根就弃了，写了个$O(nmmod)$的暴力，结果一个点都没跑过。。。。 首先这是个假期望题，总方案数为$n^m$，求出所有情况之和就可以了 设f[i][j]为i次操作x值为j的次数，暴力转移一波。写出方程还能发现是矩阵乘法的形式，这部分就不说了，直接看正解，毕竟我考试连这几个都没写。 题目提示我们用原根， 我们就用原根。用原根的幂就可以在p-1次方内遍历整个剩余系，我们可以用原根的幂的形式代替原来的a数组。 这样，原来的$a_i a_j a_k$的形式就变成了$g^i g ^j g ^ k = g ^ {i + j + k}$，乘法变成了加法。 我们把原来的f变一下，表示i次操作变成原根的j次方的次数。$f[i][(i + j) \\% (p - 1)]+=f[i-1][i] * f[i-1][j]$. 这玩意又能矩阵优化，还是循环矩阵，写个循环矩阵快速幂，$O(mod^2 logm)$，完事了 几个问题： 1.所以原根是啥啊？其实题目给的挺清楚。 2.原根咋求啊？这题数据范围这么小，从2到mod-2枚举一边就完事了其实数据范围大了也没事，原根一般都不大（小声） 3.这题取模有三个模数，要注意mod是题目给的，在把a数组变为原根的幂的形式时用;mod-1是根据拓展欧拉定理，$a^b = a^{b % \\phi p} \\mod p, (b, p) = 1$.在快速幂处理指数的时候用;1e9+7对与答案有关的数都用。 原根真是个好东西，希望我能记住。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/* ______ ______ / \\ / \\ | | | | | || | | | | || | | /\\ | | |\\______/ \\__/ \\__/ \\______/*/#include &lt;bits/stdc++.h&gt;#define ll long longconst int MO = 1000000007, N = 100005;int n, m, p, rt;ll po[N], idx[N], a[N];struct Matrix { ll a[1005]; friend Matrix operator *(Matrix x, Matrix y) { Matrix z = {}; for (int i = 0; i &lt;= p - 2; i++) for (int j = 0; j &lt;= p - 2; j++) z.a[(i + j) % (p - 1)] = (z.a[(i + j) % (p - 1)] + x.a[i] * y.a[j]) % MO; return z; } inline void clear() { for (int i = 0; i &lt;= p - 2; i++) a[i] = 0; } Matrix qpow(int b) { Matrix tmp, x = (*this); tmp.clear(), tmp.a[idx[1]]++; for (; b; b &gt;&gt;= 1, x = x * x) if (b &amp; 1) tmp = tmp * x; return tmp; }} mtx, ans;ll qpow(ll x, ll b, ll p) { ll tmp = 1; for (; b; b &gt;&gt;= 1, x = x * x % p) if (b &amp; 1) tmp = tmp * x % p; return tmp;}inline int getrt(int x) { for (int i = 2; i &lt;= x; i++) { ll tmp = 1; bool flg = 1; for (int j = 1; j &lt;= x - 2; j++) { tmp = tmp * i % x; if (tmp == 1) { flg = 0; break; } } if (flg) return i; }}signed main() { scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;p); rt = getrt(p); po[0] = 1; for (int i = 1; i &lt;= p - 2; i++) po[i] = po[i - 1] * (ll) rt % p, idx[po[i]] = i; for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;a[i]), mtx.a[idx[a[i]]]++; ans = mtx.qpow(m); ll tot = 0; for (int i = 0; i &lt;= p - 2; i++) tot = (tot + po[i] * ans.a[i]) % MO; ll inv = qpow(n, (ll) m * (MO - 2), MO); printf(\"%lld\\n\", tot * inv % MO); return 0;} Problem B: 单考试就写了个Subtask1，，， 设$sum = \\sum a_i$ siz[x] 是x为根子树的每个节点的a和。 很明显，每个点的贡献就是它子树内每个节点的siz和。 Subtask 1应该是个换根DP，把1作为根节点，一遍dfs求出b[1]，第二遍dfs求出b[]。转移：$b[y] = b[x] + sum - 2 * siz[x]$，这个还是比较显然的。 Subtask 2我考场上觉得应该是个高斯消元，但我万年没写过不会写，而且数据范围也不对，不是正解。 正解是解方程，但不用搞死小圆 换根的时候得到了$b[y] - b[x] = sum - 2 * siz[x]$。能列出n-1个方程，但少了一个解不出来。b[1]搞不出来这种形式的式子。 但我们可以暴力算b[1]啊！！$b_1 = \\sum \\limits_{i = 2}^n siz[i]$. 我们有n个方程了，可以解n个未知数了。暴力回代就完事了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091/* ______ ______ / \\ / \\ | | | | | || | | | | || | | /\\ | | |\\______/ \\__/ \\__/ \\______/*/#include &lt;bits/stdc++.h&gt;#define ll long longconst int N = 100000 + 2333;int T, n, ecnt, head[N], op;ll a[N], b[N], siz[N], sum, f[N];struct Edge {int y, nxt;} e[N &lt;&lt; 1];inline void add_edge(int x, int y) { e[++ecnt] = {y, head[x]}, head[x] = ecnt;}namespace case0 { ll f[N]; void OAO(int x, int fa) { siz[x] = a[x], b[x] = 0; for (int i = head[x], y = e[i].y; i; i = e[i].nxt, y = e[i].y) if (y != fa) OAO(y, x), siz[x] += siz[y], b[x] += b[y] + siz[y]; } void OwO(int x, int fa) { for (int i = head[x], y = e[i].y; i; i = e[i].nxt, y = e[i].y) if (y != fa) b[y] = b[x] + sum - 2 * siz[y], OwO(y, x); } void QAQ() { for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;a[i]), sum += a[i]; OAO(1, 0), OwO(1, 0); for (int i = 1; i &lt;= n; i++) printf(\"%lld \", b[i]); printf(\"\\n\"); }}namespace case1 { void QwQ(int x, int fa) { for (int i = head[x], y = e[i].y; i; i = e[i].nxt, y = e[i].y) if (y != fa) f[y] = b[y] - b[x], QwQ(y, x); } void OwO(int x, int fa) { a[x] = siz[x] = (sum - f[x]) / 2; for (int i = head[x], y = e[i].y; i; i = e[i].nxt, y = e[i].y) if (y != fa) OwO(y, x), a[x] -= siz[y]; } void QAQ() { for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;b[i]); QwQ(1, 0); for (int i = 2; i &lt;= n; i++) sum += f[i]; sum = (sum + 2 * b[1]) / (ll) (n - 1); OwO(1, 0), a[1] = sum; for (int i = 2; i &lt;= n; i++) a[1] -= a[i]; for (int i = 1; i &lt;= n; i++) printf(\"%lld \", a[i]); printf(\"\\n\"); }}void clear() { memset(head, 0, sizeof(head)); ecnt = sum = 0;}signed main() { scanf(\"%d\", &amp;T); while (T--) { scanf(\"%d\", &amp;n); for (int i = 1, x, y; i &lt; n; i++) scanf(\"%d%d\", &amp;x, &amp;y), add_edge(x, y), add_edge(y, x); scanf(\"%d\", &amp;op); if (op == 1) case1::QAQ(); if (op == 0) case0::QAQ(); clear(); } return 0;} Problem C: 题T3最可做，wsl 科学开题顺序：C -&gt; B -&gt; A（ 这个事情告诉我们要先把所有题看一遍，谁告诉你题目就一定要按照难度升序排列了（ 题中还有坑，subtask 0,1,3都是白给75分，然而我被卡在2一直没看3。。。。 讲解按难度升序排列，不像出题人那么屑。 subtask 0: 枚举水平向右步数a，垂直向上步数c。答案为$C_n^a C_{n - a} ^ a C_{n - 2a} ^ c = \\frac{n!}{a! a! c! c!}$. 预处理阶乘和阶乘逆元，完事 subtask 1: 设向右步数a，向左步数b，这就像出入栈问题，必须保持 a &gt;= b.所以答案就是Cat[n / 2]. subtask 3: 就是subtask 0和1合了起来，枚举水平向右步数a，可算出向上步数c，相当于在x轴和y轴都做一边subtask1。 答案就是$C_n^{2a} Cat[a] Cat[c]$. subtask 2: 这问组合计数不能，我在考场上疯狂尝试容斥，结果容不出来。 其实就是一个很简单的DP。设f[i]为第i步回到原点的方案数，枚举第一次回到原点的步数j，它满足subtask 1。$f[i] = f[i - j] Cat[j / 2 - 1] * 4$. 解释细节：Cat为什么下标要减1？j步内是不能回到原点的，可以类比出入栈，我们不能让栈为空。×4就是4个方向。 看完题再开题！！！ 看完题再开题！！！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/* ______ ______ / \\ / \\ | | | | | || | | | | || | | /\\ | | |\\______/ \\__/ \\__/ \\______/*/#include &lt;bits/stdc++.h&gt;#define ll long longconst int MO = 1000000007, N = 1000000 + 233;int n, typ;ll ans, fac[N], inv[N], cat[N];ll Qpow(ll x, int b) { ll ret = 1; for (; b; b &gt;&gt;= 1, x = x * x % MO) if (b &amp; 1) ret = ret * x % MO; return ret;}void init(int t) { fac[0] = fac[1] = 1, cat[1] = 1, cat[0] = 1; for (int i = 2; i &lt;= t; i++) fac[i] = fac[i - 1] * i % MO; for (int i = 0; i &lt;= t; i++) inv[i] = Qpow(fac[i], MO - 2); for (int i = 2; i &lt;= t; i++) cat[i] = (cat[i - 1] * (4 * i - 2) % MO * Qpow(i + 1, MO - 2) % MO) % MO;}namespace case0 { void QAQ() { init(n); for (int i = 0; i &lt;= n; i += 2) { int a = i / 2, c = (n - i) / 2; ans = (ans + fac[n] * inv[a] % MO * inv[a] % MO * inv[c] % MO * inv[c] % MO) % MO; } printf(\"%lld\\n\", ans); }}namespace case1 { void QAQ() { init(n); printf(\"%lld\\n\", cat[n / 2]); }}namespace case2 { ll f[N]; void QAQ() { init(n), n /= 2; f[0] = 1, f[1] = 4; for (int i = 2; i &lt;= n; i++) for (int j = 1; j &lt;= i; j++) f[i] = (f[i] + 4 * f[i - j] % MO * cat[j - 1]) % MO; printf(\"%lld\\n\", f[n]% MO); }}namespace case3 { void QAQ() { init(n); for (int i = 0; i &lt;= n; i += 2) { int a = i / 2, c = (n - i) / 2; ans = (ans + fac[n] * inv[i] % MO * inv[n - i] % MO * cat[a] % MO * cat[c] % MO) % MO; } printf(\"%lld\\n\", ans); }}signed main() { scanf(\"%d%d\", &amp;n, &amp;typ); if (typ == 0) case0::QAQ(); if (typ == 1) case1::QAQ(); if (typ == 2) case2::QAQ(); if (typ == 3) case3::QAQ(); return 0;} 抛开身体原因不谈，本次考试仍然暴露出了思维深度不足的大问题，比如T2想到高斯消元就跑了，难道真的想不到解方程吗？为什么就不再深入的思考一下呢？ 时间不多了，要努力啊。","link":"/2019/09/11/hzoi-CSP-9/"},{"title":"衡中NOIP模拟赛4","text":"Please enter the password to read the blog. Incorrect Password! No content to display! ","link":"/2019/07/16/hzoi-NOIP-4/"}],"tags":[{"name":"基环树","slug":"基环树","link":"/tags/基环树/"},{"name":"LCA","slug":"LCA","link":"/tags/LCA/"},{"name":"最短路","slug":"最短路","link":"/tags/最短路/"},{"name":"Dijkstra","slug":"Dijkstra","link":"/tags/Dijkstra/"},{"name":"线段树优化建图","slug":"线段树优化建图","link":"/tags/线段树优化建图/"},{"name":"二分","slug":"二分","link":"/tags/二分/"},{"name":"最小生成树","slug":"最小生成树","link":"/tags/最小生成树/"},{"name":"欧拉回路","slug":"欧拉回路","link":"/tags/欧拉回路/"},{"name":"Tarjan","slug":"Tarjan","link":"/tags/Tarjan/"},{"name":"圆方树","slug":"圆方树","link":"/tags/圆方树/"},{"name":"BCC","slug":"BCC","link":"/tags/BCC/"},{"name":"树上差分","slug":"树上差分","link":"/tags/树上差分/"},{"name":"状压DP","slug":"状压DP","link":"/tags/状压DP/"},{"name":"比赛","slug":"比赛","link":"/tags/比赛/"},{"name":"暴力","slug":"暴力","link":"/tags/暴力/"},{"name":"树上启发式合并","slug":"树上启发式合并","link":"/tags/树上启发式合并/"},{"name":"动态开点线段树","slug":"动态开点线段树","link":"/tags/动态开点线段树/"},{"name":"数学","slug":"数学","link":"/tags/数学/"},{"name":"考试","slug":"考试","link":"/tags/考试/"},{"name":"KMP","slug":"KMP","link":"/tags/KMP/"},{"name":"2-pointers","slug":"2-pointers","link":"/tags/2-pointers/"},{"name":"模拟退火","slug":"模拟退火","link":"/tags/模拟退火/"},{"name":"图论","slug":"图论","link":"/tags/图论/"},{"name":"欧拉路","slug":"欧拉路","link":"/tags/欧拉路/"},{"name":"并查集","slug":"并查集","link":"/tags/并查集/"},{"name":"DP","slug":"DP","link":"/tags/DP/"},{"name":"树形DP","slug":"树形DP","link":"/tags/树形DP/"},{"name":"期望DP","slug":"期望DP","link":"/tags/期望DP/"},{"name":"记忆化搜索","slug":"记忆化搜索","link":"/tags/记忆化搜索/"},{"name":"SCC","slug":"SCC","link":"/tags/SCC/"},{"name":"缩点","slug":"缩点","link":"/tags/缩点/"},{"name":"矩阵乘法","slug":"矩阵乘法","link":"/tags/矩阵乘法/"},{"name":"DFS","slug":"DFS","link":"/tags/DFS/"},{"name":"生成树","slug":"生成树","link":"/tags/生成树/"},{"name":"莫队","slug":"莫队","link":"/tags/莫队/"},{"name":"带修莫队","slug":"带修莫队","link":"/tags/带修莫队/"},{"name":"Floyd","slug":"Floyd","link":"/tags/Floyd/"},{"name":"拓扑排序","slug":"拓扑排序","link":"/tags/拓扑排序/"},{"name":"二分图","slug":"二分图","link":"/tags/二分图/"},{"name":"匈牙利","slug":"匈牙利","link":"/tags/匈牙利/"},{"name":"分块","slug":"分块","link":"/tags/分块/"},{"name":"数位DP","slug":"数位DP","link":"/tags/数位DP/"},{"name":"DCC","slug":"DCC","link":"/tags/DCC/"},{"name":"树链剖分","slug":"树链剖分","link":"/tags/树链剖分/"},{"name":"RMQ","slug":"RMQ","link":"/tags/RMQ/"},{"name":"ST表","slug":"ST表","link":"/tags/ST表/"},{"name":"SPFA","slug":"SPFA","link":"/tags/SPFA/"},{"name":"差分约束","slug":"差分约束","link":"/tags/差分约束/"},{"name":"割点","slug":"割点","link":"/tags/割点/"},{"name":"bitset","slug":"bitset","link":"/tags/bitset/"},{"name":"离散化","slug":"离散化","link":"/tags/离散化/"},{"name":"数论","slug":"数论","link":"/tags/数论/"},{"name":"拓展欧拉定理","slug":"拓展欧拉定理","link":"/tags/拓展欧拉定理/"},{"name":"树状数组","slug":"树状数组","link":"/tags/树状数组/"},{"name":"Hash","slug":"Hash","link":"/tags/Hash/"},{"name":"线段树","slug":"线段树","link":"/tags/线段树/"},{"name":"快速幂","slug":"快速幂","link":"/tags/快速幂/"},{"name":"前缀和","slug":"前缀和","link":"/tags/前缀和/"},{"name":"DP优化","slug":"DP优化","link":"/tags/DP优化/"},{"name":"离线","slug":"离线","link":"/tags/离线/"},{"name":"背包","slug":"背包","link":"/tags/背包/"},{"name":"BFS","slug":"BFS","link":"/tags/BFS/"},{"name":"斐波那契","slug":"斐波那契","link":"/tags/斐波那契/"},{"name":"Trie","slug":"Trie","link":"/tags/Trie/"},{"name":"EXGCD","slug":"EXGCD","link":"/tags/EXGCD/"},{"name":"CRT","slug":"CRT","link":"/tags/CRT/"},{"name":"EXLucas","slug":"EXLucas","link":"/tags/EXLucas/"},{"name":"模拟","slug":"模拟","link":"/tags/模拟/"},{"name":"矩阵快速幂","slug":"矩阵快速幂","link":"/tags/矩阵快速幂/"},{"name":"组合计数","slug":"组合计数","link":"/tags/组合计数/"},{"name":"状压","slug":"状压","link":"/tags/状压/"},{"name":"贪心","slug":"贪心","link":"/tags/贪心/"},{"name":"分治","slug":"分治","link":"/tags/分治/"}],"categories":[{"name":"题解","slug":"题解","link":"/categories/题解/"}]}